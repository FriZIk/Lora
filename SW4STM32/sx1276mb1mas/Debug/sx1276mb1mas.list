
sx1276mb1mas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007c68  08007c68  00017c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007f68  08007f68  00017f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  08007f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b8  2000009c  0800800c  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000654  0800800c  00020654  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f311  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000517e  00000000  00000000  0003f3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ac54  00000000  00000000  00044553  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001170  00000000  00000000  0004f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001430  00000000  00000000  00050318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001d17d  00000000  00000000  00051748  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00018373  00000000  00000000  0006e8c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0009d8c0  00000000  00000000  00086c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001244f8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000036f8  00000000  00000000  00124574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007c50 	.word	0x08007c50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	08007c50 	.word	0x08007c50

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 fff1 	bl	8001400 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ff49 	bl	80012c0 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ffe3 	bl	8001400 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffd9 	bl	8001400 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff6b 	bl	8001338 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ff61 	bl	8001338 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_uldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d10f      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 800048c:	2900      	cmp	r1, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_uldivmod+0xe>
 8000490:	2800      	cmp	r0, #0
 8000492:	d002      	beq.n	800049a <__aeabi_uldivmod+0x16>
 8000494:	2100      	movs	r1, #0
 8000496:	43c9      	mvns	r1, r1
 8000498:	1c08      	adds	r0, r1, #0
 800049a:	b407      	push	{r0, r1, r2}
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <__aeabi_uldivmod+0x24>)
 800049e:	a102      	add	r1, pc, #8	; (adr r1, 80004a8 <__aeabi_uldivmod+0x24>)
 80004a0:	1840      	adds	r0, r0, r1
 80004a2:	9002      	str	r0, [sp, #8]
 80004a4:	bd03      	pop	{r0, r1, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	ffffff5d 	.word	0xffffff5d
 80004ac:	b403      	push	{r0, r1}
 80004ae:	4668      	mov	r0, sp
 80004b0:	b501      	push	{r0, lr}
 80004b2:	9802      	ldr	r0, [sp, #8]
 80004b4:	f000 f824 	bl	8000500 <__udivmoddi4>
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	469e      	mov	lr, r3
 80004bc:	b002      	add	sp, #8
 80004be:	bc0c      	pop	{r2, r3}
 80004c0:	4770      	bx	lr
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_d2uiz>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	2200      	movs	r2, #0
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <__aeabi_d2uiz+0x38>)
 80004ca:	0004      	movs	r4, r0
 80004cc:	000d      	movs	r5, r1
 80004ce:	f7ff ffcf 	bl	8000470 <__aeabi_dcmpge>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d104      	bne.n	80004e0 <__aeabi_d2uiz+0x1c>
 80004d6:	0020      	movs	r0, r4
 80004d8:	0029      	movs	r1, r5
 80004da:	f001 fdb3 	bl	8002044 <__aeabi_d2iz>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <__aeabi_d2uiz+0x38>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	0020      	movs	r0, r4
 80004e6:	0029      	movs	r1, r5
 80004e8:	f001 fa64 	bl	80019b4 <__aeabi_dsub>
 80004ec:	f001 fdaa 	bl	8002044 <__aeabi_d2iz>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	061b      	lsls	r3, r3, #24
 80004f4:	469c      	mov	ip, r3
 80004f6:	4460      	add	r0, ip
 80004f8:	e7f1      	b.n	80004de <__aeabi_d2uiz+0x1a>
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	41e00000 	.word	0x41e00000

08000500 <__udivmoddi4>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	464f      	mov	r7, r9
 8000504:	4646      	mov	r6, r8
 8000506:	46d6      	mov	lr, sl
 8000508:	b5c0      	push	{r6, r7, lr}
 800050a:	0004      	movs	r4, r0
 800050c:	b082      	sub	sp, #8
 800050e:	000d      	movs	r5, r1
 8000510:	4691      	mov	r9, r2
 8000512:	4698      	mov	r8, r3
 8000514:	428b      	cmp	r3, r1
 8000516:	d82f      	bhi.n	8000578 <__udivmoddi4+0x78>
 8000518:	d02c      	beq.n	8000574 <__udivmoddi4+0x74>
 800051a:	4641      	mov	r1, r8
 800051c:	4648      	mov	r0, r9
 800051e:	f001 fe51 	bl	80021c4 <__clzdi2>
 8000522:	0029      	movs	r1, r5
 8000524:	0006      	movs	r6, r0
 8000526:	0020      	movs	r0, r4
 8000528:	f001 fe4c 	bl	80021c4 <__clzdi2>
 800052c:	1a33      	subs	r3, r6, r0
 800052e:	469c      	mov	ip, r3
 8000530:	3b20      	subs	r3, #32
 8000532:	469a      	mov	sl, r3
 8000534:	d500      	bpl.n	8000538 <__udivmoddi4+0x38>
 8000536:	e076      	b.n	8000626 <__udivmoddi4+0x126>
 8000538:	464b      	mov	r3, r9
 800053a:	4652      	mov	r2, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	001f      	movs	r7, r3
 8000540:	464b      	mov	r3, r9
 8000542:	4662      	mov	r2, ip
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d828      	bhi.n	800059e <__udivmoddi4+0x9e>
 800054c:	d025      	beq.n	800059a <__udivmoddi4+0x9a>
 800054e:	4653      	mov	r3, sl
 8000550:	1ba4      	subs	r4, r4, r6
 8000552:	41bd      	sbcs	r5, r7
 8000554:	2b00      	cmp	r3, #0
 8000556:	da00      	bge.n	800055a <__udivmoddi4+0x5a>
 8000558:	e07b      	b.n	8000652 <__udivmoddi4+0x152>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2301      	movs	r3, #1
 8000564:	4652      	mov	r2, sl
 8000566:	4093      	lsls	r3, r2
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	4662      	mov	r2, ip
 800056e:	4093      	lsls	r3, r2
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	e018      	b.n	80005a6 <__udivmoddi4+0xa6>
 8000574:	4282      	cmp	r2, r0
 8000576:	d9d0      	bls.n	800051a <__udivmoddi4+0x1a>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <__udivmoddi4+0x8a>
 8000586:	601c      	str	r4, [r3, #0]
 8000588:	605d      	str	r5, [r3, #4]
 800058a:	9800      	ldr	r0, [sp, #0]
 800058c:	9901      	ldr	r1, [sp, #4]
 800058e:	b002      	add	sp, #8
 8000590:	bc1c      	pop	{r2, r3, r4}
 8000592:	4690      	mov	r8, r2
 8000594:	4699      	mov	r9, r3
 8000596:	46a2      	mov	sl, r4
 8000598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059a:	42a3      	cmp	r3, r4
 800059c:	d9d7      	bls.n	800054e <__udivmoddi4+0x4e>
 800059e:	2200      	movs	r2, #0
 80005a0:	2300      	movs	r3, #0
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	4663      	mov	r3, ip
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0e9      	beq.n	8000580 <__udivmoddi4+0x80>
 80005ac:	07fb      	lsls	r3, r7, #31
 80005ae:	4698      	mov	r8, r3
 80005b0:	4641      	mov	r1, r8
 80005b2:	0872      	lsrs	r2, r6, #1
 80005b4:	430a      	orrs	r2, r1
 80005b6:	087b      	lsrs	r3, r7, #1
 80005b8:	4666      	mov	r6, ip
 80005ba:	e00e      	b.n	80005da <__udivmoddi4+0xda>
 80005bc:	42ab      	cmp	r3, r5
 80005be:	d101      	bne.n	80005c4 <__udivmoddi4+0xc4>
 80005c0:	42a2      	cmp	r2, r4
 80005c2:	d80c      	bhi.n	80005de <__udivmoddi4+0xde>
 80005c4:	1aa4      	subs	r4, r4, r2
 80005c6:	419d      	sbcs	r5, r3
 80005c8:	2001      	movs	r0, #1
 80005ca:	1924      	adds	r4, r4, r4
 80005cc:	416d      	adcs	r5, r5
 80005ce:	2100      	movs	r1, #0
 80005d0:	3e01      	subs	r6, #1
 80005d2:	1824      	adds	r4, r4, r0
 80005d4:	414d      	adcs	r5, r1
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d006      	beq.n	80005e8 <__udivmoddi4+0xe8>
 80005da:	42ab      	cmp	r3, r5
 80005dc:	d9ee      	bls.n	80005bc <__udivmoddi4+0xbc>
 80005de:	3e01      	subs	r6, #1
 80005e0:	1924      	adds	r4, r4, r4
 80005e2:	416d      	adcs	r5, r5
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d1f8      	bne.n	80005da <__udivmoddi4+0xda>
 80005e8:	9800      	ldr	r0, [sp, #0]
 80005ea:	9901      	ldr	r1, [sp, #4]
 80005ec:	4653      	mov	r3, sl
 80005ee:	1900      	adds	r0, r0, r4
 80005f0:	4169      	adcs	r1, r5
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db23      	blt.n	800063e <__udivmoddi4+0x13e>
 80005f6:	002b      	movs	r3, r5
 80005f8:	4652      	mov	r2, sl
 80005fa:	40d3      	lsrs	r3, r2
 80005fc:	002a      	movs	r2, r5
 80005fe:	4664      	mov	r4, ip
 8000600:	40e2      	lsrs	r2, r4
 8000602:	001c      	movs	r4, r3
 8000604:	4653      	mov	r3, sl
 8000606:	0015      	movs	r5, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	db2d      	blt.n	8000668 <__udivmoddi4+0x168>
 800060c:	0026      	movs	r6, r4
 800060e:	4657      	mov	r7, sl
 8000610:	40be      	lsls	r6, r7
 8000612:	0033      	movs	r3, r6
 8000614:	0026      	movs	r6, r4
 8000616:	4667      	mov	r7, ip
 8000618:	40be      	lsls	r6, r7
 800061a:	0032      	movs	r2, r6
 800061c:	1a80      	subs	r0, r0, r2
 800061e:	4199      	sbcs	r1, r3
 8000620:	9000      	str	r0, [sp, #0]
 8000622:	9101      	str	r1, [sp, #4]
 8000624:	e7ac      	b.n	8000580 <__udivmoddi4+0x80>
 8000626:	4662      	mov	r2, ip
 8000628:	2320      	movs	r3, #32
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	464a      	mov	r2, r9
 800062e:	40da      	lsrs	r2, r3
 8000630:	4661      	mov	r1, ip
 8000632:	0013      	movs	r3, r2
 8000634:	4642      	mov	r2, r8
 8000636:	408a      	lsls	r2, r1
 8000638:	0017      	movs	r7, r2
 800063a:	431f      	orrs	r7, r3
 800063c:	e780      	b.n	8000540 <__udivmoddi4+0x40>
 800063e:	4662      	mov	r2, ip
 8000640:	2320      	movs	r3, #32
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	002a      	movs	r2, r5
 8000646:	4666      	mov	r6, ip
 8000648:	409a      	lsls	r2, r3
 800064a:	0023      	movs	r3, r4
 800064c:	40f3      	lsrs	r3, r6
 800064e:	4313      	orrs	r3, r2
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0xfc>
 8000652:	4662      	mov	r2, ip
 8000654:	2320      	movs	r3, #32
 8000656:	2100      	movs	r1, #0
 8000658:	1a9b      	subs	r3, r3, r2
 800065a:	2200      	movs	r2, #0
 800065c:	9100      	str	r1, [sp, #0]
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	2201      	movs	r2, #1
 8000662:	40da      	lsrs	r2, r3
 8000664:	9201      	str	r2, [sp, #4]
 8000666:	e780      	b.n	800056a <__udivmoddi4+0x6a>
 8000668:	2320      	movs	r3, #32
 800066a:	4662      	mov	r2, ip
 800066c:	0026      	movs	r6, r4
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	40de      	lsrs	r6, r3
 8000672:	002f      	movs	r7, r5
 8000674:	46b0      	mov	r8, r6
 8000676:	4666      	mov	r6, ip
 8000678:	40b7      	lsls	r7, r6
 800067a:	4646      	mov	r6, r8
 800067c:	003b      	movs	r3, r7
 800067e:	4333      	orrs	r3, r6
 8000680:	e7c8      	b.n	8000614 <__udivmoddi4+0x114>
 8000682:	46c0      	nop			; (mov r8, r8)

08000684 <__aeabi_dadd>:
 8000684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000686:	464f      	mov	r7, r9
 8000688:	4646      	mov	r6, r8
 800068a:	46d6      	mov	lr, sl
 800068c:	000c      	movs	r4, r1
 800068e:	0309      	lsls	r1, r1, #12
 8000690:	b5c0      	push	{r6, r7, lr}
 8000692:	0a49      	lsrs	r1, r1, #9
 8000694:	0f47      	lsrs	r7, r0, #29
 8000696:	005e      	lsls	r6, r3, #1
 8000698:	4339      	orrs	r1, r7
 800069a:	031f      	lsls	r7, r3, #12
 800069c:	0fdb      	lsrs	r3, r3, #31
 800069e:	469c      	mov	ip, r3
 80006a0:	0065      	lsls	r5, r4, #1
 80006a2:	0a7b      	lsrs	r3, r7, #9
 80006a4:	0f57      	lsrs	r7, r2, #29
 80006a6:	431f      	orrs	r7, r3
 80006a8:	0d6d      	lsrs	r5, r5, #21
 80006aa:	0fe4      	lsrs	r4, r4, #31
 80006ac:	0d76      	lsrs	r6, r6, #21
 80006ae:	46a1      	mov	r9, r4
 80006b0:	00c0      	lsls	r0, r0, #3
 80006b2:	46b8      	mov	r8, r7
 80006b4:	00d2      	lsls	r2, r2, #3
 80006b6:	1bab      	subs	r3, r5, r6
 80006b8:	4564      	cmp	r4, ip
 80006ba:	d07b      	beq.n	80007b4 <__aeabi_dadd+0x130>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	dd5f      	ble.n	8000780 <__aeabi_dadd+0xfc>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d000      	beq.n	80006c6 <__aeabi_dadd+0x42>
 80006c4:	e0a4      	b.n	8000810 <__aeabi_dadd+0x18c>
 80006c6:	003e      	movs	r6, r7
 80006c8:	4316      	orrs	r6, r2
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x4a>
 80006cc:	e112      	b.n	80008f4 <__aeabi_dadd+0x270>
 80006ce:	1e5e      	subs	r6, r3, #1
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_dadd+0x52>
 80006d4:	e19e      	b.n	8000a14 <__aeabi_dadd+0x390>
 80006d6:	1a87      	subs	r7, r0, r2
 80006d8:	4643      	mov	r3, r8
 80006da:	42b8      	cmp	r0, r7
 80006dc:	4180      	sbcs	r0, r0
 80006de:	2501      	movs	r5, #1
 80006e0:	1ac9      	subs	r1, r1, r3
 80006e2:	4240      	negs	r0, r0
 80006e4:	1a09      	subs	r1, r1, r0
 80006e6:	020b      	lsls	r3, r1, #8
 80006e8:	d400      	bmi.n	80006ec <__aeabi_dadd+0x68>
 80006ea:	e131      	b.n	8000950 <__aeabi_dadd+0x2cc>
 80006ec:	0249      	lsls	r1, r1, #9
 80006ee:	0a4e      	lsrs	r6, r1, #9
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x72>
 80006f4:	e16e      	b.n	80009d4 <__aeabi_dadd+0x350>
 80006f6:	0030      	movs	r0, r6
 80006f8:	f001 fd46 	bl	8002188 <__clzsi2>
 80006fc:	0003      	movs	r3, r0
 80006fe:	3b08      	subs	r3, #8
 8000700:	2b1f      	cmp	r3, #31
 8000702:	dd00      	ble.n	8000706 <__aeabi_dadd+0x82>
 8000704:	e161      	b.n	80009ca <__aeabi_dadd+0x346>
 8000706:	2220      	movs	r2, #32
 8000708:	0039      	movs	r1, r7
 800070a:	1ad2      	subs	r2, r2, r3
 800070c:	409e      	lsls	r6, r3
 800070e:	40d1      	lsrs	r1, r2
 8000710:	409f      	lsls	r7, r3
 8000712:	430e      	orrs	r6, r1
 8000714:	429d      	cmp	r5, r3
 8000716:	dd00      	ble.n	800071a <__aeabi_dadd+0x96>
 8000718:	e151      	b.n	80009be <__aeabi_dadd+0x33a>
 800071a:	1b5d      	subs	r5, r3, r5
 800071c:	1c6b      	adds	r3, r5, #1
 800071e:	2b1f      	cmp	r3, #31
 8000720:	dd00      	ble.n	8000724 <__aeabi_dadd+0xa0>
 8000722:	e17c      	b.n	8000a1e <__aeabi_dadd+0x39a>
 8000724:	2120      	movs	r1, #32
 8000726:	1ac9      	subs	r1, r1, r3
 8000728:	003d      	movs	r5, r7
 800072a:	0030      	movs	r0, r6
 800072c:	408f      	lsls	r7, r1
 800072e:	4088      	lsls	r0, r1
 8000730:	40dd      	lsrs	r5, r3
 8000732:	1e79      	subs	r1, r7, #1
 8000734:	418f      	sbcs	r7, r1
 8000736:	0031      	movs	r1, r6
 8000738:	2207      	movs	r2, #7
 800073a:	4328      	orrs	r0, r5
 800073c:	40d9      	lsrs	r1, r3
 800073e:	2500      	movs	r5, #0
 8000740:	4307      	orrs	r7, r0
 8000742:	403a      	ands	r2, r7
 8000744:	2a00      	cmp	r2, #0
 8000746:	d009      	beq.n	800075c <__aeabi_dadd+0xd8>
 8000748:	230f      	movs	r3, #15
 800074a:	403b      	ands	r3, r7
 800074c:	2b04      	cmp	r3, #4
 800074e:	d005      	beq.n	800075c <__aeabi_dadd+0xd8>
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	42bb      	cmp	r3, r7
 8000754:	41bf      	sbcs	r7, r7
 8000756:	427f      	negs	r7, r7
 8000758:	19c9      	adds	r1, r1, r7
 800075a:	001f      	movs	r7, r3
 800075c:	020b      	lsls	r3, r1, #8
 800075e:	d400      	bmi.n	8000762 <__aeabi_dadd+0xde>
 8000760:	e226      	b.n	8000bb0 <__aeabi_dadd+0x52c>
 8000762:	1c6a      	adds	r2, r5, #1
 8000764:	4bc6      	ldr	r3, [pc, #792]	; (8000a80 <__aeabi_dadd+0x3fc>)
 8000766:	0555      	lsls	r5, r2, #21
 8000768:	0d6d      	lsrs	r5, r5, #21
 800076a:	429a      	cmp	r2, r3
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0xec>
 800076e:	e106      	b.n	800097e <__aeabi_dadd+0x2fa>
 8000770:	4ac4      	ldr	r2, [pc, #784]	; (8000a84 <__aeabi_dadd+0x400>)
 8000772:	08ff      	lsrs	r7, r7, #3
 8000774:	400a      	ands	r2, r1
 8000776:	0753      	lsls	r3, r2, #29
 8000778:	0252      	lsls	r2, r2, #9
 800077a:	433b      	orrs	r3, r7
 800077c:	0b12      	lsrs	r2, r2, #12
 800077e:	e08e      	b.n	800089e <__aeabi_dadd+0x21a>
 8000780:	2b00      	cmp	r3, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_dadd+0x102>
 8000784:	e0b8      	b.n	80008f8 <__aeabi_dadd+0x274>
 8000786:	1c6b      	adds	r3, r5, #1
 8000788:	055b      	lsls	r3, r3, #21
 800078a:	0d5b      	lsrs	r3, r3, #21
 800078c:	2b01      	cmp	r3, #1
 800078e:	dc00      	bgt.n	8000792 <__aeabi_dadd+0x10e>
 8000790:	e130      	b.n	80009f4 <__aeabi_dadd+0x370>
 8000792:	1a87      	subs	r7, r0, r2
 8000794:	4643      	mov	r3, r8
 8000796:	42b8      	cmp	r0, r7
 8000798:	41b6      	sbcs	r6, r6
 800079a:	1acb      	subs	r3, r1, r3
 800079c:	4276      	negs	r6, r6
 800079e:	1b9e      	subs	r6, r3, r6
 80007a0:	0233      	lsls	r3, r6, #8
 80007a2:	d500      	bpl.n	80007a6 <__aeabi_dadd+0x122>
 80007a4:	e14c      	b.n	8000a40 <__aeabi_dadd+0x3bc>
 80007a6:	003b      	movs	r3, r7
 80007a8:	4333      	orrs	r3, r6
 80007aa:	d1a1      	bne.n	80006f0 <__aeabi_dadd+0x6c>
 80007ac:	2200      	movs	r2, #0
 80007ae:	2400      	movs	r4, #0
 80007b0:	2500      	movs	r5, #0
 80007b2:	e070      	b.n	8000896 <__aeabi_dadd+0x212>
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	dc00      	bgt.n	80007ba <__aeabi_dadd+0x136>
 80007b8:	e0e5      	b.n	8000986 <__aeabi_dadd+0x302>
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_dadd+0x13c>
 80007be:	e083      	b.n	80008c8 <__aeabi_dadd+0x244>
 80007c0:	4eaf      	ldr	r6, [pc, #700]	; (8000a80 <__aeabi_dadd+0x3fc>)
 80007c2:	42b5      	cmp	r5, r6
 80007c4:	d060      	beq.n	8000888 <__aeabi_dadd+0x204>
 80007c6:	2680      	movs	r6, #128	; 0x80
 80007c8:	0436      	lsls	r6, r6, #16
 80007ca:	4337      	orrs	r7, r6
 80007cc:	46b8      	mov	r8, r7
 80007ce:	2b38      	cmp	r3, #56	; 0x38
 80007d0:	dc00      	bgt.n	80007d4 <__aeabi_dadd+0x150>
 80007d2:	e13e      	b.n	8000a52 <__aeabi_dadd+0x3ce>
 80007d4:	4643      	mov	r3, r8
 80007d6:	4313      	orrs	r3, r2
 80007d8:	001f      	movs	r7, r3
 80007da:	1e7a      	subs	r2, r7, #1
 80007dc:	4197      	sbcs	r7, r2
 80007de:	183f      	adds	r7, r7, r0
 80007e0:	4287      	cmp	r7, r0
 80007e2:	4180      	sbcs	r0, r0
 80007e4:	4240      	negs	r0, r0
 80007e6:	1809      	adds	r1, r1, r0
 80007e8:	020b      	lsls	r3, r1, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x16a>
 80007ec:	e0b0      	b.n	8000950 <__aeabi_dadd+0x2cc>
 80007ee:	4ba4      	ldr	r3, [pc, #656]	; (8000a80 <__aeabi_dadd+0x3fc>)
 80007f0:	3501      	adds	r5, #1
 80007f2:	429d      	cmp	r5, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x174>
 80007f6:	e0c3      	b.n	8000980 <__aeabi_dadd+0x2fc>
 80007f8:	4aa2      	ldr	r2, [pc, #648]	; (8000a84 <__aeabi_dadd+0x400>)
 80007fa:	087b      	lsrs	r3, r7, #1
 80007fc:	400a      	ands	r2, r1
 80007fe:	2101      	movs	r1, #1
 8000800:	400f      	ands	r7, r1
 8000802:	431f      	orrs	r7, r3
 8000804:	0851      	lsrs	r1, r2, #1
 8000806:	07d3      	lsls	r3, r2, #31
 8000808:	2207      	movs	r2, #7
 800080a:	431f      	orrs	r7, r3
 800080c:	403a      	ands	r2, r7
 800080e:	e799      	b.n	8000744 <__aeabi_dadd+0xc0>
 8000810:	4e9b      	ldr	r6, [pc, #620]	; (8000a80 <__aeabi_dadd+0x3fc>)
 8000812:	42b5      	cmp	r5, r6
 8000814:	d038      	beq.n	8000888 <__aeabi_dadd+0x204>
 8000816:	2680      	movs	r6, #128	; 0x80
 8000818:	0436      	lsls	r6, r6, #16
 800081a:	4337      	orrs	r7, r6
 800081c:	46b8      	mov	r8, r7
 800081e:	2b38      	cmp	r3, #56	; 0x38
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x1a0>
 8000822:	e0dc      	b.n	80009de <__aeabi_dadd+0x35a>
 8000824:	2b1f      	cmp	r3, #31
 8000826:	dc00      	bgt.n	800082a <__aeabi_dadd+0x1a6>
 8000828:	e130      	b.n	8000a8c <__aeabi_dadd+0x408>
 800082a:	001e      	movs	r6, r3
 800082c:	4647      	mov	r7, r8
 800082e:	3e20      	subs	r6, #32
 8000830:	40f7      	lsrs	r7, r6
 8000832:	46bc      	mov	ip, r7
 8000834:	2b20      	cmp	r3, #32
 8000836:	d004      	beq.n	8000842 <__aeabi_dadd+0x1be>
 8000838:	2640      	movs	r6, #64	; 0x40
 800083a:	1af3      	subs	r3, r6, r3
 800083c:	4646      	mov	r6, r8
 800083e:	409e      	lsls	r6, r3
 8000840:	4332      	orrs	r2, r6
 8000842:	0017      	movs	r7, r2
 8000844:	4663      	mov	r3, ip
 8000846:	1e7a      	subs	r2, r7, #1
 8000848:	4197      	sbcs	r7, r2
 800084a:	431f      	orrs	r7, r3
 800084c:	e0cc      	b.n	80009e8 <__aeabi_dadd+0x364>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x1d0>
 8000852:	e204      	b.n	8000c5e <__aeabi_dadd+0x5da>
 8000854:	4643      	mov	r3, r8
 8000856:	4313      	orrs	r3, r2
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1d8>
 800085a:	e159      	b.n	8000b10 <__aeabi_dadd+0x48c>
 800085c:	074b      	lsls	r3, r1, #29
 800085e:	08c0      	lsrs	r0, r0, #3
 8000860:	4318      	orrs	r0, r3
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	08c9      	lsrs	r1, r1, #3
 8000866:	031b      	lsls	r3, r3, #12
 8000868:	4219      	tst	r1, r3
 800086a:	d008      	beq.n	800087e <__aeabi_dadd+0x1fa>
 800086c:	4645      	mov	r5, r8
 800086e:	08ed      	lsrs	r5, r5, #3
 8000870:	421d      	tst	r5, r3
 8000872:	d104      	bne.n	800087e <__aeabi_dadd+0x1fa>
 8000874:	4643      	mov	r3, r8
 8000876:	08d0      	lsrs	r0, r2, #3
 8000878:	0759      	lsls	r1, r3, #29
 800087a:	4308      	orrs	r0, r1
 800087c:	0029      	movs	r1, r5
 800087e:	0f42      	lsrs	r2, r0, #29
 8000880:	00c9      	lsls	r1, r1, #3
 8000882:	4d7f      	ldr	r5, [pc, #508]	; (8000a80 <__aeabi_dadd+0x3fc>)
 8000884:	4311      	orrs	r1, r2
 8000886:	00c0      	lsls	r0, r0, #3
 8000888:	074b      	lsls	r3, r1, #29
 800088a:	08ca      	lsrs	r2, r1, #3
 800088c:	497c      	ldr	r1, [pc, #496]	; (8000a80 <__aeabi_dadd+0x3fc>)
 800088e:	08c0      	lsrs	r0, r0, #3
 8000890:	4303      	orrs	r3, r0
 8000892:	428d      	cmp	r5, r1
 8000894:	d068      	beq.n	8000968 <__aeabi_dadd+0x2e4>
 8000896:	0312      	lsls	r2, r2, #12
 8000898:	056d      	lsls	r5, r5, #21
 800089a:	0b12      	lsrs	r2, r2, #12
 800089c:	0d6d      	lsrs	r5, r5, #21
 800089e:	2100      	movs	r1, #0
 80008a0:	0312      	lsls	r2, r2, #12
 80008a2:	0018      	movs	r0, r3
 80008a4:	0b13      	lsrs	r3, r2, #12
 80008a6:	0d0a      	lsrs	r2, r1, #20
 80008a8:	0512      	lsls	r2, r2, #20
 80008aa:	431a      	orrs	r2, r3
 80008ac:	4b76      	ldr	r3, [pc, #472]	; (8000a88 <__aeabi_dadd+0x404>)
 80008ae:	052d      	lsls	r5, r5, #20
 80008b0:	4013      	ands	r3, r2
 80008b2:	432b      	orrs	r3, r5
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	07e4      	lsls	r4, r4, #31
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	4323      	orrs	r3, r4
 80008bc:	0019      	movs	r1, r3
 80008be:	bc1c      	pop	{r2, r3, r4}
 80008c0:	4690      	mov	r8, r2
 80008c2:	4699      	mov	r9, r3
 80008c4:	46a2      	mov	sl, r4
 80008c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c8:	003e      	movs	r6, r7
 80008ca:	4316      	orrs	r6, r2
 80008cc:	d012      	beq.n	80008f4 <__aeabi_dadd+0x270>
 80008ce:	1e5e      	subs	r6, r3, #1
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x252>
 80008d4:	e100      	b.n	8000ad8 <__aeabi_dadd+0x454>
 80008d6:	1887      	adds	r7, r0, r2
 80008d8:	4287      	cmp	r7, r0
 80008da:	4180      	sbcs	r0, r0
 80008dc:	4441      	add	r1, r8
 80008de:	4240      	negs	r0, r0
 80008e0:	1809      	adds	r1, r1, r0
 80008e2:	2501      	movs	r5, #1
 80008e4:	020b      	lsls	r3, r1, #8
 80008e6:	d533      	bpl.n	8000950 <__aeabi_dadd+0x2cc>
 80008e8:	2502      	movs	r5, #2
 80008ea:	e785      	b.n	80007f8 <__aeabi_dadd+0x174>
 80008ec:	4664      	mov	r4, ip
 80008ee:	0033      	movs	r3, r6
 80008f0:	4641      	mov	r1, r8
 80008f2:	0010      	movs	r0, r2
 80008f4:	001d      	movs	r5, r3
 80008f6:	e7c7      	b.n	8000888 <__aeabi_dadd+0x204>
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d000      	beq.n	80008fe <__aeabi_dadd+0x27a>
 80008fc:	e0da      	b.n	8000ab4 <__aeabi_dadd+0x430>
 80008fe:	000c      	movs	r4, r1
 8000900:	4304      	orrs	r4, r0
 8000902:	d0f3      	beq.n	80008ec <__aeabi_dadd+0x268>
 8000904:	1c5c      	adds	r4, r3, #1
 8000906:	d100      	bne.n	800090a <__aeabi_dadd+0x286>
 8000908:	e19f      	b.n	8000c4a <__aeabi_dadd+0x5c6>
 800090a:	4c5d      	ldr	r4, [pc, #372]	; (8000a80 <__aeabi_dadd+0x3fc>)
 800090c:	42a6      	cmp	r6, r4
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x28e>
 8000910:	e12f      	b.n	8000b72 <__aeabi_dadd+0x4ee>
 8000912:	43db      	mvns	r3, r3
 8000914:	2b38      	cmp	r3, #56	; 0x38
 8000916:	dd00      	ble.n	800091a <__aeabi_dadd+0x296>
 8000918:	e166      	b.n	8000be8 <__aeabi_dadd+0x564>
 800091a:	2b1f      	cmp	r3, #31
 800091c:	dd00      	ble.n	8000920 <__aeabi_dadd+0x29c>
 800091e:	e183      	b.n	8000c28 <__aeabi_dadd+0x5a4>
 8000920:	2420      	movs	r4, #32
 8000922:	0005      	movs	r5, r0
 8000924:	1ae4      	subs	r4, r4, r3
 8000926:	000f      	movs	r7, r1
 8000928:	40dd      	lsrs	r5, r3
 800092a:	40d9      	lsrs	r1, r3
 800092c:	40a0      	lsls	r0, r4
 800092e:	4643      	mov	r3, r8
 8000930:	40a7      	lsls	r7, r4
 8000932:	1a5b      	subs	r3, r3, r1
 8000934:	1e44      	subs	r4, r0, #1
 8000936:	41a0      	sbcs	r0, r4
 8000938:	4698      	mov	r8, r3
 800093a:	432f      	orrs	r7, r5
 800093c:	4338      	orrs	r0, r7
 800093e:	1a17      	subs	r7, r2, r0
 8000940:	42ba      	cmp	r2, r7
 8000942:	4192      	sbcs	r2, r2
 8000944:	4643      	mov	r3, r8
 8000946:	4252      	negs	r2, r2
 8000948:	1a99      	subs	r1, r3, r2
 800094a:	4664      	mov	r4, ip
 800094c:	0035      	movs	r5, r6
 800094e:	e6ca      	b.n	80006e6 <__aeabi_dadd+0x62>
 8000950:	2207      	movs	r2, #7
 8000952:	403a      	ands	r2, r7
 8000954:	2a00      	cmp	r2, #0
 8000956:	d000      	beq.n	800095a <__aeabi_dadd+0x2d6>
 8000958:	e6f6      	b.n	8000748 <__aeabi_dadd+0xc4>
 800095a:	074b      	lsls	r3, r1, #29
 800095c:	08ca      	lsrs	r2, r1, #3
 800095e:	4948      	ldr	r1, [pc, #288]	; (8000a80 <__aeabi_dadd+0x3fc>)
 8000960:	08ff      	lsrs	r7, r7, #3
 8000962:	433b      	orrs	r3, r7
 8000964:	428d      	cmp	r5, r1
 8000966:	d196      	bne.n	8000896 <__aeabi_dadd+0x212>
 8000968:	0019      	movs	r1, r3
 800096a:	4311      	orrs	r1, r2
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x2ec>
 800096e:	e19e      	b.n	8000cae <__aeabi_dadd+0x62a>
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	0309      	lsls	r1, r1, #12
 8000974:	430a      	orrs	r2, r1
 8000976:	0312      	lsls	r2, r2, #12
 8000978:	0b12      	lsrs	r2, r2, #12
 800097a:	4d41      	ldr	r5, [pc, #260]	; (8000a80 <__aeabi_dadd+0x3fc>)
 800097c:	e78f      	b.n	800089e <__aeabi_dadd+0x21a>
 800097e:	0015      	movs	r5, r2
 8000980:	2200      	movs	r2, #0
 8000982:	2300      	movs	r3, #0
 8000984:	e78b      	b.n	800089e <__aeabi_dadd+0x21a>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d000      	beq.n	800098c <__aeabi_dadd+0x308>
 800098a:	e0c7      	b.n	8000b1c <__aeabi_dadd+0x498>
 800098c:	1c6b      	adds	r3, r5, #1
 800098e:	055f      	lsls	r7, r3, #21
 8000990:	0d7f      	lsrs	r7, r7, #21
 8000992:	2f01      	cmp	r7, #1
 8000994:	dc00      	bgt.n	8000998 <__aeabi_dadd+0x314>
 8000996:	e0f1      	b.n	8000b7c <__aeabi_dadd+0x4f8>
 8000998:	4d39      	ldr	r5, [pc, #228]	; (8000a80 <__aeabi_dadd+0x3fc>)
 800099a:	42ab      	cmp	r3, r5
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x31c>
 800099e:	e0b9      	b.n	8000b14 <__aeabi_dadd+0x490>
 80009a0:	1885      	adds	r5, r0, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	4285      	cmp	r5, r0
 80009a6:	4189      	sbcs	r1, r1
 80009a8:	4442      	add	r2, r8
 80009aa:	4249      	negs	r1, r1
 80009ac:	1851      	adds	r1, r2, r1
 80009ae:	2207      	movs	r2, #7
 80009b0:	07cf      	lsls	r7, r1, #31
 80009b2:	086d      	lsrs	r5, r5, #1
 80009b4:	432f      	orrs	r7, r5
 80009b6:	0849      	lsrs	r1, r1, #1
 80009b8:	403a      	ands	r2, r7
 80009ba:	001d      	movs	r5, r3
 80009bc:	e6c2      	b.n	8000744 <__aeabi_dadd+0xc0>
 80009be:	2207      	movs	r2, #7
 80009c0:	4930      	ldr	r1, [pc, #192]	; (8000a84 <__aeabi_dadd+0x400>)
 80009c2:	1aed      	subs	r5, r5, r3
 80009c4:	4031      	ands	r1, r6
 80009c6:	403a      	ands	r2, r7
 80009c8:	e6bc      	b.n	8000744 <__aeabi_dadd+0xc0>
 80009ca:	003e      	movs	r6, r7
 80009cc:	3828      	subs	r0, #40	; 0x28
 80009ce:	4086      	lsls	r6, r0
 80009d0:	2700      	movs	r7, #0
 80009d2:	e69f      	b.n	8000714 <__aeabi_dadd+0x90>
 80009d4:	0038      	movs	r0, r7
 80009d6:	f001 fbd7 	bl	8002188 <__clzsi2>
 80009da:	3020      	adds	r0, #32
 80009dc:	e68e      	b.n	80006fc <__aeabi_dadd+0x78>
 80009de:	4643      	mov	r3, r8
 80009e0:	4313      	orrs	r3, r2
 80009e2:	001f      	movs	r7, r3
 80009e4:	1e7a      	subs	r2, r7, #1
 80009e6:	4197      	sbcs	r7, r2
 80009e8:	1bc7      	subs	r7, r0, r7
 80009ea:	42b8      	cmp	r0, r7
 80009ec:	4180      	sbcs	r0, r0
 80009ee:	4240      	negs	r0, r0
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	e678      	b.n	80006e6 <__aeabi_dadd+0x62>
 80009f4:	000e      	movs	r6, r1
 80009f6:	003b      	movs	r3, r7
 80009f8:	4306      	orrs	r6, r0
 80009fa:	4313      	orrs	r3, r2
 80009fc:	2d00      	cmp	r5, #0
 80009fe:	d161      	bne.n	8000ac4 <__aeabi_dadd+0x440>
 8000a00:	2e00      	cmp	r6, #0
 8000a02:	d000      	beq.n	8000a06 <__aeabi_dadd+0x382>
 8000a04:	e0f4      	b.n	8000bf0 <__aeabi_dadd+0x56c>
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dadd+0x388>
 8000a0a:	e11b      	b.n	8000c44 <__aeabi_dadd+0x5c0>
 8000a0c:	4664      	mov	r4, ip
 8000a0e:	0039      	movs	r1, r7
 8000a10:	0010      	movs	r0, r2
 8000a12:	e739      	b.n	8000888 <__aeabi_dadd+0x204>
 8000a14:	4f1a      	ldr	r7, [pc, #104]	; (8000a80 <__aeabi_dadd+0x3fc>)
 8000a16:	42bb      	cmp	r3, r7
 8000a18:	d07a      	beq.n	8000b10 <__aeabi_dadd+0x48c>
 8000a1a:	0033      	movs	r3, r6
 8000a1c:	e6ff      	b.n	800081e <__aeabi_dadd+0x19a>
 8000a1e:	0030      	movs	r0, r6
 8000a20:	3d1f      	subs	r5, #31
 8000a22:	40e8      	lsrs	r0, r5
 8000a24:	2b20      	cmp	r3, #32
 8000a26:	d003      	beq.n	8000a30 <__aeabi_dadd+0x3ac>
 8000a28:	2140      	movs	r1, #64	; 0x40
 8000a2a:	1acb      	subs	r3, r1, r3
 8000a2c:	409e      	lsls	r6, r3
 8000a2e:	4337      	orrs	r7, r6
 8000a30:	1e7b      	subs	r3, r7, #1
 8000a32:	419f      	sbcs	r7, r3
 8000a34:	2207      	movs	r2, #7
 8000a36:	4307      	orrs	r7, r0
 8000a38:	403a      	ands	r2, r7
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2500      	movs	r5, #0
 8000a3e:	e789      	b.n	8000954 <__aeabi_dadd+0x2d0>
 8000a40:	1a17      	subs	r7, r2, r0
 8000a42:	4643      	mov	r3, r8
 8000a44:	42ba      	cmp	r2, r7
 8000a46:	41b6      	sbcs	r6, r6
 8000a48:	1a59      	subs	r1, r3, r1
 8000a4a:	4276      	negs	r6, r6
 8000a4c:	1b8e      	subs	r6, r1, r6
 8000a4e:	4664      	mov	r4, ip
 8000a50:	e64e      	b.n	80006f0 <__aeabi_dadd+0x6c>
 8000a52:	2b1f      	cmp	r3, #31
 8000a54:	dd00      	ble.n	8000a58 <__aeabi_dadd+0x3d4>
 8000a56:	e0ad      	b.n	8000bb4 <__aeabi_dadd+0x530>
 8000a58:	2620      	movs	r6, #32
 8000a5a:	4647      	mov	r7, r8
 8000a5c:	1af6      	subs	r6, r6, r3
 8000a5e:	40b7      	lsls	r7, r6
 8000a60:	46b9      	mov	r9, r7
 8000a62:	0017      	movs	r7, r2
 8000a64:	46b2      	mov	sl, r6
 8000a66:	40df      	lsrs	r7, r3
 8000a68:	464e      	mov	r6, r9
 8000a6a:	433e      	orrs	r6, r7
 8000a6c:	0037      	movs	r7, r6
 8000a6e:	4656      	mov	r6, sl
 8000a70:	40b2      	lsls	r2, r6
 8000a72:	1e56      	subs	r6, r2, #1
 8000a74:	41b2      	sbcs	r2, r6
 8000a76:	4317      	orrs	r7, r2
 8000a78:	4642      	mov	r2, r8
 8000a7a:	40da      	lsrs	r2, r3
 8000a7c:	1889      	adds	r1, r1, r2
 8000a7e:	e6ae      	b.n	80007de <__aeabi_dadd+0x15a>
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	ff7fffff 	.word	0xff7fffff
 8000a88:	800fffff 	.word	0x800fffff
 8000a8c:	2620      	movs	r6, #32
 8000a8e:	4647      	mov	r7, r8
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	40b7      	lsls	r7, r6
 8000a94:	46b9      	mov	r9, r7
 8000a96:	0017      	movs	r7, r2
 8000a98:	46b2      	mov	sl, r6
 8000a9a:	40df      	lsrs	r7, r3
 8000a9c:	464e      	mov	r6, r9
 8000a9e:	433e      	orrs	r6, r7
 8000aa0:	0037      	movs	r7, r6
 8000aa2:	4656      	mov	r6, sl
 8000aa4:	40b2      	lsls	r2, r6
 8000aa6:	1e56      	subs	r6, r2, #1
 8000aa8:	41b2      	sbcs	r2, r6
 8000aaa:	4317      	orrs	r7, r2
 8000aac:	4642      	mov	r2, r8
 8000aae:	40da      	lsrs	r2, r3
 8000ab0:	1a89      	subs	r1, r1, r2
 8000ab2:	e799      	b.n	80009e8 <__aeabi_dadd+0x364>
 8000ab4:	4c7f      	ldr	r4, [pc, #508]	; (8000cb4 <__aeabi_dadd+0x630>)
 8000ab6:	42a6      	cmp	r6, r4
 8000ab8:	d05b      	beq.n	8000b72 <__aeabi_dadd+0x4ee>
 8000aba:	2480      	movs	r4, #128	; 0x80
 8000abc:	0424      	lsls	r4, r4, #16
 8000abe:	425b      	negs	r3, r3
 8000ac0:	4321      	orrs	r1, r4
 8000ac2:	e727      	b.n	8000914 <__aeabi_dadd+0x290>
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d10c      	bne.n	8000ae2 <__aeabi_dadd+0x45e>
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0x44a>
 8000acc:	e0cb      	b.n	8000c66 <__aeabi_dadd+0x5e2>
 8000ace:	4664      	mov	r4, ip
 8000ad0:	0039      	movs	r1, r7
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	4d77      	ldr	r5, [pc, #476]	; (8000cb4 <__aeabi_dadd+0x630>)
 8000ad6:	e6d7      	b.n	8000888 <__aeabi_dadd+0x204>
 8000ad8:	4f76      	ldr	r7, [pc, #472]	; (8000cb4 <__aeabi_dadd+0x630>)
 8000ada:	42bb      	cmp	r3, r7
 8000adc:	d018      	beq.n	8000b10 <__aeabi_dadd+0x48c>
 8000ade:	0033      	movs	r3, r6
 8000ae0:	e675      	b.n	80007ce <__aeabi_dadd+0x14a>
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d014      	beq.n	8000b10 <__aeabi_dadd+0x48c>
 8000ae6:	074b      	lsls	r3, r1, #29
 8000ae8:	08c0      	lsrs	r0, r0, #3
 8000aea:	4318      	orrs	r0, r3
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	08c9      	lsrs	r1, r1, #3
 8000af0:	031b      	lsls	r3, r3, #12
 8000af2:	4219      	tst	r1, r3
 8000af4:	d007      	beq.n	8000b06 <__aeabi_dadd+0x482>
 8000af6:	08fc      	lsrs	r4, r7, #3
 8000af8:	421c      	tst	r4, r3
 8000afa:	d104      	bne.n	8000b06 <__aeabi_dadd+0x482>
 8000afc:	0779      	lsls	r1, r7, #29
 8000afe:	08d0      	lsrs	r0, r2, #3
 8000b00:	4308      	orrs	r0, r1
 8000b02:	46e1      	mov	r9, ip
 8000b04:	0021      	movs	r1, r4
 8000b06:	464c      	mov	r4, r9
 8000b08:	0f42      	lsrs	r2, r0, #29
 8000b0a:	00c9      	lsls	r1, r1, #3
 8000b0c:	4311      	orrs	r1, r2
 8000b0e:	00c0      	lsls	r0, r0, #3
 8000b10:	4d68      	ldr	r5, [pc, #416]	; (8000cb4 <__aeabi_dadd+0x630>)
 8000b12:	e6b9      	b.n	8000888 <__aeabi_dadd+0x204>
 8000b14:	001d      	movs	r5, r3
 8000b16:	2200      	movs	r2, #0
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e6c0      	b.n	800089e <__aeabi_dadd+0x21a>
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	d15b      	bne.n	8000bd8 <__aeabi_dadd+0x554>
 8000b20:	000d      	movs	r5, r1
 8000b22:	4305      	orrs	r5, r0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x4a4>
 8000b26:	e6e2      	b.n	80008ee <__aeabi_dadd+0x26a>
 8000b28:	1c5d      	adds	r5, r3, #1
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x4aa>
 8000b2c:	e0b0      	b.n	8000c90 <__aeabi_dadd+0x60c>
 8000b2e:	4d61      	ldr	r5, [pc, #388]	; (8000cb4 <__aeabi_dadd+0x630>)
 8000b30:	42ae      	cmp	r6, r5
 8000b32:	d01f      	beq.n	8000b74 <__aeabi_dadd+0x4f0>
 8000b34:	43db      	mvns	r3, r3
 8000b36:	2b38      	cmp	r3, #56	; 0x38
 8000b38:	dc71      	bgt.n	8000c1e <__aeabi_dadd+0x59a>
 8000b3a:	2b1f      	cmp	r3, #31
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_dadd+0x4bc>
 8000b3e:	e096      	b.n	8000c6e <__aeabi_dadd+0x5ea>
 8000b40:	2520      	movs	r5, #32
 8000b42:	000f      	movs	r7, r1
 8000b44:	1aed      	subs	r5, r5, r3
 8000b46:	40af      	lsls	r7, r5
 8000b48:	46b9      	mov	r9, r7
 8000b4a:	0007      	movs	r7, r0
 8000b4c:	46aa      	mov	sl, r5
 8000b4e:	40df      	lsrs	r7, r3
 8000b50:	464d      	mov	r5, r9
 8000b52:	433d      	orrs	r5, r7
 8000b54:	002f      	movs	r7, r5
 8000b56:	4655      	mov	r5, sl
 8000b58:	40a8      	lsls	r0, r5
 8000b5a:	40d9      	lsrs	r1, r3
 8000b5c:	1e45      	subs	r5, r0, #1
 8000b5e:	41a8      	sbcs	r0, r5
 8000b60:	4488      	add	r8, r1
 8000b62:	4307      	orrs	r7, r0
 8000b64:	18bf      	adds	r7, r7, r2
 8000b66:	4297      	cmp	r7, r2
 8000b68:	4192      	sbcs	r2, r2
 8000b6a:	4251      	negs	r1, r2
 8000b6c:	4441      	add	r1, r8
 8000b6e:	0035      	movs	r5, r6
 8000b70:	e63a      	b.n	80007e8 <__aeabi_dadd+0x164>
 8000b72:	4664      	mov	r4, ip
 8000b74:	0035      	movs	r5, r6
 8000b76:	4641      	mov	r1, r8
 8000b78:	0010      	movs	r0, r2
 8000b7a:	e685      	b.n	8000888 <__aeabi_dadd+0x204>
 8000b7c:	000b      	movs	r3, r1
 8000b7e:	4303      	orrs	r3, r0
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d000      	beq.n	8000b86 <__aeabi_dadd+0x502>
 8000b84:	e663      	b.n	800084e <__aeabi_dadd+0x1ca>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f5      	beq.n	8000b76 <__aeabi_dadd+0x4f2>
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x50e>
 8000b90:	e67a      	b.n	8000888 <__aeabi_dadd+0x204>
 8000b92:	1887      	adds	r7, r0, r2
 8000b94:	4287      	cmp	r7, r0
 8000b96:	4180      	sbcs	r0, r0
 8000b98:	2207      	movs	r2, #7
 8000b9a:	4441      	add	r1, r8
 8000b9c:	4240      	negs	r0, r0
 8000b9e:	1809      	adds	r1, r1, r0
 8000ba0:	403a      	ands	r2, r7
 8000ba2:	020b      	lsls	r3, r1, #8
 8000ba4:	d400      	bmi.n	8000ba8 <__aeabi_dadd+0x524>
 8000ba6:	e6d5      	b.n	8000954 <__aeabi_dadd+0x2d0>
 8000ba8:	4b43      	ldr	r3, [pc, #268]	; (8000cb8 <__aeabi_dadd+0x634>)
 8000baa:	3501      	adds	r5, #1
 8000bac:	4019      	ands	r1, r3
 8000bae:	e5c9      	b.n	8000744 <__aeabi_dadd+0xc0>
 8000bb0:	0038      	movs	r0, r7
 8000bb2:	e669      	b.n	8000888 <__aeabi_dadd+0x204>
 8000bb4:	001e      	movs	r6, r3
 8000bb6:	4647      	mov	r7, r8
 8000bb8:	3e20      	subs	r6, #32
 8000bba:	40f7      	lsrs	r7, r6
 8000bbc:	46bc      	mov	ip, r7
 8000bbe:	2b20      	cmp	r3, #32
 8000bc0:	d004      	beq.n	8000bcc <__aeabi_dadd+0x548>
 8000bc2:	2640      	movs	r6, #64	; 0x40
 8000bc4:	1af3      	subs	r3, r6, r3
 8000bc6:	4646      	mov	r6, r8
 8000bc8:	409e      	lsls	r6, r3
 8000bca:	4332      	orrs	r2, r6
 8000bcc:	0017      	movs	r7, r2
 8000bce:	4663      	mov	r3, ip
 8000bd0:	1e7a      	subs	r2, r7, #1
 8000bd2:	4197      	sbcs	r7, r2
 8000bd4:	431f      	orrs	r7, r3
 8000bd6:	e602      	b.n	80007de <__aeabi_dadd+0x15a>
 8000bd8:	4d36      	ldr	r5, [pc, #216]	; (8000cb4 <__aeabi_dadd+0x630>)
 8000bda:	42ae      	cmp	r6, r5
 8000bdc:	d0ca      	beq.n	8000b74 <__aeabi_dadd+0x4f0>
 8000bde:	2580      	movs	r5, #128	; 0x80
 8000be0:	042d      	lsls	r5, r5, #16
 8000be2:	425b      	negs	r3, r3
 8000be4:	4329      	orrs	r1, r5
 8000be6:	e7a6      	b.n	8000b36 <__aeabi_dadd+0x4b2>
 8000be8:	4308      	orrs	r0, r1
 8000bea:	1e41      	subs	r1, r0, #1
 8000bec:	4188      	sbcs	r0, r1
 8000bee:	e6a6      	b.n	800093e <__aeabi_dadd+0x2ba>
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dadd+0x572>
 8000bf4:	e648      	b.n	8000888 <__aeabi_dadd+0x204>
 8000bf6:	1a87      	subs	r7, r0, r2
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	42b8      	cmp	r0, r7
 8000bfc:	41b6      	sbcs	r6, r6
 8000bfe:	1acb      	subs	r3, r1, r3
 8000c00:	4276      	negs	r6, r6
 8000c02:	1b9e      	subs	r6, r3, r6
 8000c04:	0233      	lsls	r3, r6, #8
 8000c06:	d54b      	bpl.n	8000ca0 <__aeabi_dadd+0x61c>
 8000c08:	1a17      	subs	r7, r2, r0
 8000c0a:	4643      	mov	r3, r8
 8000c0c:	42ba      	cmp	r2, r7
 8000c0e:	4192      	sbcs	r2, r2
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	4252      	negs	r2, r2
 8000c14:	1a89      	subs	r1, r1, r2
 8000c16:	2207      	movs	r2, #7
 8000c18:	4664      	mov	r4, ip
 8000c1a:	403a      	ands	r2, r7
 8000c1c:	e592      	b.n	8000744 <__aeabi_dadd+0xc0>
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	000f      	movs	r7, r1
 8000c22:	1e79      	subs	r1, r7, #1
 8000c24:	418f      	sbcs	r7, r1
 8000c26:	e79d      	b.n	8000b64 <__aeabi_dadd+0x4e0>
 8000c28:	001c      	movs	r4, r3
 8000c2a:	000f      	movs	r7, r1
 8000c2c:	3c20      	subs	r4, #32
 8000c2e:	40e7      	lsrs	r7, r4
 8000c30:	2b20      	cmp	r3, #32
 8000c32:	d003      	beq.n	8000c3c <__aeabi_dadd+0x5b8>
 8000c34:	2440      	movs	r4, #64	; 0x40
 8000c36:	1ae3      	subs	r3, r4, r3
 8000c38:	4099      	lsls	r1, r3
 8000c3a:	4308      	orrs	r0, r1
 8000c3c:	1e41      	subs	r1, r0, #1
 8000c3e:	4188      	sbcs	r0, r1
 8000c40:	4338      	orrs	r0, r7
 8000c42:	e67c      	b.n	800093e <__aeabi_dadd+0x2ba>
 8000c44:	2200      	movs	r2, #0
 8000c46:	2400      	movs	r4, #0
 8000c48:	e625      	b.n	8000896 <__aeabi_dadd+0x212>
 8000c4a:	1a17      	subs	r7, r2, r0
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	42ba      	cmp	r2, r7
 8000c50:	4192      	sbcs	r2, r2
 8000c52:	1a59      	subs	r1, r3, r1
 8000c54:	4252      	negs	r2, r2
 8000c56:	1a89      	subs	r1, r1, r2
 8000c58:	4664      	mov	r4, ip
 8000c5a:	0035      	movs	r5, r6
 8000c5c:	e543      	b.n	80006e6 <__aeabi_dadd+0x62>
 8000c5e:	4641      	mov	r1, r8
 8000c60:	0010      	movs	r0, r2
 8000c62:	4d14      	ldr	r5, [pc, #80]	; (8000cb4 <__aeabi_dadd+0x630>)
 8000c64:	e610      	b.n	8000888 <__aeabi_dadd+0x204>
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	2400      	movs	r4, #0
 8000c6a:	0312      	lsls	r2, r2, #12
 8000c6c:	e680      	b.n	8000970 <__aeabi_dadd+0x2ec>
 8000c6e:	001d      	movs	r5, r3
 8000c70:	000f      	movs	r7, r1
 8000c72:	3d20      	subs	r5, #32
 8000c74:	40ef      	lsrs	r7, r5
 8000c76:	46bc      	mov	ip, r7
 8000c78:	2b20      	cmp	r3, #32
 8000c7a:	d003      	beq.n	8000c84 <__aeabi_dadd+0x600>
 8000c7c:	2540      	movs	r5, #64	; 0x40
 8000c7e:	1aeb      	subs	r3, r5, r3
 8000c80:	4099      	lsls	r1, r3
 8000c82:	4308      	orrs	r0, r1
 8000c84:	0007      	movs	r7, r0
 8000c86:	4663      	mov	r3, ip
 8000c88:	1e78      	subs	r0, r7, #1
 8000c8a:	4187      	sbcs	r7, r0
 8000c8c:	431f      	orrs	r7, r3
 8000c8e:	e769      	b.n	8000b64 <__aeabi_dadd+0x4e0>
 8000c90:	1887      	adds	r7, r0, r2
 8000c92:	4297      	cmp	r7, r2
 8000c94:	419b      	sbcs	r3, r3
 8000c96:	4441      	add	r1, r8
 8000c98:	425b      	negs	r3, r3
 8000c9a:	18c9      	adds	r1, r1, r3
 8000c9c:	0035      	movs	r5, r6
 8000c9e:	e5a3      	b.n	80007e8 <__aeabi_dadd+0x164>
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	4333      	orrs	r3, r6
 8000ca4:	d0ce      	beq.n	8000c44 <__aeabi_dadd+0x5c0>
 8000ca6:	2207      	movs	r2, #7
 8000ca8:	0031      	movs	r1, r6
 8000caa:	403a      	ands	r2, r7
 8000cac:	e652      	b.n	8000954 <__aeabi_dadd+0x2d0>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	e5f4      	b.n	800089e <__aeabi_dadd+0x21a>
 8000cb4:	000007ff 	.word	0x000007ff
 8000cb8:	ff7fffff 	.word	0xff7fffff

08000cbc <__aeabi_ddiv>:
 8000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cbe:	4657      	mov	r7, sl
 8000cc0:	46de      	mov	lr, fp
 8000cc2:	464e      	mov	r6, r9
 8000cc4:	4645      	mov	r5, r8
 8000cc6:	b5e0      	push	{r5, r6, r7, lr}
 8000cc8:	4683      	mov	fp, r0
 8000cca:	0007      	movs	r7, r0
 8000ccc:	030e      	lsls	r6, r1, #12
 8000cce:	0048      	lsls	r0, r1, #1
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	4692      	mov	sl, r2
 8000cd4:	001c      	movs	r4, r3
 8000cd6:	0b36      	lsrs	r6, r6, #12
 8000cd8:	0d40      	lsrs	r0, r0, #21
 8000cda:	0fcd      	lsrs	r5, r1, #31
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_ddiv+0x26>
 8000ce0:	e09d      	b.n	8000e1e <__aeabi_ddiv+0x162>
 8000ce2:	4b95      	ldr	r3, [pc, #596]	; (8000f38 <__aeabi_ddiv+0x27c>)
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	d039      	beq.n	8000d5c <__aeabi_ddiv+0xa0>
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	00f6      	lsls	r6, r6, #3
 8000cec:	041b      	lsls	r3, r3, #16
 8000cee:	431e      	orrs	r6, r3
 8000cf0:	4a92      	ldr	r2, [pc, #584]	; (8000f3c <__aeabi_ddiv+0x280>)
 8000cf2:	0f7b      	lsrs	r3, r7, #29
 8000cf4:	4333      	orrs	r3, r6
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	4463      	add	r3, ip
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2300      	movs	r3, #0
 8000d02:	2600      	movs	r6, #0
 8000d04:	00ff      	lsls	r7, r7, #3
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	0323      	lsls	r3, r4, #12
 8000d0a:	0b1b      	lsrs	r3, r3, #12
 8000d0c:	4698      	mov	r8, r3
 8000d0e:	0063      	lsls	r3, r4, #1
 8000d10:	0fe4      	lsrs	r4, r4, #31
 8000d12:	4652      	mov	r2, sl
 8000d14:	0d5b      	lsrs	r3, r3, #21
 8000d16:	9401      	str	r4, [sp, #4]
 8000d18:	d100      	bne.n	8000d1c <__aeabi_ddiv+0x60>
 8000d1a:	e0b3      	b.n	8000e84 <__aeabi_ddiv+0x1c8>
 8000d1c:	4986      	ldr	r1, [pc, #536]	; (8000f38 <__aeabi_ddiv+0x27c>)
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d100      	bne.n	8000d24 <__aeabi_ddiv+0x68>
 8000d22:	e09e      	b.n	8000e62 <__aeabi_ddiv+0x1a6>
 8000d24:	4642      	mov	r2, r8
 8000d26:	00d1      	lsls	r1, r2, #3
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0412      	lsls	r2, r2, #16
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	4651      	mov	r1, sl
 8000d30:	0f49      	lsrs	r1, r1, #29
 8000d32:	4311      	orrs	r1, r2
 8000d34:	468b      	mov	fp, r1
 8000d36:	4981      	ldr	r1, [pc, #516]	; (8000f3c <__aeabi_ddiv+0x280>)
 8000d38:	4652      	mov	r2, sl
 8000d3a:	468c      	mov	ip, r1
 8000d3c:	9900      	ldr	r1, [sp, #0]
 8000d3e:	4463      	add	r3, ip
 8000d40:	1acb      	subs	r3, r1, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	00d2      	lsls	r2, r2, #3
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	002b      	movs	r3, r5
 8000d4a:	4063      	eors	r3, r4
 8000d4c:	469a      	mov	sl, r3
 8000d4e:	2e0f      	cmp	r6, #15
 8000d50:	d900      	bls.n	8000d54 <__aeabi_ddiv+0x98>
 8000d52:	e105      	b.n	8000f60 <__aeabi_ddiv+0x2a4>
 8000d54:	4b7a      	ldr	r3, [pc, #488]	; (8000f40 <__aeabi_ddiv+0x284>)
 8000d56:	00b6      	lsls	r6, r6, #2
 8000d58:	599b      	ldr	r3, [r3, r6]
 8000d5a:	469f      	mov	pc, r3
 8000d5c:	465b      	mov	r3, fp
 8000d5e:	4333      	orrs	r3, r6
 8000d60:	4699      	mov	r9, r3
 8000d62:	d000      	beq.n	8000d66 <__aeabi_ddiv+0xaa>
 8000d64:	e0b8      	b.n	8000ed8 <__aeabi_ddiv+0x21c>
 8000d66:	2302      	movs	r3, #2
 8000d68:	2608      	movs	r6, #8
 8000d6a:	2700      	movs	r7, #0
 8000d6c:	9000      	str	r0, [sp, #0]
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	e7ca      	b.n	8000d08 <__aeabi_ddiv+0x4c>
 8000d72:	46cb      	mov	fp, r9
 8000d74:	003a      	movs	r2, r7
 8000d76:	9902      	ldr	r1, [sp, #8]
 8000d78:	9501      	str	r5, [sp, #4]
 8000d7a:	9b01      	ldr	r3, [sp, #4]
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	2902      	cmp	r1, #2
 8000d80:	d027      	beq.n	8000dd2 <__aeabi_ddiv+0x116>
 8000d82:	2903      	cmp	r1, #3
 8000d84:	d100      	bne.n	8000d88 <__aeabi_ddiv+0xcc>
 8000d86:	e280      	b.n	800128a <__aeabi_ddiv+0x5ce>
 8000d88:	2901      	cmp	r1, #1
 8000d8a:	d044      	beq.n	8000e16 <__aeabi_ddiv+0x15a>
 8000d8c:	496d      	ldr	r1, [pc, #436]	; (8000f44 <__aeabi_ddiv+0x288>)
 8000d8e:	9b00      	ldr	r3, [sp, #0]
 8000d90:	468c      	mov	ip, r1
 8000d92:	4463      	add	r3, ip
 8000d94:	001c      	movs	r4, r3
 8000d96:	2c00      	cmp	r4, #0
 8000d98:	dd38      	ble.n	8000e0c <__aeabi_ddiv+0x150>
 8000d9a:	0753      	lsls	r3, r2, #29
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_ddiv+0xe4>
 8000d9e:	e213      	b.n	80011c8 <__aeabi_ddiv+0x50c>
 8000da0:	08d2      	lsrs	r2, r2, #3
 8000da2:	465b      	mov	r3, fp
 8000da4:	01db      	lsls	r3, r3, #7
 8000da6:	d509      	bpl.n	8000dbc <__aeabi_ddiv+0x100>
 8000da8:	4659      	mov	r1, fp
 8000daa:	4b67      	ldr	r3, [pc, #412]	; (8000f48 <__aeabi_ddiv+0x28c>)
 8000dac:	4019      	ands	r1, r3
 8000dae:	468b      	mov	fp, r1
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	00c9      	lsls	r1, r1, #3
 8000db4:	468c      	mov	ip, r1
 8000db6:	9b00      	ldr	r3, [sp, #0]
 8000db8:	4463      	add	r3, ip
 8000dba:	001c      	movs	r4, r3
 8000dbc:	4b63      	ldr	r3, [pc, #396]	; (8000f4c <__aeabi_ddiv+0x290>)
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	dc07      	bgt.n	8000dd2 <__aeabi_ddiv+0x116>
 8000dc2:	465b      	mov	r3, fp
 8000dc4:	0564      	lsls	r4, r4, #21
 8000dc6:	075f      	lsls	r7, r3, #29
 8000dc8:	025b      	lsls	r3, r3, #9
 8000dca:	4317      	orrs	r7, r2
 8000dcc:	0b1b      	lsrs	r3, r3, #12
 8000dce:	0d62      	lsrs	r2, r4, #21
 8000dd0:	e002      	b.n	8000dd8 <__aeabi_ddiv+0x11c>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	4a58      	ldr	r2, [pc, #352]	; (8000f38 <__aeabi_ddiv+0x27c>)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	031b      	lsls	r3, r3, #12
 8000ddc:	0b1c      	lsrs	r4, r3, #12
 8000dde:	0d0b      	lsrs	r3, r1, #20
 8000de0:	051b      	lsls	r3, r3, #20
 8000de2:	4323      	orrs	r3, r4
 8000de4:	0514      	lsls	r4, r2, #20
 8000de6:	4a5a      	ldr	r2, [pc, #360]	; (8000f50 <__aeabi_ddiv+0x294>)
 8000de8:	0038      	movs	r0, r7
 8000dea:	4013      	ands	r3, r2
 8000dec:	431c      	orrs	r4, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	0064      	lsls	r4, r4, #1
 8000df2:	07db      	lsls	r3, r3, #31
 8000df4:	0864      	lsrs	r4, r4, #1
 8000df6:	431c      	orrs	r4, r3
 8000df8:	0021      	movs	r1, r4
 8000dfa:	b005      	add	sp, #20
 8000dfc:	bc3c      	pop	{r2, r3, r4, r5}
 8000dfe:	4690      	mov	r8, r2
 8000e00:	4699      	mov	r9, r3
 8000e02:	46a2      	mov	sl, r4
 8000e04:	46ab      	mov	fp, r5
 8000e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4252      	negs	r2, r2
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	1b1b      	subs	r3, r3, r4
 8000e10:	2b38      	cmp	r3, #56	; 0x38
 8000e12:	dc00      	bgt.n	8000e16 <__aeabi_ddiv+0x15a>
 8000e14:	e1ad      	b.n	8001172 <__aeabi_ddiv+0x4b6>
 8000e16:	2200      	movs	r2, #0
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2700      	movs	r7, #0
 8000e1c:	e7dc      	b.n	8000dd8 <__aeabi_ddiv+0x11c>
 8000e1e:	465b      	mov	r3, fp
 8000e20:	4333      	orrs	r3, r6
 8000e22:	4699      	mov	r9, r3
 8000e24:	d05e      	beq.n	8000ee4 <__aeabi_ddiv+0x228>
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x170>
 8000e2a:	e18a      	b.n	8001142 <__aeabi_ddiv+0x486>
 8000e2c:	0030      	movs	r0, r6
 8000e2e:	f001 f9ab 	bl	8002188 <__clzsi2>
 8000e32:	0003      	movs	r3, r0
 8000e34:	3b0b      	subs	r3, #11
 8000e36:	2b1c      	cmp	r3, #28
 8000e38:	dd00      	ble.n	8000e3c <__aeabi_ddiv+0x180>
 8000e3a:	e17b      	b.n	8001134 <__aeabi_ddiv+0x478>
 8000e3c:	221d      	movs	r2, #29
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	465a      	mov	r2, fp
 8000e42:	0001      	movs	r1, r0
 8000e44:	40da      	lsrs	r2, r3
 8000e46:	3908      	subs	r1, #8
 8000e48:	408e      	lsls	r6, r1
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	465f      	mov	r7, fp
 8000e4e:	4333      	orrs	r3, r6
 8000e50:	4699      	mov	r9, r3
 8000e52:	408f      	lsls	r7, r1
 8000e54:	4b3f      	ldr	r3, [pc, #252]	; (8000f54 <__aeabi_ddiv+0x298>)
 8000e56:	2600      	movs	r6, #0
 8000e58:	1a1b      	subs	r3, r3, r0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	e752      	b.n	8000d08 <__aeabi_ddiv+0x4c>
 8000e62:	4641      	mov	r1, r8
 8000e64:	4653      	mov	r3, sl
 8000e66:	430b      	orrs	r3, r1
 8000e68:	493b      	ldr	r1, [pc, #236]	; (8000f58 <__aeabi_ddiv+0x29c>)
 8000e6a:	469b      	mov	fp, r3
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	9b00      	ldr	r3, [sp, #0]
 8000e70:	4463      	add	r3, ip
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	465b      	mov	r3, fp
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d13b      	bne.n	8000ef2 <__aeabi_ddiv+0x236>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	2102      	movs	r1, #2
 8000e82:	e761      	b.n	8000d48 <__aeabi_ddiv+0x8c>
 8000e84:	4643      	mov	r3, r8
 8000e86:	4313      	orrs	r3, r2
 8000e88:	469b      	mov	fp, r3
 8000e8a:	d037      	beq.n	8000efc <__aeabi_ddiv+0x240>
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d100      	bne.n	8000e94 <__aeabi_ddiv+0x1d8>
 8000e92:	e162      	b.n	800115a <__aeabi_ddiv+0x49e>
 8000e94:	4640      	mov	r0, r8
 8000e96:	f001 f977 	bl	8002188 <__clzsi2>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	3b0b      	subs	r3, #11
 8000e9e:	2b1c      	cmp	r3, #28
 8000ea0:	dd00      	ble.n	8000ea4 <__aeabi_ddiv+0x1e8>
 8000ea2:	e153      	b.n	800114c <__aeabi_ddiv+0x490>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	4641      	mov	r1, r8
 8000ea8:	3a08      	subs	r2, #8
 8000eaa:	4091      	lsls	r1, r2
 8000eac:	4688      	mov	r8, r1
 8000eae:	211d      	movs	r1, #29
 8000eb0:	1acb      	subs	r3, r1, r3
 8000eb2:	4651      	mov	r1, sl
 8000eb4:	40d9      	lsrs	r1, r3
 8000eb6:	000b      	movs	r3, r1
 8000eb8:	4641      	mov	r1, r8
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	469b      	mov	fp, r3
 8000ebe:	4653      	mov	r3, sl
 8000ec0:	4093      	lsls	r3, r2
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	9b00      	ldr	r3, [sp, #0]
 8000ec6:	4925      	ldr	r1, [pc, #148]	; (8000f5c <__aeabi_ddiv+0x2a0>)
 8000ec8:	469c      	mov	ip, r3
 8000eca:	4460      	add	r0, ip
 8000ecc:	0003      	movs	r3, r0
 8000ece:	468c      	mov	ip, r1
 8000ed0:	4463      	add	r3, ip
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e737      	b.n	8000d48 <__aeabi_ddiv+0x8c>
 8000ed8:	2303      	movs	r3, #3
 8000eda:	46b1      	mov	r9, r6
 8000edc:	9000      	str	r0, [sp, #0]
 8000ede:	260c      	movs	r6, #12
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	e711      	b.n	8000d08 <__aeabi_ddiv+0x4c>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	2604      	movs	r6, #4
 8000eec:	2700      	movs	r7, #0
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	e70a      	b.n	8000d08 <__aeabi_ddiv+0x4c>
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	46c3      	mov	fp, r8
 8000ef6:	431e      	orrs	r6, r3
 8000ef8:	2103      	movs	r1, #3
 8000efa:	e725      	b.n	8000d48 <__aeabi_ddiv+0x8c>
 8000efc:	3301      	adds	r3, #1
 8000efe:	431e      	orrs	r6, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	2101      	movs	r1, #1
 8000f04:	e720      	b.n	8000d48 <__aeabi_ddiv+0x8c>
 8000f06:	2300      	movs	r3, #0
 8000f08:	469a      	mov	sl, r3
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	2700      	movs	r7, #0
 8000f0e:	031b      	lsls	r3, r3, #12
 8000f10:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <__aeabi_ddiv+0x27c>)
 8000f12:	e761      	b.n	8000dd8 <__aeabi_ddiv+0x11c>
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	4649      	mov	r1, r9
 8000f18:	031b      	lsls	r3, r3, #12
 8000f1a:	4219      	tst	r1, r3
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x264>
 8000f1e:	e0e2      	b.n	80010e6 <__aeabi_ddiv+0x42a>
 8000f20:	4659      	mov	r1, fp
 8000f22:	4219      	tst	r1, r3
 8000f24:	d000      	beq.n	8000f28 <__aeabi_ddiv+0x26c>
 8000f26:	e0de      	b.n	80010e6 <__aeabi_ddiv+0x42a>
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	031b      	lsls	r3, r3, #12
 8000f2c:	0017      	movs	r7, r2
 8000f2e:	0b1b      	lsrs	r3, r3, #12
 8000f30:	46a2      	mov	sl, r4
 8000f32:	4a01      	ldr	r2, [pc, #4]	; (8000f38 <__aeabi_ddiv+0x27c>)
 8000f34:	e750      	b.n	8000dd8 <__aeabi_ddiv+0x11c>
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	000007ff 	.word	0x000007ff
 8000f3c:	fffffc01 	.word	0xfffffc01
 8000f40:	08007e28 	.word	0x08007e28
 8000f44:	000003ff 	.word	0x000003ff
 8000f48:	feffffff 	.word	0xfeffffff
 8000f4c:	000007fe 	.word	0x000007fe
 8000f50:	800fffff 	.word	0x800fffff
 8000f54:	fffffc0d 	.word	0xfffffc0d
 8000f58:	fffff801 	.word	0xfffff801
 8000f5c:	000003f3 	.word	0x000003f3
 8000f60:	45d9      	cmp	r9, fp
 8000f62:	d900      	bls.n	8000f66 <__aeabi_ddiv+0x2aa>
 8000f64:	e0cb      	b.n	80010fe <__aeabi_ddiv+0x442>
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0x2ae>
 8000f68:	e0c6      	b.n	80010f8 <__aeabi_ddiv+0x43c>
 8000f6a:	003c      	movs	r4, r7
 8000f6c:	4648      	mov	r0, r9
 8000f6e:	2700      	movs	r7, #0
 8000f70:	9b00      	ldr	r3, [sp, #0]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	465b      	mov	r3, fp
 8000f78:	0e16      	lsrs	r6, r2, #24
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	0213      	lsls	r3, r2, #8
 8000f80:	4698      	mov	r8, r3
 8000f82:	0433      	lsls	r3, r6, #16
 8000f84:	0c1b      	lsrs	r3, r3, #16
 8000f86:	4699      	mov	r9, r3
 8000f88:	0c31      	lsrs	r1, r6, #16
 8000f8a:	9101      	str	r1, [sp, #4]
 8000f8c:	f7ff f94c 	bl	8000228 <__aeabi_uidivmod>
 8000f90:	464a      	mov	r2, r9
 8000f92:	4342      	muls	r2, r0
 8000f94:	040b      	lsls	r3, r1, #16
 8000f96:	0c21      	lsrs	r1, r4, #16
 8000f98:	0005      	movs	r5, r0
 8000f9a:	4319      	orrs	r1, r3
 8000f9c:	428a      	cmp	r2, r1
 8000f9e:	d907      	bls.n	8000fb0 <__aeabi_ddiv+0x2f4>
 8000fa0:	1989      	adds	r1, r1, r6
 8000fa2:	3d01      	subs	r5, #1
 8000fa4:	428e      	cmp	r6, r1
 8000fa6:	d803      	bhi.n	8000fb0 <__aeabi_ddiv+0x2f4>
 8000fa8:	428a      	cmp	r2, r1
 8000faa:	d901      	bls.n	8000fb0 <__aeabi_ddiv+0x2f4>
 8000fac:	1e85      	subs	r5, r0, #2
 8000fae:	1989      	adds	r1, r1, r6
 8000fb0:	1a88      	subs	r0, r1, r2
 8000fb2:	9901      	ldr	r1, [sp, #4]
 8000fb4:	f7ff f938 	bl	8000228 <__aeabi_uidivmod>
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	468c      	mov	ip, r1
 8000fbc:	464a      	mov	r2, r9
 8000fbe:	0421      	lsls	r1, r4, #16
 8000fc0:	4664      	mov	r4, ip
 8000fc2:	4342      	muls	r2, r0
 8000fc4:	0c09      	lsrs	r1, r1, #16
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	4321      	orrs	r1, r4
 8000fca:	428a      	cmp	r2, r1
 8000fcc:	d904      	bls.n	8000fd8 <__aeabi_ddiv+0x31c>
 8000fce:	1989      	adds	r1, r1, r6
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	428e      	cmp	r6, r1
 8000fd4:	d800      	bhi.n	8000fd8 <__aeabi_ddiv+0x31c>
 8000fd6:	e0f1      	b.n	80011bc <__aeabi_ddiv+0x500>
 8000fd8:	042d      	lsls	r5, r5, #16
 8000fda:	431d      	orrs	r5, r3
 8000fdc:	46ab      	mov	fp, r5
 8000fde:	4643      	mov	r3, r8
 8000fe0:	1a89      	subs	r1, r1, r2
 8000fe2:	4642      	mov	r2, r8
 8000fe4:	0c28      	lsrs	r0, r5, #16
 8000fe6:	0412      	lsls	r2, r2, #16
 8000fe8:	0c1d      	lsrs	r5, r3, #16
 8000fea:	465b      	mov	r3, fp
 8000fec:	0c14      	lsrs	r4, r2, #16
 8000fee:	0022      	movs	r2, r4
 8000ff0:	041b      	lsls	r3, r3, #16
 8000ff2:	0c1b      	lsrs	r3, r3, #16
 8000ff4:	435a      	muls	r2, r3
 8000ff6:	9403      	str	r4, [sp, #12]
 8000ff8:	436b      	muls	r3, r5
 8000ffa:	4344      	muls	r4, r0
 8000ffc:	9502      	str	r5, [sp, #8]
 8000ffe:	4368      	muls	r0, r5
 8001000:	191b      	adds	r3, r3, r4
 8001002:	0c15      	lsrs	r5, r2, #16
 8001004:	18eb      	adds	r3, r5, r3
 8001006:	429c      	cmp	r4, r3
 8001008:	d903      	bls.n	8001012 <__aeabi_ddiv+0x356>
 800100a:	2480      	movs	r4, #128	; 0x80
 800100c:	0264      	lsls	r4, r4, #9
 800100e:	46a4      	mov	ip, r4
 8001010:	4460      	add	r0, ip
 8001012:	0c1c      	lsrs	r4, r3, #16
 8001014:	0415      	lsls	r5, r2, #16
 8001016:	041b      	lsls	r3, r3, #16
 8001018:	0c2d      	lsrs	r5, r5, #16
 800101a:	1820      	adds	r0, r4, r0
 800101c:	195d      	adds	r5, r3, r5
 800101e:	4281      	cmp	r1, r0
 8001020:	d377      	bcc.n	8001112 <__aeabi_ddiv+0x456>
 8001022:	d073      	beq.n	800110c <__aeabi_ddiv+0x450>
 8001024:	1a0c      	subs	r4, r1, r0
 8001026:	4aa2      	ldr	r2, [pc, #648]	; (80012b0 <__aeabi_ddiv+0x5f4>)
 8001028:	1b7d      	subs	r5, r7, r5
 800102a:	42af      	cmp	r7, r5
 800102c:	41bf      	sbcs	r7, r7
 800102e:	4694      	mov	ip, r2
 8001030:	9b00      	ldr	r3, [sp, #0]
 8001032:	427f      	negs	r7, r7
 8001034:	4463      	add	r3, ip
 8001036:	1be0      	subs	r0, r4, r7
 8001038:	001c      	movs	r4, r3
 800103a:	4286      	cmp	r6, r0
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x384>
 800103e:	e0db      	b.n	80011f8 <__aeabi_ddiv+0x53c>
 8001040:	9901      	ldr	r1, [sp, #4]
 8001042:	f7ff f8f1 	bl	8000228 <__aeabi_uidivmod>
 8001046:	464a      	mov	r2, r9
 8001048:	4342      	muls	r2, r0
 800104a:	040b      	lsls	r3, r1, #16
 800104c:	0c29      	lsrs	r1, r5, #16
 800104e:	0007      	movs	r7, r0
 8001050:	4319      	orrs	r1, r3
 8001052:	428a      	cmp	r2, r1
 8001054:	d907      	bls.n	8001066 <__aeabi_ddiv+0x3aa>
 8001056:	1989      	adds	r1, r1, r6
 8001058:	3f01      	subs	r7, #1
 800105a:	428e      	cmp	r6, r1
 800105c:	d803      	bhi.n	8001066 <__aeabi_ddiv+0x3aa>
 800105e:	428a      	cmp	r2, r1
 8001060:	d901      	bls.n	8001066 <__aeabi_ddiv+0x3aa>
 8001062:	1e87      	subs	r7, r0, #2
 8001064:	1989      	adds	r1, r1, r6
 8001066:	1a88      	subs	r0, r1, r2
 8001068:	9901      	ldr	r1, [sp, #4]
 800106a:	f7ff f8dd 	bl	8000228 <__aeabi_uidivmod>
 800106e:	0409      	lsls	r1, r1, #16
 8001070:	464a      	mov	r2, r9
 8001072:	4689      	mov	r9, r1
 8001074:	0429      	lsls	r1, r5, #16
 8001076:	464d      	mov	r5, r9
 8001078:	4342      	muls	r2, r0
 800107a:	0c09      	lsrs	r1, r1, #16
 800107c:	0003      	movs	r3, r0
 800107e:	4329      	orrs	r1, r5
 8001080:	428a      	cmp	r2, r1
 8001082:	d907      	bls.n	8001094 <__aeabi_ddiv+0x3d8>
 8001084:	1989      	adds	r1, r1, r6
 8001086:	3b01      	subs	r3, #1
 8001088:	428e      	cmp	r6, r1
 800108a:	d803      	bhi.n	8001094 <__aeabi_ddiv+0x3d8>
 800108c:	428a      	cmp	r2, r1
 800108e:	d901      	bls.n	8001094 <__aeabi_ddiv+0x3d8>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	1989      	adds	r1, r1, r6
 8001094:	043f      	lsls	r7, r7, #16
 8001096:	1a89      	subs	r1, r1, r2
 8001098:	003a      	movs	r2, r7
 800109a:	9f03      	ldr	r7, [sp, #12]
 800109c:	431a      	orrs	r2, r3
 800109e:	0038      	movs	r0, r7
 80010a0:	0413      	lsls	r3, r2, #16
 80010a2:	0c1b      	lsrs	r3, r3, #16
 80010a4:	4358      	muls	r0, r3
 80010a6:	4681      	mov	r9, r0
 80010a8:	9802      	ldr	r0, [sp, #8]
 80010aa:	0c15      	lsrs	r5, r2, #16
 80010ac:	436f      	muls	r7, r5
 80010ae:	4343      	muls	r3, r0
 80010b0:	4345      	muls	r5, r0
 80010b2:	4648      	mov	r0, r9
 80010b4:	0c00      	lsrs	r0, r0, #16
 80010b6:	4684      	mov	ip, r0
 80010b8:	19db      	adds	r3, r3, r7
 80010ba:	4463      	add	r3, ip
 80010bc:	429f      	cmp	r7, r3
 80010be:	d903      	bls.n	80010c8 <__aeabi_ddiv+0x40c>
 80010c0:	2080      	movs	r0, #128	; 0x80
 80010c2:	0240      	lsls	r0, r0, #9
 80010c4:	4684      	mov	ip, r0
 80010c6:	4465      	add	r5, ip
 80010c8:	4648      	mov	r0, r9
 80010ca:	0c1f      	lsrs	r7, r3, #16
 80010cc:	0400      	lsls	r0, r0, #16
 80010ce:	041b      	lsls	r3, r3, #16
 80010d0:	0c00      	lsrs	r0, r0, #16
 80010d2:	197d      	adds	r5, r7, r5
 80010d4:	1818      	adds	r0, r3, r0
 80010d6:	42a9      	cmp	r1, r5
 80010d8:	d200      	bcs.n	80010dc <__aeabi_ddiv+0x420>
 80010da:	e084      	b.n	80011e6 <__aeabi_ddiv+0x52a>
 80010dc:	d100      	bne.n	80010e0 <__aeabi_ddiv+0x424>
 80010de:	e07f      	b.n	80011e0 <__aeabi_ddiv+0x524>
 80010e0:	2301      	movs	r3, #1
 80010e2:	431a      	orrs	r2, r3
 80010e4:	e657      	b.n	8000d96 <__aeabi_ddiv+0xda>
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	464a      	mov	r2, r9
 80010ea:	031b      	lsls	r3, r3, #12
 80010ec:	4313      	orrs	r3, r2
 80010ee:	031b      	lsls	r3, r3, #12
 80010f0:	0b1b      	lsrs	r3, r3, #12
 80010f2:	46aa      	mov	sl, r5
 80010f4:	4a6f      	ldr	r2, [pc, #444]	; (80012b4 <__aeabi_ddiv+0x5f8>)
 80010f6:	e66f      	b.n	8000dd8 <__aeabi_ddiv+0x11c>
 80010f8:	42ba      	cmp	r2, r7
 80010fa:	d900      	bls.n	80010fe <__aeabi_ddiv+0x442>
 80010fc:	e735      	b.n	8000f6a <__aeabi_ddiv+0x2ae>
 80010fe:	464b      	mov	r3, r9
 8001100:	07dc      	lsls	r4, r3, #31
 8001102:	0858      	lsrs	r0, r3, #1
 8001104:	087b      	lsrs	r3, r7, #1
 8001106:	431c      	orrs	r4, r3
 8001108:	07ff      	lsls	r7, r7, #31
 800110a:	e734      	b.n	8000f76 <__aeabi_ddiv+0x2ba>
 800110c:	2400      	movs	r4, #0
 800110e:	42af      	cmp	r7, r5
 8001110:	d289      	bcs.n	8001026 <__aeabi_ddiv+0x36a>
 8001112:	4447      	add	r7, r8
 8001114:	4547      	cmp	r7, r8
 8001116:	41a4      	sbcs	r4, r4
 8001118:	465b      	mov	r3, fp
 800111a:	4264      	negs	r4, r4
 800111c:	19a4      	adds	r4, r4, r6
 800111e:	1864      	adds	r4, r4, r1
 8001120:	3b01      	subs	r3, #1
 8001122:	42a6      	cmp	r6, r4
 8001124:	d21e      	bcs.n	8001164 <__aeabi_ddiv+0x4a8>
 8001126:	42a0      	cmp	r0, r4
 8001128:	d86d      	bhi.n	8001206 <__aeabi_ddiv+0x54a>
 800112a:	d100      	bne.n	800112e <__aeabi_ddiv+0x472>
 800112c:	e0b6      	b.n	800129c <__aeabi_ddiv+0x5e0>
 800112e:	1a24      	subs	r4, r4, r0
 8001130:	469b      	mov	fp, r3
 8001132:	e778      	b.n	8001026 <__aeabi_ddiv+0x36a>
 8001134:	0003      	movs	r3, r0
 8001136:	465a      	mov	r2, fp
 8001138:	3b28      	subs	r3, #40	; 0x28
 800113a:	409a      	lsls	r2, r3
 800113c:	2700      	movs	r7, #0
 800113e:	4691      	mov	r9, r2
 8001140:	e688      	b.n	8000e54 <__aeabi_ddiv+0x198>
 8001142:	4658      	mov	r0, fp
 8001144:	f001 f820 	bl	8002188 <__clzsi2>
 8001148:	3020      	adds	r0, #32
 800114a:	e672      	b.n	8000e32 <__aeabi_ddiv+0x176>
 800114c:	0003      	movs	r3, r0
 800114e:	4652      	mov	r2, sl
 8001150:	3b28      	subs	r3, #40	; 0x28
 8001152:	409a      	lsls	r2, r3
 8001154:	4693      	mov	fp, r2
 8001156:	2200      	movs	r2, #0
 8001158:	e6b4      	b.n	8000ec4 <__aeabi_ddiv+0x208>
 800115a:	4650      	mov	r0, sl
 800115c:	f001 f814 	bl	8002188 <__clzsi2>
 8001160:	3020      	adds	r0, #32
 8001162:	e69a      	b.n	8000e9a <__aeabi_ddiv+0x1de>
 8001164:	42a6      	cmp	r6, r4
 8001166:	d1e2      	bne.n	800112e <__aeabi_ddiv+0x472>
 8001168:	45b8      	cmp	r8, r7
 800116a:	d9dc      	bls.n	8001126 <__aeabi_ddiv+0x46a>
 800116c:	1a34      	subs	r4, r6, r0
 800116e:	469b      	mov	fp, r3
 8001170:	e759      	b.n	8001026 <__aeabi_ddiv+0x36a>
 8001172:	2b1f      	cmp	r3, #31
 8001174:	dc65      	bgt.n	8001242 <__aeabi_ddiv+0x586>
 8001176:	4c50      	ldr	r4, [pc, #320]	; (80012b8 <__aeabi_ddiv+0x5fc>)
 8001178:	9900      	ldr	r1, [sp, #0]
 800117a:	46a4      	mov	ip, r4
 800117c:	465c      	mov	r4, fp
 800117e:	4461      	add	r1, ip
 8001180:	0008      	movs	r0, r1
 8001182:	408c      	lsls	r4, r1
 8001184:	0011      	movs	r1, r2
 8001186:	4082      	lsls	r2, r0
 8001188:	40d9      	lsrs	r1, r3
 800118a:	1e50      	subs	r0, r2, #1
 800118c:	4182      	sbcs	r2, r0
 800118e:	430c      	orrs	r4, r1
 8001190:	4314      	orrs	r4, r2
 8001192:	465a      	mov	r2, fp
 8001194:	40da      	lsrs	r2, r3
 8001196:	0013      	movs	r3, r2
 8001198:	0762      	lsls	r2, r4, #29
 800119a:	d009      	beq.n	80011b0 <__aeabi_ddiv+0x4f4>
 800119c:	220f      	movs	r2, #15
 800119e:	4022      	ands	r2, r4
 80011a0:	2a04      	cmp	r2, #4
 80011a2:	d005      	beq.n	80011b0 <__aeabi_ddiv+0x4f4>
 80011a4:	0022      	movs	r2, r4
 80011a6:	1d14      	adds	r4, r2, #4
 80011a8:	4294      	cmp	r4, r2
 80011aa:	4189      	sbcs	r1, r1
 80011ac:	4249      	negs	r1, r1
 80011ae:	185b      	adds	r3, r3, r1
 80011b0:	021a      	lsls	r2, r3, #8
 80011b2:	d562      	bpl.n	800127a <__aeabi_ddiv+0x5be>
 80011b4:	2201      	movs	r2, #1
 80011b6:	2300      	movs	r3, #0
 80011b8:	2700      	movs	r7, #0
 80011ba:	e60d      	b.n	8000dd8 <__aeabi_ddiv+0x11c>
 80011bc:	428a      	cmp	r2, r1
 80011be:	d800      	bhi.n	80011c2 <__aeabi_ddiv+0x506>
 80011c0:	e70a      	b.n	8000fd8 <__aeabi_ddiv+0x31c>
 80011c2:	1e83      	subs	r3, r0, #2
 80011c4:	1989      	adds	r1, r1, r6
 80011c6:	e707      	b.n	8000fd8 <__aeabi_ddiv+0x31c>
 80011c8:	230f      	movs	r3, #15
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d100      	bne.n	80011d2 <__aeabi_ddiv+0x516>
 80011d0:	e5e6      	b.n	8000da0 <__aeabi_ddiv+0xe4>
 80011d2:	1d17      	adds	r7, r2, #4
 80011d4:	4297      	cmp	r7, r2
 80011d6:	4192      	sbcs	r2, r2
 80011d8:	4253      	negs	r3, r2
 80011da:	449b      	add	fp, r3
 80011dc:	08fa      	lsrs	r2, r7, #3
 80011de:	e5e0      	b.n	8000da2 <__aeabi_ddiv+0xe6>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x52a>
 80011e4:	e5d7      	b.n	8000d96 <__aeabi_ddiv+0xda>
 80011e6:	1871      	adds	r1, r6, r1
 80011e8:	1e53      	subs	r3, r2, #1
 80011ea:	42b1      	cmp	r1, r6
 80011ec:	d327      	bcc.n	800123e <__aeabi_ddiv+0x582>
 80011ee:	42a9      	cmp	r1, r5
 80011f0:	d315      	bcc.n	800121e <__aeabi_ddiv+0x562>
 80011f2:	d058      	beq.n	80012a6 <__aeabi_ddiv+0x5ea>
 80011f4:	001a      	movs	r2, r3
 80011f6:	e773      	b.n	80010e0 <__aeabi_ddiv+0x424>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dc00      	bgt.n	80011fe <__aeabi_ddiv+0x542>
 80011fc:	e604      	b.n	8000e08 <__aeabi_ddiv+0x14c>
 80011fe:	2301      	movs	r3, #1
 8001200:	2200      	movs	r2, #0
 8001202:	449b      	add	fp, r3
 8001204:	e5cd      	b.n	8000da2 <__aeabi_ddiv+0xe6>
 8001206:	2302      	movs	r3, #2
 8001208:	4447      	add	r7, r8
 800120a:	4547      	cmp	r7, r8
 800120c:	4189      	sbcs	r1, r1
 800120e:	425b      	negs	r3, r3
 8001210:	469c      	mov	ip, r3
 8001212:	4249      	negs	r1, r1
 8001214:	1989      	adds	r1, r1, r6
 8001216:	190c      	adds	r4, r1, r4
 8001218:	44e3      	add	fp, ip
 800121a:	1a24      	subs	r4, r4, r0
 800121c:	e703      	b.n	8001026 <__aeabi_ddiv+0x36a>
 800121e:	4643      	mov	r3, r8
 8001220:	005f      	lsls	r7, r3, #1
 8001222:	4547      	cmp	r7, r8
 8001224:	419b      	sbcs	r3, r3
 8001226:	46b8      	mov	r8, r7
 8001228:	425b      	negs	r3, r3
 800122a:	199e      	adds	r6, r3, r6
 800122c:	3a02      	subs	r2, #2
 800122e:	1989      	adds	r1, r1, r6
 8001230:	42a9      	cmp	r1, r5
 8001232:	d000      	beq.n	8001236 <__aeabi_ddiv+0x57a>
 8001234:	e754      	b.n	80010e0 <__aeabi_ddiv+0x424>
 8001236:	4540      	cmp	r0, r8
 8001238:	d000      	beq.n	800123c <__aeabi_ddiv+0x580>
 800123a:	e751      	b.n	80010e0 <__aeabi_ddiv+0x424>
 800123c:	e5ab      	b.n	8000d96 <__aeabi_ddiv+0xda>
 800123e:	001a      	movs	r2, r3
 8001240:	e7f6      	b.n	8001230 <__aeabi_ddiv+0x574>
 8001242:	211f      	movs	r1, #31
 8001244:	465f      	mov	r7, fp
 8001246:	4249      	negs	r1, r1
 8001248:	1b0c      	subs	r4, r1, r4
 800124a:	40e7      	lsrs	r7, r4
 800124c:	2b20      	cmp	r3, #32
 800124e:	d007      	beq.n	8001260 <__aeabi_ddiv+0x5a4>
 8001250:	491a      	ldr	r1, [pc, #104]	; (80012bc <__aeabi_ddiv+0x600>)
 8001252:	9b00      	ldr	r3, [sp, #0]
 8001254:	468c      	mov	ip, r1
 8001256:	4463      	add	r3, ip
 8001258:	0018      	movs	r0, r3
 800125a:	465b      	mov	r3, fp
 800125c:	4083      	lsls	r3, r0
 800125e:	431a      	orrs	r2, r3
 8001260:	1e50      	subs	r0, r2, #1
 8001262:	4182      	sbcs	r2, r0
 8001264:	433a      	orrs	r2, r7
 8001266:	2707      	movs	r7, #7
 8001268:	2300      	movs	r3, #0
 800126a:	4017      	ands	r7, r2
 800126c:	d009      	beq.n	8001282 <__aeabi_ddiv+0x5c6>
 800126e:	210f      	movs	r1, #15
 8001270:	2300      	movs	r3, #0
 8001272:	4011      	ands	r1, r2
 8001274:	0014      	movs	r4, r2
 8001276:	2904      	cmp	r1, #4
 8001278:	d195      	bne.n	80011a6 <__aeabi_ddiv+0x4ea>
 800127a:	0022      	movs	r2, r4
 800127c:	075f      	lsls	r7, r3, #29
 800127e:	025b      	lsls	r3, r3, #9
 8001280:	0b1b      	lsrs	r3, r3, #12
 8001282:	08d2      	lsrs	r2, r2, #3
 8001284:	4317      	orrs	r7, r2
 8001286:	2200      	movs	r2, #0
 8001288:	e5a6      	b.n	8000dd8 <__aeabi_ddiv+0x11c>
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	4659      	mov	r1, fp
 800128e:	031b      	lsls	r3, r3, #12
 8001290:	430b      	orrs	r3, r1
 8001292:	031b      	lsls	r3, r3, #12
 8001294:	0017      	movs	r7, r2
 8001296:	0b1b      	lsrs	r3, r3, #12
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <__aeabi_ddiv+0x5f8>)
 800129a:	e59d      	b.n	8000dd8 <__aeabi_ddiv+0x11c>
 800129c:	42bd      	cmp	r5, r7
 800129e:	d8b2      	bhi.n	8001206 <__aeabi_ddiv+0x54a>
 80012a0:	469b      	mov	fp, r3
 80012a2:	2400      	movs	r4, #0
 80012a4:	e6bf      	b.n	8001026 <__aeabi_ddiv+0x36a>
 80012a6:	4580      	cmp	r8, r0
 80012a8:	d3b9      	bcc.n	800121e <__aeabi_ddiv+0x562>
 80012aa:	001a      	movs	r2, r3
 80012ac:	e7c3      	b.n	8001236 <__aeabi_ddiv+0x57a>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	000003ff 	.word	0x000003ff
 80012b4:	000007ff 	.word	0x000007ff
 80012b8:	0000041e 	.word	0x0000041e
 80012bc:	0000043e 	.word	0x0000043e

080012c0 <__eqdf2>:
 80012c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c2:	464f      	mov	r7, r9
 80012c4:	4646      	mov	r6, r8
 80012c6:	46d6      	mov	lr, sl
 80012c8:	4684      	mov	ip, r0
 80012ca:	b5c0      	push	{r6, r7, lr}
 80012cc:	4680      	mov	r8, r0
 80012ce:	4e19      	ldr	r6, [pc, #100]	; (8001334 <__eqdf2+0x74>)
 80012d0:	0318      	lsls	r0, r3, #12
 80012d2:	030f      	lsls	r7, r1, #12
 80012d4:	004d      	lsls	r5, r1, #1
 80012d6:	0b00      	lsrs	r0, r0, #12
 80012d8:	005c      	lsls	r4, r3, #1
 80012da:	4682      	mov	sl, r0
 80012dc:	0b3f      	lsrs	r7, r7, #12
 80012de:	0d6d      	lsrs	r5, r5, #21
 80012e0:	0fc9      	lsrs	r1, r1, #31
 80012e2:	4691      	mov	r9, r2
 80012e4:	0d64      	lsrs	r4, r4, #21
 80012e6:	0fdb      	lsrs	r3, r3, #31
 80012e8:	2001      	movs	r0, #1
 80012ea:	42b5      	cmp	r5, r6
 80012ec:	d00a      	beq.n	8001304 <__eqdf2+0x44>
 80012ee:	42b4      	cmp	r4, r6
 80012f0:	d003      	beq.n	80012fa <__eqdf2+0x3a>
 80012f2:	42a5      	cmp	r5, r4
 80012f4:	d101      	bne.n	80012fa <__eqdf2+0x3a>
 80012f6:	4557      	cmp	r7, sl
 80012f8:	d00c      	beq.n	8001314 <__eqdf2+0x54>
 80012fa:	bc1c      	pop	{r2, r3, r4}
 80012fc:	4690      	mov	r8, r2
 80012fe:	4699      	mov	r9, r3
 8001300:	46a2      	mov	sl, r4
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001304:	4666      	mov	r6, ip
 8001306:	433e      	orrs	r6, r7
 8001308:	d1f7      	bne.n	80012fa <__eqdf2+0x3a>
 800130a:	42ac      	cmp	r4, r5
 800130c:	d1f5      	bne.n	80012fa <__eqdf2+0x3a>
 800130e:	4654      	mov	r4, sl
 8001310:	4314      	orrs	r4, r2
 8001312:	d1f2      	bne.n	80012fa <__eqdf2+0x3a>
 8001314:	2001      	movs	r0, #1
 8001316:	45c8      	cmp	r8, r9
 8001318:	d1ef      	bne.n	80012fa <__eqdf2+0x3a>
 800131a:	4299      	cmp	r1, r3
 800131c:	d007      	beq.n	800132e <__eqdf2+0x6e>
 800131e:	2d00      	cmp	r5, #0
 8001320:	d1eb      	bne.n	80012fa <__eqdf2+0x3a>
 8001322:	4663      	mov	r3, ip
 8001324:	431f      	orrs	r7, r3
 8001326:	0038      	movs	r0, r7
 8001328:	1e47      	subs	r7, r0, #1
 800132a:	41b8      	sbcs	r0, r7
 800132c:	e7e5      	b.n	80012fa <__eqdf2+0x3a>
 800132e:	2000      	movs	r0, #0
 8001330:	e7e3      	b.n	80012fa <__eqdf2+0x3a>
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	000007ff 	.word	0x000007ff

08001338 <__gedf2>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	464f      	mov	r7, r9
 800133c:	4646      	mov	r6, r8
 800133e:	46d6      	mov	lr, sl
 8001340:	004d      	lsls	r5, r1, #1
 8001342:	b5c0      	push	{r6, r7, lr}
 8001344:	030e      	lsls	r6, r1, #12
 8001346:	0fc9      	lsrs	r1, r1, #31
 8001348:	468a      	mov	sl, r1
 800134a:	492c      	ldr	r1, [pc, #176]	; (80013fc <__gedf2+0xc4>)
 800134c:	031f      	lsls	r7, r3, #12
 800134e:	005c      	lsls	r4, r3, #1
 8001350:	4680      	mov	r8, r0
 8001352:	0b36      	lsrs	r6, r6, #12
 8001354:	0d6d      	lsrs	r5, r5, #21
 8001356:	4691      	mov	r9, r2
 8001358:	0b3f      	lsrs	r7, r7, #12
 800135a:	0d64      	lsrs	r4, r4, #21
 800135c:	0fdb      	lsrs	r3, r3, #31
 800135e:	428d      	cmp	r5, r1
 8001360:	d01e      	beq.n	80013a0 <__gedf2+0x68>
 8001362:	428c      	cmp	r4, r1
 8001364:	d016      	beq.n	8001394 <__gedf2+0x5c>
 8001366:	2d00      	cmp	r5, #0
 8001368:	d11e      	bne.n	80013a8 <__gedf2+0x70>
 800136a:	4330      	orrs	r0, r6
 800136c:	4684      	mov	ip, r0
 800136e:	2c00      	cmp	r4, #0
 8001370:	d101      	bne.n	8001376 <__gedf2+0x3e>
 8001372:	433a      	orrs	r2, r7
 8001374:	d023      	beq.n	80013be <__gedf2+0x86>
 8001376:	4662      	mov	r2, ip
 8001378:	2a00      	cmp	r2, #0
 800137a:	d01a      	beq.n	80013b2 <__gedf2+0x7a>
 800137c:	459a      	cmp	sl, r3
 800137e:	d029      	beq.n	80013d4 <__gedf2+0x9c>
 8001380:	4651      	mov	r1, sl
 8001382:	2002      	movs	r0, #2
 8001384:	3901      	subs	r1, #1
 8001386:	4008      	ands	r0, r1
 8001388:	3801      	subs	r0, #1
 800138a:	bc1c      	pop	{r2, r3, r4}
 800138c:	4690      	mov	r8, r2
 800138e:	4699      	mov	r9, r3
 8001390:	46a2      	mov	sl, r4
 8001392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001394:	0039      	movs	r1, r7
 8001396:	4311      	orrs	r1, r2
 8001398:	d0e5      	beq.n	8001366 <__gedf2+0x2e>
 800139a:	2002      	movs	r0, #2
 800139c:	4240      	negs	r0, r0
 800139e:	e7f4      	b.n	800138a <__gedf2+0x52>
 80013a0:	4330      	orrs	r0, r6
 80013a2:	d1fa      	bne.n	800139a <__gedf2+0x62>
 80013a4:	42ac      	cmp	r4, r5
 80013a6:	d00f      	beq.n	80013c8 <__gedf2+0x90>
 80013a8:	2c00      	cmp	r4, #0
 80013aa:	d10f      	bne.n	80013cc <__gedf2+0x94>
 80013ac:	433a      	orrs	r2, r7
 80013ae:	d0e7      	beq.n	8001380 <__gedf2+0x48>
 80013b0:	e00c      	b.n	80013cc <__gedf2+0x94>
 80013b2:	2201      	movs	r2, #1
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4393      	bics	r3, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	3001      	adds	r0, #1
 80013bc:	e7e5      	b.n	800138a <__gedf2+0x52>
 80013be:	4663      	mov	r3, ip
 80013c0:	2000      	movs	r0, #0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0e1      	beq.n	800138a <__gedf2+0x52>
 80013c6:	e7db      	b.n	8001380 <__gedf2+0x48>
 80013c8:	433a      	orrs	r2, r7
 80013ca:	d1e6      	bne.n	800139a <__gedf2+0x62>
 80013cc:	459a      	cmp	sl, r3
 80013ce:	d1d7      	bne.n	8001380 <__gedf2+0x48>
 80013d0:	42a5      	cmp	r5, r4
 80013d2:	dcd5      	bgt.n	8001380 <__gedf2+0x48>
 80013d4:	42a5      	cmp	r5, r4
 80013d6:	db05      	blt.n	80013e4 <__gedf2+0xac>
 80013d8:	42be      	cmp	r6, r7
 80013da:	d8d1      	bhi.n	8001380 <__gedf2+0x48>
 80013dc:	d008      	beq.n	80013f0 <__gedf2+0xb8>
 80013de:	2000      	movs	r0, #0
 80013e0:	42be      	cmp	r6, r7
 80013e2:	d2d2      	bcs.n	800138a <__gedf2+0x52>
 80013e4:	4650      	mov	r0, sl
 80013e6:	2301      	movs	r3, #1
 80013e8:	3801      	subs	r0, #1
 80013ea:	4398      	bics	r0, r3
 80013ec:	3001      	adds	r0, #1
 80013ee:	e7cc      	b.n	800138a <__gedf2+0x52>
 80013f0:	45c8      	cmp	r8, r9
 80013f2:	d8c5      	bhi.n	8001380 <__gedf2+0x48>
 80013f4:	2000      	movs	r0, #0
 80013f6:	45c8      	cmp	r8, r9
 80013f8:	d3f4      	bcc.n	80013e4 <__gedf2+0xac>
 80013fa:	e7c6      	b.n	800138a <__gedf2+0x52>
 80013fc:	000007ff 	.word	0x000007ff

08001400 <__ledf2>:
 8001400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001402:	464f      	mov	r7, r9
 8001404:	4646      	mov	r6, r8
 8001406:	46d6      	mov	lr, sl
 8001408:	004d      	lsls	r5, r1, #1
 800140a:	b5c0      	push	{r6, r7, lr}
 800140c:	030e      	lsls	r6, r1, #12
 800140e:	0fc9      	lsrs	r1, r1, #31
 8001410:	468a      	mov	sl, r1
 8001412:	492e      	ldr	r1, [pc, #184]	; (80014cc <__ledf2+0xcc>)
 8001414:	031f      	lsls	r7, r3, #12
 8001416:	005c      	lsls	r4, r3, #1
 8001418:	4680      	mov	r8, r0
 800141a:	0b36      	lsrs	r6, r6, #12
 800141c:	0d6d      	lsrs	r5, r5, #21
 800141e:	4691      	mov	r9, r2
 8001420:	0b3f      	lsrs	r7, r7, #12
 8001422:	0d64      	lsrs	r4, r4, #21
 8001424:	0fdb      	lsrs	r3, r3, #31
 8001426:	428d      	cmp	r5, r1
 8001428:	d018      	beq.n	800145c <__ledf2+0x5c>
 800142a:	428c      	cmp	r4, r1
 800142c:	d011      	beq.n	8001452 <__ledf2+0x52>
 800142e:	2d00      	cmp	r5, #0
 8001430:	d118      	bne.n	8001464 <__ledf2+0x64>
 8001432:	4330      	orrs	r0, r6
 8001434:	4684      	mov	ip, r0
 8001436:	2c00      	cmp	r4, #0
 8001438:	d11e      	bne.n	8001478 <__ledf2+0x78>
 800143a:	433a      	orrs	r2, r7
 800143c:	d11c      	bne.n	8001478 <__ledf2+0x78>
 800143e:	4663      	mov	r3, ip
 8001440:	2000      	movs	r0, #0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d030      	beq.n	80014a8 <__ledf2+0xa8>
 8001446:	4651      	mov	r1, sl
 8001448:	2002      	movs	r0, #2
 800144a:	3901      	subs	r1, #1
 800144c:	4008      	ands	r0, r1
 800144e:	3801      	subs	r0, #1
 8001450:	e02a      	b.n	80014a8 <__ledf2+0xa8>
 8001452:	0039      	movs	r1, r7
 8001454:	4311      	orrs	r1, r2
 8001456:	d0ea      	beq.n	800142e <__ledf2+0x2e>
 8001458:	2002      	movs	r0, #2
 800145a:	e025      	b.n	80014a8 <__ledf2+0xa8>
 800145c:	4330      	orrs	r0, r6
 800145e:	d1fb      	bne.n	8001458 <__ledf2+0x58>
 8001460:	42ac      	cmp	r4, r5
 8001462:	d026      	beq.n	80014b2 <__ledf2+0xb2>
 8001464:	2c00      	cmp	r4, #0
 8001466:	d126      	bne.n	80014b6 <__ledf2+0xb6>
 8001468:	433a      	orrs	r2, r7
 800146a:	d124      	bne.n	80014b6 <__ledf2+0xb6>
 800146c:	4651      	mov	r1, sl
 800146e:	2002      	movs	r0, #2
 8001470:	3901      	subs	r1, #1
 8001472:	4008      	ands	r0, r1
 8001474:	3801      	subs	r0, #1
 8001476:	e017      	b.n	80014a8 <__ledf2+0xa8>
 8001478:	4662      	mov	r2, ip
 800147a:	2a00      	cmp	r2, #0
 800147c:	d00f      	beq.n	800149e <__ledf2+0x9e>
 800147e:	459a      	cmp	sl, r3
 8001480:	d1e1      	bne.n	8001446 <__ledf2+0x46>
 8001482:	42a5      	cmp	r5, r4
 8001484:	db05      	blt.n	8001492 <__ledf2+0x92>
 8001486:	42be      	cmp	r6, r7
 8001488:	d8dd      	bhi.n	8001446 <__ledf2+0x46>
 800148a:	d019      	beq.n	80014c0 <__ledf2+0xc0>
 800148c:	2000      	movs	r0, #0
 800148e:	42be      	cmp	r6, r7
 8001490:	d20a      	bcs.n	80014a8 <__ledf2+0xa8>
 8001492:	4650      	mov	r0, sl
 8001494:	2301      	movs	r3, #1
 8001496:	3801      	subs	r0, #1
 8001498:	4398      	bics	r0, r3
 800149a:	3001      	adds	r0, #1
 800149c:	e004      	b.n	80014a8 <__ledf2+0xa8>
 800149e:	2201      	movs	r2, #1
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4393      	bics	r3, r2
 80014a4:	0018      	movs	r0, r3
 80014a6:	3001      	adds	r0, #1
 80014a8:	bc1c      	pop	{r2, r3, r4}
 80014aa:	4690      	mov	r8, r2
 80014ac:	4699      	mov	r9, r3
 80014ae:	46a2      	mov	sl, r4
 80014b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b2:	433a      	orrs	r2, r7
 80014b4:	d1d0      	bne.n	8001458 <__ledf2+0x58>
 80014b6:	459a      	cmp	sl, r3
 80014b8:	d1c5      	bne.n	8001446 <__ledf2+0x46>
 80014ba:	42a5      	cmp	r5, r4
 80014bc:	dcc3      	bgt.n	8001446 <__ledf2+0x46>
 80014be:	e7e0      	b.n	8001482 <__ledf2+0x82>
 80014c0:	45c8      	cmp	r8, r9
 80014c2:	d8c0      	bhi.n	8001446 <__ledf2+0x46>
 80014c4:	2000      	movs	r0, #0
 80014c6:	45c8      	cmp	r8, r9
 80014c8:	d3e3      	bcc.n	8001492 <__ledf2+0x92>
 80014ca:	e7ed      	b.n	80014a8 <__ledf2+0xa8>
 80014cc:	000007ff 	.word	0x000007ff

080014d0 <__aeabi_dmul>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	4657      	mov	r7, sl
 80014d4:	46de      	mov	lr, fp
 80014d6:	464e      	mov	r6, r9
 80014d8:	4645      	mov	r5, r8
 80014da:	b5e0      	push	{r5, r6, r7, lr}
 80014dc:	4683      	mov	fp, r0
 80014de:	0006      	movs	r6, r0
 80014e0:	030f      	lsls	r7, r1, #12
 80014e2:	0048      	lsls	r0, r1, #1
 80014e4:	b087      	sub	sp, #28
 80014e6:	4692      	mov	sl, r2
 80014e8:	001d      	movs	r5, r3
 80014ea:	0b3f      	lsrs	r7, r7, #12
 80014ec:	0d40      	lsrs	r0, r0, #21
 80014ee:	0fcc      	lsrs	r4, r1, #31
 80014f0:	2800      	cmp	r0, #0
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dmul+0x26>
 80014f4:	e06f      	b.n	80015d6 <__aeabi_dmul+0x106>
 80014f6:	4bde      	ldr	r3, [pc, #888]	; (8001870 <__aeabi_dmul+0x3a0>)
 80014f8:	4298      	cmp	r0, r3
 80014fa:	d038      	beq.n	800156e <__aeabi_dmul+0x9e>
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	00ff      	lsls	r7, r7, #3
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	431f      	orrs	r7, r3
 8001504:	0f73      	lsrs	r3, r6, #29
 8001506:	433b      	orrs	r3, r7
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	4bda      	ldr	r3, [pc, #872]	; (8001874 <__aeabi_dmul+0x3a4>)
 800150c:	2700      	movs	r7, #0
 800150e:	4699      	mov	r9, r3
 8001510:	2300      	movs	r3, #0
 8001512:	469b      	mov	fp, r3
 8001514:	00f6      	lsls	r6, r6, #3
 8001516:	4481      	add	r9, r0
 8001518:	032b      	lsls	r3, r5, #12
 800151a:	0069      	lsls	r1, r5, #1
 800151c:	0b1b      	lsrs	r3, r3, #12
 800151e:	4652      	mov	r2, sl
 8001520:	4698      	mov	r8, r3
 8001522:	0d49      	lsrs	r1, r1, #21
 8001524:	0fed      	lsrs	r5, r5, #31
 8001526:	2900      	cmp	r1, #0
 8001528:	d100      	bne.n	800152c <__aeabi_dmul+0x5c>
 800152a:	e085      	b.n	8001638 <__aeabi_dmul+0x168>
 800152c:	4bd0      	ldr	r3, [pc, #832]	; (8001870 <__aeabi_dmul+0x3a0>)
 800152e:	4299      	cmp	r1, r3
 8001530:	d100      	bne.n	8001534 <__aeabi_dmul+0x64>
 8001532:	e073      	b.n	800161c <__aeabi_dmul+0x14c>
 8001534:	4643      	mov	r3, r8
 8001536:	00da      	lsls	r2, r3, #3
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	041b      	lsls	r3, r3, #16
 800153c:	4313      	orrs	r3, r2
 800153e:	4652      	mov	r2, sl
 8001540:	48cc      	ldr	r0, [pc, #816]	; (8001874 <__aeabi_dmul+0x3a4>)
 8001542:	0f52      	lsrs	r2, r2, #29
 8001544:	4684      	mov	ip, r0
 8001546:	4313      	orrs	r3, r2
 8001548:	4652      	mov	r2, sl
 800154a:	2000      	movs	r0, #0
 800154c:	4461      	add	r1, ip
 800154e:	00d2      	lsls	r2, r2, #3
 8001550:	4489      	add	r9, r1
 8001552:	0021      	movs	r1, r4
 8001554:	4069      	eors	r1, r5
 8001556:	9100      	str	r1, [sp, #0]
 8001558:	468c      	mov	ip, r1
 800155a:	2101      	movs	r1, #1
 800155c:	4449      	add	r1, r9
 800155e:	468a      	mov	sl, r1
 8001560:	2f0f      	cmp	r7, #15
 8001562:	d900      	bls.n	8001566 <__aeabi_dmul+0x96>
 8001564:	e090      	b.n	8001688 <__aeabi_dmul+0x1b8>
 8001566:	49c4      	ldr	r1, [pc, #784]	; (8001878 <__aeabi_dmul+0x3a8>)
 8001568:	00bf      	lsls	r7, r7, #2
 800156a:	59cf      	ldr	r7, [r1, r7]
 800156c:	46bf      	mov	pc, r7
 800156e:	465b      	mov	r3, fp
 8001570:	433b      	orrs	r3, r7
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	d000      	beq.n	8001578 <__aeabi_dmul+0xa8>
 8001576:	e16a      	b.n	800184e <__aeabi_dmul+0x37e>
 8001578:	2302      	movs	r3, #2
 800157a:	2708      	movs	r7, #8
 800157c:	2600      	movs	r6, #0
 800157e:	4681      	mov	r9, r0
 8001580:	469b      	mov	fp, r3
 8001582:	e7c9      	b.n	8001518 <__aeabi_dmul+0x48>
 8001584:	0032      	movs	r2, r6
 8001586:	4658      	mov	r0, fp
 8001588:	9b01      	ldr	r3, [sp, #4]
 800158a:	4661      	mov	r1, ip
 800158c:	9100      	str	r1, [sp, #0]
 800158e:	2802      	cmp	r0, #2
 8001590:	d100      	bne.n	8001594 <__aeabi_dmul+0xc4>
 8001592:	e075      	b.n	8001680 <__aeabi_dmul+0x1b0>
 8001594:	2803      	cmp	r0, #3
 8001596:	d100      	bne.n	800159a <__aeabi_dmul+0xca>
 8001598:	e1fe      	b.n	8001998 <__aeabi_dmul+0x4c8>
 800159a:	2801      	cmp	r0, #1
 800159c:	d000      	beq.n	80015a0 <__aeabi_dmul+0xd0>
 800159e:	e12c      	b.n	80017fa <__aeabi_dmul+0x32a>
 80015a0:	2300      	movs	r3, #0
 80015a2:	2700      	movs	r7, #0
 80015a4:	2600      	movs	r6, #0
 80015a6:	2500      	movs	r5, #0
 80015a8:	033f      	lsls	r7, r7, #12
 80015aa:	0d2a      	lsrs	r2, r5, #20
 80015ac:	0b3f      	lsrs	r7, r7, #12
 80015ae:	48b3      	ldr	r0, [pc, #716]	; (800187c <__aeabi_dmul+0x3ac>)
 80015b0:	0512      	lsls	r2, r2, #20
 80015b2:	433a      	orrs	r2, r7
 80015b4:	4002      	ands	r2, r0
 80015b6:	051b      	lsls	r3, r3, #20
 80015b8:	4313      	orrs	r3, r2
 80015ba:	9a00      	ldr	r2, [sp, #0]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	07d1      	lsls	r1, r2, #31
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	430b      	orrs	r3, r1
 80015c4:	0030      	movs	r0, r6
 80015c6:	0019      	movs	r1, r3
 80015c8:	b007      	add	sp, #28
 80015ca:	bc3c      	pop	{r2, r3, r4, r5}
 80015cc:	4690      	mov	r8, r2
 80015ce:	4699      	mov	r9, r3
 80015d0:	46a2      	mov	sl, r4
 80015d2:	46ab      	mov	fp, r5
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	465b      	mov	r3, fp
 80015d8:	433b      	orrs	r3, r7
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dmul+0x110>
 80015de:	e12f      	b.n	8001840 <__aeabi_dmul+0x370>
 80015e0:	2f00      	cmp	r7, #0
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0x116>
 80015e4:	e1a5      	b.n	8001932 <__aeabi_dmul+0x462>
 80015e6:	0038      	movs	r0, r7
 80015e8:	f000 fdce 	bl	8002188 <__clzsi2>
 80015ec:	0003      	movs	r3, r0
 80015ee:	3b0b      	subs	r3, #11
 80015f0:	2b1c      	cmp	r3, #28
 80015f2:	dd00      	ble.n	80015f6 <__aeabi_dmul+0x126>
 80015f4:	e196      	b.n	8001924 <__aeabi_dmul+0x454>
 80015f6:	221d      	movs	r2, #29
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	465a      	mov	r2, fp
 80015fc:	0001      	movs	r1, r0
 80015fe:	40da      	lsrs	r2, r3
 8001600:	465e      	mov	r6, fp
 8001602:	3908      	subs	r1, #8
 8001604:	408f      	lsls	r7, r1
 8001606:	0013      	movs	r3, r2
 8001608:	408e      	lsls	r6, r1
 800160a:	433b      	orrs	r3, r7
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	4b9c      	ldr	r3, [pc, #624]	; (8001880 <__aeabi_dmul+0x3b0>)
 8001610:	2700      	movs	r7, #0
 8001612:	1a1b      	subs	r3, r3, r0
 8001614:	4699      	mov	r9, r3
 8001616:	2300      	movs	r3, #0
 8001618:	469b      	mov	fp, r3
 800161a:	e77d      	b.n	8001518 <__aeabi_dmul+0x48>
 800161c:	4641      	mov	r1, r8
 800161e:	4653      	mov	r3, sl
 8001620:	430b      	orrs	r3, r1
 8001622:	4993      	ldr	r1, [pc, #588]	; (8001870 <__aeabi_dmul+0x3a0>)
 8001624:	468c      	mov	ip, r1
 8001626:	44e1      	add	r9, ip
 8001628:	2b00      	cmp	r3, #0
 800162a:	d000      	beq.n	800162e <__aeabi_dmul+0x15e>
 800162c:	e11a      	b.n	8001864 <__aeabi_dmul+0x394>
 800162e:	2202      	movs	r2, #2
 8001630:	2002      	movs	r0, #2
 8001632:	4317      	orrs	r7, r2
 8001634:	2200      	movs	r2, #0
 8001636:	e78c      	b.n	8001552 <__aeabi_dmul+0x82>
 8001638:	4313      	orrs	r3, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x16e>
 800163c:	e10d      	b.n	800185a <__aeabi_dmul+0x38a>
 800163e:	4643      	mov	r3, r8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_dmul+0x176>
 8001644:	e181      	b.n	800194a <__aeabi_dmul+0x47a>
 8001646:	4640      	mov	r0, r8
 8001648:	f000 fd9e 	bl	8002188 <__clzsi2>
 800164c:	0002      	movs	r2, r0
 800164e:	3a0b      	subs	r2, #11
 8001650:	2a1c      	cmp	r2, #28
 8001652:	dd00      	ble.n	8001656 <__aeabi_dmul+0x186>
 8001654:	e172      	b.n	800193c <__aeabi_dmul+0x46c>
 8001656:	0001      	movs	r1, r0
 8001658:	4643      	mov	r3, r8
 800165a:	3908      	subs	r1, #8
 800165c:	408b      	lsls	r3, r1
 800165e:	4698      	mov	r8, r3
 8001660:	231d      	movs	r3, #29
 8001662:	1a9a      	subs	r2, r3, r2
 8001664:	4653      	mov	r3, sl
 8001666:	40d3      	lsrs	r3, r2
 8001668:	001a      	movs	r2, r3
 800166a:	4643      	mov	r3, r8
 800166c:	4313      	orrs	r3, r2
 800166e:	4652      	mov	r2, sl
 8001670:	408a      	lsls	r2, r1
 8001672:	4649      	mov	r1, r9
 8001674:	1a08      	subs	r0, r1, r0
 8001676:	4982      	ldr	r1, [pc, #520]	; (8001880 <__aeabi_dmul+0x3b0>)
 8001678:	4689      	mov	r9, r1
 800167a:	4481      	add	r9, r0
 800167c:	2000      	movs	r0, #0
 800167e:	e768      	b.n	8001552 <__aeabi_dmul+0x82>
 8001680:	4b7b      	ldr	r3, [pc, #492]	; (8001870 <__aeabi_dmul+0x3a0>)
 8001682:	2700      	movs	r7, #0
 8001684:	2600      	movs	r6, #0
 8001686:	e78e      	b.n	80015a6 <__aeabi_dmul+0xd6>
 8001688:	0c14      	lsrs	r4, r2, #16
 800168a:	0412      	lsls	r2, r2, #16
 800168c:	0c12      	lsrs	r2, r2, #16
 800168e:	0011      	movs	r1, r2
 8001690:	0c37      	lsrs	r7, r6, #16
 8001692:	0436      	lsls	r6, r6, #16
 8001694:	0c35      	lsrs	r5, r6, #16
 8001696:	4379      	muls	r1, r7
 8001698:	0028      	movs	r0, r5
 800169a:	468c      	mov	ip, r1
 800169c:	002e      	movs	r6, r5
 800169e:	4360      	muls	r0, r4
 80016a0:	4460      	add	r0, ip
 80016a2:	4683      	mov	fp, r0
 80016a4:	4356      	muls	r6, r2
 80016a6:	0021      	movs	r1, r4
 80016a8:	0c30      	lsrs	r0, r6, #16
 80016aa:	4680      	mov	r8, r0
 80016ac:	4658      	mov	r0, fp
 80016ae:	4379      	muls	r1, r7
 80016b0:	4440      	add	r0, r8
 80016b2:	9102      	str	r1, [sp, #8]
 80016b4:	4584      	cmp	ip, r0
 80016b6:	d906      	bls.n	80016c6 <__aeabi_dmul+0x1f6>
 80016b8:	4688      	mov	r8, r1
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	0249      	lsls	r1, r1, #9
 80016be:	468c      	mov	ip, r1
 80016c0:	44e0      	add	r8, ip
 80016c2:	4641      	mov	r1, r8
 80016c4:	9102      	str	r1, [sp, #8]
 80016c6:	0436      	lsls	r6, r6, #16
 80016c8:	0c01      	lsrs	r1, r0, #16
 80016ca:	0c36      	lsrs	r6, r6, #16
 80016cc:	0400      	lsls	r0, r0, #16
 80016ce:	468b      	mov	fp, r1
 80016d0:	1981      	adds	r1, r0, r6
 80016d2:	0c1e      	lsrs	r6, r3, #16
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	9103      	str	r1, [sp, #12]
 80016da:	0019      	movs	r1, r3
 80016dc:	4379      	muls	r1, r7
 80016de:	468c      	mov	ip, r1
 80016e0:	0028      	movs	r0, r5
 80016e2:	4375      	muls	r5, r6
 80016e4:	4465      	add	r5, ip
 80016e6:	46a8      	mov	r8, r5
 80016e8:	4358      	muls	r0, r3
 80016ea:	0c05      	lsrs	r5, r0, #16
 80016ec:	4445      	add	r5, r8
 80016ee:	4377      	muls	r7, r6
 80016f0:	42a9      	cmp	r1, r5
 80016f2:	d903      	bls.n	80016fc <__aeabi_dmul+0x22c>
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	0249      	lsls	r1, r1, #9
 80016f8:	468c      	mov	ip, r1
 80016fa:	4467      	add	r7, ip
 80016fc:	0c29      	lsrs	r1, r5, #16
 80016fe:	468c      	mov	ip, r1
 8001700:	0039      	movs	r1, r7
 8001702:	0400      	lsls	r0, r0, #16
 8001704:	0c00      	lsrs	r0, r0, #16
 8001706:	042d      	lsls	r5, r5, #16
 8001708:	182d      	adds	r5, r5, r0
 800170a:	4461      	add	r1, ip
 800170c:	44ab      	add	fp, r5
 800170e:	9105      	str	r1, [sp, #20]
 8001710:	4659      	mov	r1, fp
 8001712:	9104      	str	r1, [sp, #16]
 8001714:	9901      	ldr	r1, [sp, #4]
 8001716:	040f      	lsls	r7, r1, #16
 8001718:	0c3f      	lsrs	r7, r7, #16
 800171a:	0c08      	lsrs	r0, r1, #16
 800171c:	0039      	movs	r1, r7
 800171e:	4351      	muls	r1, r2
 8001720:	4342      	muls	r2, r0
 8001722:	4690      	mov	r8, r2
 8001724:	0002      	movs	r2, r0
 8001726:	468c      	mov	ip, r1
 8001728:	0c09      	lsrs	r1, r1, #16
 800172a:	468b      	mov	fp, r1
 800172c:	4362      	muls	r2, r4
 800172e:	437c      	muls	r4, r7
 8001730:	4444      	add	r4, r8
 8001732:	445c      	add	r4, fp
 8001734:	45a0      	cmp	r8, r4
 8001736:	d903      	bls.n	8001740 <__aeabi_dmul+0x270>
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0249      	lsls	r1, r1, #9
 800173c:	4688      	mov	r8, r1
 800173e:	4442      	add	r2, r8
 8001740:	0c21      	lsrs	r1, r4, #16
 8001742:	4688      	mov	r8, r1
 8001744:	4661      	mov	r1, ip
 8001746:	0409      	lsls	r1, r1, #16
 8001748:	0c09      	lsrs	r1, r1, #16
 800174a:	468c      	mov	ip, r1
 800174c:	0039      	movs	r1, r7
 800174e:	4359      	muls	r1, r3
 8001750:	4343      	muls	r3, r0
 8001752:	4370      	muls	r0, r6
 8001754:	437e      	muls	r6, r7
 8001756:	0c0f      	lsrs	r7, r1, #16
 8001758:	18f6      	adds	r6, r6, r3
 800175a:	0424      	lsls	r4, r4, #16
 800175c:	19be      	adds	r6, r7, r6
 800175e:	4464      	add	r4, ip
 8001760:	4442      	add	r2, r8
 8001762:	468c      	mov	ip, r1
 8001764:	42b3      	cmp	r3, r6
 8001766:	d903      	bls.n	8001770 <__aeabi_dmul+0x2a0>
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	025b      	lsls	r3, r3, #9
 800176c:	4698      	mov	r8, r3
 800176e:	4440      	add	r0, r8
 8001770:	9b02      	ldr	r3, [sp, #8]
 8001772:	4661      	mov	r1, ip
 8001774:	4698      	mov	r8, r3
 8001776:	9b04      	ldr	r3, [sp, #16]
 8001778:	0437      	lsls	r7, r6, #16
 800177a:	4443      	add	r3, r8
 800177c:	469b      	mov	fp, r3
 800177e:	45ab      	cmp	fp, r5
 8001780:	41ad      	sbcs	r5, r5
 8001782:	426b      	negs	r3, r5
 8001784:	040d      	lsls	r5, r1, #16
 8001786:	9905      	ldr	r1, [sp, #20]
 8001788:	0c2d      	lsrs	r5, r5, #16
 800178a:	468c      	mov	ip, r1
 800178c:	197f      	adds	r7, r7, r5
 800178e:	4467      	add	r7, ip
 8001790:	18fd      	adds	r5, r7, r3
 8001792:	46a8      	mov	r8, r5
 8001794:	465d      	mov	r5, fp
 8001796:	192d      	adds	r5, r5, r4
 8001798:	42a5      	cmp	r5, r4
 800179a:	41a4      	sbcs	r4, r4
 800179c:	4693      	mov	fp, r2
 800179e:	4264      	negs	r4, r4
 80017a0:	46a4      	mov	ip, r4
 80017a2:	44c3      	add	fp, r8
 80017a4:	44dc      	add	ip, fp
 80017a6:	428f      	cmp	r7, r1
 80017a8:	41bf      	sbcs	r7, r7
 80017aa:	4598      	cmp	r8, r3
 80017ac:	419b      	sbcs	r3, r3
 80017ae:	4593      	cmp	fp, r2
 80017b0:	4192      	sbcs	r2, r2
 80017b2:	45a4      	cmp	ip, r4
 80017b4:	41a4      	sbcs	r4, r4
 80017b6:	425b      	negs	r3, r3
 80017b8:	427f      	negs	r7, r7
 80017ba:	431f      	orrs	r7, r3
 80017bc:	0c36      	lsrs	r6, r6, #16
 80017be:	4252      	negs	r2, r2
 80017c0:	4264      	negs	r4, r4
 80017c2:	19bf      	adds	r7, r7, r6
 80017c4:	4322      	orrs	r2, r4
 80017c6:	18bf      	adds	r7, r7, r2
 80017c8:	4662      	mov	r2, ip
 80017ca:	1838      	adds	r0, r7, r0
 80017cc:	0243      	lsls	r3, r0, #9
 80017ce:	0dd2      	lsrs	r2, r2, #23
 80017d0:	9903      	ldr	r1, [sp, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	026a      	lsls	r2, r5, #9
 80017d6:	430a      	orrs	r2, r1
 80017d8:	1e50      	subs	r0, r2, #1
 80017da:	4182      	sbcs	r2, r0
 80017dc:	4661      	mov	r1, ip
 80017de:	0ded      	lsrs	r5, r5, #23
 80017e0:	432a      	orrs	r2, r5
 80017e2:	024e      	lsls	r6, r1, #9
 80017e4:	4332      	orrs	r2, r6
 80017e6:	01d9      	lsls	r1, r3, #7
 80017e8:	d400      	bmi.n	80017ec <__aeabi_dmul+0x31c>
 80017ea:	e0b3      	b.n	8001954 <__aeabi_dmul+0x484>
 80017ec:	2601      	movs	r6, #1
 80017ee:	0850      	lsrs	r0, r2, #1
 80017f0:	4032      	ands	r2, r6
 80017f2:	4302      	orrs	r2, r0
 80017f4:	07de      	lsls	r6, r3, #31
 80017f6:	4332      	orrs	r2, r6
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	4c22      	ldr	r4, [pc, #136]	; (8001884 <__aeabi_dmul+0x3b4>)
 80017fc:	4454      	add	r4, sl
 80017fe:	2c00      	cmp	r4, #0
 8001800:	dd62      	ble.n	80018c8 <__aeabi_dmul+0x3f8>
 8001802:	0751      	lsls	r1, r2, #29
 8001804:	d009      	beq.n	800181a <__aeabi_dmul+0x34a>
 8001806:	200f      	movs	r0, #15
 8001808:	4010      	ands	r0, r2
 800180a:	2804      	cmp	r0, #4
 800180c:	d005      	beq.n	800181a <__aeabi_dmul+0x34a>
 800180e:	1d10      	adds	r0, r2, #4
 8001810:	4290      	cmp	r0, r2
 8001812:	4192      	sbcs	r2, r2
 8001814:	4252      	negs	r2, r2
 8001816:	189b      	adds	r3, r3, r2
 8001818:	0002      	movs	r2, r0
 800181a:	01d9      	lsls	r1, r3, #7
 800181c:	d504      	bpl.n	8001828 <__aeabi_dmul+0x358>
 800181e:	2480      	movs	r4, #128	; 0x80
 8001820:	4819      	ldr	r0, [pc, #100]	; (8001888 <__aeabi_dmul+0x3b8>)
 8001822:	00e4      	lsls	r4, r4, #3
 8001824:	4003      	ands	r3, r0
 8001826:	4454      	add	r4, sl
 8001828:	4818      	ldr	r0, [pc, #96]	; (800188c <__aeabi_dmul+0x3bc>)
 800182a:	4284      	cmp	r4, r0
 800182c:	dd00      	ble.n	8001830 <__aeabi_dmul+0x360>
 800182e:	e727      	b.n	8001680 <__aeabi_dmul+0x1b0>
 8001830:	075e      	lsls	r6, r3, #29
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	08d2      	lsrs	r2, r2, #3
 8001836:	0b1f      	lsrs	r7, r3, #12
 8001838:	0563      	lsls	r3, r4, #21
 800183a:	4316      	orrs	r6, r2
 800183c:	0d5b      	lsrs	r3, r3, #21
 800183e:	e6b2      	b.n	80015a6 <__aeabi_dmul+0xd6>
 8001840:	2300      	movs	r3, #0
 8001842:	4699      	mov	r9, r3
 8001844:	3301      	adds	r3, #1
 8001846:	2704      	movs	r7, #4
 8001848:	2600      	movs	r6, #0
 800184a:	469b      	mov	fp, r3
 800184c:	e664      	b.n	8001518 <__aeabi_dmul+0x48>
 800184e:	2303      	movs	r3, #3
 8001850:	9701      	str	r7, [sp, #4]
 8001852:	4681      	mov	r9, r0
 8001854:	270c      	movs	r7, #12
 8001856:	469b      	mov	fp, r3
 8001858:	e65e      	b.n	8001518 <__aeabi_dmul+0x48>
 800185a:	2201      	movs	r2, #1
 800185c:	2001      	movs	r0, #1
 800185e:	4317      	orrs	r7, r2
 8001860:	2200      	movs	r2, #0
 8001862:	e676      	b.n	8001552 <__aeabi_dmul+0x82>
 8001864:	2303      	movs	r3, #3
 8001866:	2003      	movs	r0, #3
 8001868:	431f      	orrs	r7, r3
 800186a:	4643      	mov	r3, r8
 800186c:	e671      	b.n	8001552 <__aeabi_dmul+0x82>
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	000007ff 	.word	0x000007ff
 8001874:	fffffc01 	.word	0xfffffc01
 8001878:	08007e68 	.word	0x08007e68
 800187c:	800fffff 	.word	0x800fffff
 8001880:	fffffc0d 	.word	0xfffffc0d
 8001884:	000003ff 	.word	0x000003ff
 8001888:	feffffff 	.word	0xfeffffff
 800188c:	000007fe 	.word	0x000007fe
 8001890:	2300      	movs	r3, #0
 8001892:	2780      	movs	r7, #128	; 0x80
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	033f      	lsls	r7, r7, #12
 8001898:	2600      	movs	r6, #0
 800189a:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <__aeabi_dmul+0x4d8>)
 800189c:	e683      	b.n	80015a6 <__aeabi_dmul+0xd6>
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	0032      	movs	r2, r6
 80018a2:	46a4      	mov	ip, r4
 80018a4:	4658      	mov	r0, fp
 80018a6:	e670      	b.n	800158a <__aeabi_dmul+0xba>
 80018a8:	46ac      	mov	ip, r5
 80018aa:	e66e      	b.n	800158a <__aeabi_dmul+0xba>
 80018ac:	2780      	movs	r7, #128	; 0x80
 80018ae:	9901      	ldr	r1, [sp, #4]
 80018b0:	033f      	lsls	r7, r7, #12
 80018b2:	4239      	tst	r1, r7
 80018b4:	d02d      	beq.n	8001912 <__aeabi_dmul+0x442>
 80018b6:	423b      	tst	r3, r7
 80018b8:	d12b      	bne.n	8001912 <__aeabi_dmul+0x442>
 80018ba:	431f      	orrs	r7, r3
 80018bc:	033f      	lsls	r7, r7, #12
 80018be:	0b3f      	lsrs	r7, r7, #12
 80018c0:	9500      	str	r5, [sp, #0]
 80018c2:	0016      	movs	r6, r2
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <__aeabi_dmul+0x4d8>)
 80018c6:	e66e      	b.n	80015a6 <__aeabi_dmul+0xd6>
 80018c8:	2501      	movs	r5, #1
 80018ca:	1b2d      	subs	r5, r5, r4
 80018cc:	2d38      	cmp	r5, #56	; 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dmul+0x402>
 80018d0:	e666      	b.n	80015a0 <__aeabi_dmul+0xd0>
 80018d2:	2d1f      	cmp	r5, #31
 80018d4:	dc40      	bgt.n	8001958 <__aeabi_dmul+0x488>
 80018d6:	4835      	ldr	r0, [pc, #212]	; (80019ac <__aeabi_dmul+0x4dc>)
 80018d8:	001c      	movs	r4, r3
 80018da:	4450      	add	r0, sl
 80018dc:	0016      	movs	r6, r2
 80018de:	4082      	lsls	r2, r0
 80018e0:	4084      	lsls	r4, r0
 80018e2:	40ee      	lsrs	r6, r5
 80018e4:	1e50      	subs	r0, r2, #1
 80018e6:	4182      	sbcs	r2, r0
 80018e8:	4334      	orrs	r4, r6
 80018ea:	4314      	orrs	r4, r2
 80018ec:	40eb      	lsrs	r3, r5
 80018ee:	0762      	lsls	r2, r4, #29
 80018f0:	d009      	beq.n	8001906 <__aeabi_dmul+0x436>
 80018f2:	220f      	movs	r2, #15
 80018f4:	4022      	ands	r2, r4
 80018f6:	2a04      	cmp	r2, #4
 80018f8:	d005      	beq.n	8001906 <__aeabi_dmul+0x436>
 80018fa:	0022      	movs	r2, r4
 80018fc:	1d14      	adds	r4, r2, #4
 80018fe:	4294      	cmp	r4, r2
 8001900:	4180      	sbcs	r0, r0
 8001902:	4240      	negs	r0, r0
 8001904:	181b      	adds	r3, r3, r0
 8001906:	021a      	lsls	r2, r3, #8
 8001908:	d53e      	bpl.n	8001988 <__aeabi_dmul+0x4b8>
 800190a:	2301      	movs	r3, #1
 800190c:	2700      	movs	r7, #0
 800190e:	2600      	movs	r6, #0
 8001910:	e649      	b.n	80015a6 <__aeabi_dmul+0xd6>
 8001912:	2780      	movs	r7, #128	; 0x80
 8001914:	9b01      	ldr	r3, [sp, #4]
 8001916:	033f      	lsls	r7, r7, #12
 8001918:	431f      	orrs	r7, r3
 800191a:	033f      	lsls	r7, r7, #12
 800191c:	0b3f      	lsrs	r7, r7, #12
 800191e:	9400      	str	r4, [sp, #0]
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <__aeabi_dmul+0x4d8>)
 8001922:	e640      	b.n	80015a6 <__aeabi_dmul+0xd6>
 8001924:	0003      	movs	r3, r0
 8001926:	465a      	mov	r2, fp
 8001928:	3b28      	subs	r3, #40	; 0x28
 800192a:	409a      	lsls	r2, r3
 800192c:	2600      	movs	r6, #0
 800192e:	9201      	str	r2, [sp, #4]
 8001930:	e66d      	b.n	800160e <__aeabi_dmul+0x13e>
 8001932:	4658      	mov	r0, fp
 8001934:	f000 fc28 	bl	8002188 <__clzsi2>
 8001938:	3020      	adds	r0, #32
 800193a:	e657      	b.n	80015ec <__aeabi_dmul+0x11c>
 800193c:	0003      	movs	r3, r0
 800193e:	4652      	mov	r2, sl
 8001940:	3b28      	subs	r3, #40	; 0x28
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	2200      	movs	r2, #0
 8001948:	e693      	b.n	8001672 <__aeabi_dmul+0x1a2>
 800194a:	4650      	mov	r0, sl
 800194c:	f000 fc1c 	bl	8002188 <__clzsi2>
 8001950:	3020      	adds	r0, #32
 8001952:	e67b      	b.n	800164c <__aeabi_dmul+0x17c>
 8001954:	46ca      	mov	sl, r9
 8001956:	e750      	b.n	80017fa <__aeabi_dmul+0x32a>
 8001958:	201f      	movs	r0, #31
 800195a:	001e      	movs	r6, r3
 800195c:	4240      	negs	r0, r0
 800195e:	1b04      	subs	r4, r0, r4
 8001960:	40e6      	lsrs	r6, r4
 8001962:	2d20      	cmp	r5, #32
 8001964:	d003      	beq.n	800196e <__aeabi_dmul+0x49e>
 8001966:	4c12      	ldr	r4, [pc, #72]	; (80019b0 <__aeabi_dmul+0x4e0>)
 8001968:	4454      	add	r4, sl
 800196a:	40a3      	lsls	r3, r4
 800196c:	431a      	orrs	r2, r3
 800196e:	1e50      	subs	r0, r2, #1
 8001970:	4182      	sbcs	r2, r0
 8001972:	4332      	orrs	r2, r6
 8001974:	2607      	movs	r6, #7
 8001976:	2700      	movs	r7, #0
 8001978:	4016      	ands	r6, r2
 800197a:	d009      	beq.n	8001990 <__aeabi_dmul+0x4c0>
 800197c:	200f      	movs	r0, #15
 800197e:	2300      	movs	r3, #0
 8001980:	4010      	ands	r0, r2
 8001982:	0014      	movs	r4, r2
 8001984:	2804      	cmp	r0, #4
 8001986:	d1b9      	bne.n	80018fc <__aeabi_dmul+0x42c>
 8001988:	0022      	movs	r2, r4
 800198a:	075e      	lsls	r6, r3, #29
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	0b1f      	lsrs	r7, r3, #12
 8001990:	08d2      	lsrs	r2, r2, #3
 8001992:	4316      	orrs	r6, r2
 8001994:	2300      	movs	r3, #0
 8001996:	e606      	b.n	80015a6 <__aeabi_dmul+0xd6>
 8001998:	2780      	movs	r7, #128	; 0x80
 800199a:	033f      	lsls	r7, r7, #12
 800199c:	431f      	orrs	r7, r3
 800199e:	033f      	lsls	r7, r7, #12
 80019a0:	0b3f      	lsrs	r7, r7, #12
 80019a2:	0016      	movs	r6, r2
 80019a4:	4b00      	ldr	r3, [pc, #0]	; (80019a8 <__aeabi_dmul+0x4d8>)
 80019a6:	e5fe      	b.n	80015a6 <__aeabi_dmul+0xd6>
 80019a8:	000007ff 	.word	0x000007ff
 80019ac:	0000041e 	.word	0x0000041e
 80019b0:	0000043e 	.word	0x0000043e

080019b4 <__aeabi_dsub>:
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	4657      	mov	r7, sl
 80019b8:	464e      	mov	r6, r9
 80019ba:	4645      	mov	r5, r8
 80019bc:	46de      	mov	lr, fp
 80019be:	000c      	movs	r4, r1
 80019c0:	0309      	lsls	r1, r1, #12
 80019c2:	b5e0      	push	{r5, r6, r7, lr}
 80019c4:	0a49      	lsrs	r1, r1, #9
 80019c6:	0f46      	lsrs	r6, r0, #29
 80019c8:	005f      	lsls	r7, r3, #1
 80019ca:	4331      	orrs	r1, r6
 80019cc:	031e      	lsls	r6, r3, #12
 80019ce:	0fdb      	lsrs	r3, r3, #31
 80019d0:	0a76      	lsrs	r6, r6, #9
 80019d2:	469b      	mov	fp, r3
 80019d4:	0f53      	lsrs	r3, r2, #29
 80019d6:	4333      	orrs	r3, r6
 80019d8:	4ec8      	ldr	r6, [pc, #800]	; (8001cfc <__aeabi_dsub+0x348>)
 80019da:	0065      	lsls	r5, r4, #1
 80019dc:	00c0      	lsls	r0, r0, #3
 80019de:	0fe4      	lsrs	r4, r4, #31
 80019e0:	00d2      	lsls	r2, r2, #3
 80019e2:	0d6d      	lsrs	r5, r5, #21
 80019e4:	46a2      	mov	sl, r4
 80019e6:	4681      	mov	r9, r0
 80019e8:	0d7f      	lsrs	r7, r7, #21
 80019ea:	469c      	mov	ip, r3
 80019ec:	4690      	mov	r8, r2
 80019ee:	42b7      	cmp	r7, r6
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x40>
 80019f2:	e0b9      	b.n	8001b68 <__aeabi_dsub+0x1b4>
 80019f4:	465b      	mov	r3, fp
 80019f6:	2601      	movs	r6, #1
 80019f8:	4073      	eors	r3, r6
 80019fa:	469b      	mov	fp, r3
 80019fc:	1bee      	subs	r6, r5, r7
 80019fe:	45a3      	cmp	fp, r4
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x50>
 8001a02:	e083      	b.n	8001b0c <__aeabi_dsub+0x158>
 8001a04:	2e00      	cmp	r6, #0
 8001a06:	dd63      	ble.n	8001ad0 <__aeabi_dsub+0x11c>
 8001a08:	2f00      	cmp	r7, #0
 8001a0a:	d000      	beq.n	8001a0e <__aeabi_dsub+0x5a>
 8001a0c:	e0b1      	b.n	8001b72 <__aeabi_dsub+0x1be>
 8001a0e:	4663      	mov	r3, ip
 8001a10:	4313      	orrs	r3, r2
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x62>
 8001a14:	e123      	b.n	8001c5e <__aeabi_dsub+0x2aa>
 8001a16:	1e73      	subs	r3, r6, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d000      	beq.n	8001a1e <__aeabi_dsub+0x6a>
 8001a1c:	e1ba      	b.n	8001d94 <__aeabi_dsub+0x3e0>
 8001a1e:	1a86      	subs	r6, r0, r2
 8001a20:	4663      	mov	r3, ip
 8001a22:	42b0      	cmp	r0, r6
 8001a24:	4180      	sbcs	r0, r0
 8001a26:	2501      	movs	r5, #1
 8001a28:	1ac9      	subs	r1, r1, r3
 8001a2a:	4240      	negs	r0, r0
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	020b      	lsls	r3, r1, #8
 8001a30:	d400      	bmi.n	8001a34 <__aeabi_dsub+0x80>
 8001a32:	e147      	b.n	8001cc4 <__aeabi_dsub+0x310>
 8001a34:	0249      	lsls	r1, r1, #9
 8001a36:	0a4b      	lsrs	r3, r1, #9
 8001a38:	4698      	mov	r8, r3
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dsub+0x8e>
 8001a40:	e189      	b.n	8001d56 <__aeabi_dsub+0x3a2>
 8001a42:	4640      	mov	r0, r8
 8001a44:	f000 fba0 	bl	8002188 <__clzsi2>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	2b1f      	cmp	r3, #31
 8001a4e:	dd00      	ble.n	8001a52 <__aeabi_dsub+0x9e>
 8001a50:	e17c      	b.n	8001d4c <__aeabi_dsub+0x398>
 8001a52:	2220      	movs	r2, #32
 8001a54:	0030      	movs	r0, r6
 8001a56:	1ad2      	subs	r2, r2, r3
 8001a58:	4641      	mov	r1, r8
 8001a5a:	40d0      	lsrs	r0, r2
 8001a5c:	4099      	lsls	r1, r3
 8001a5e:	0002      	movs	r2, r0
 8001a60:	409e      	lsls	r6, r3
 8001a62:	430a      	orrs	r2, r1
 8001a64:	429d      	cmp	r5, r3
 8001a66:	dd00      	ble.n	8001a6a <__aeabi_dsub+0xb6>
 8001a68:	e16a      	b.n	8001d40 <__aeabi_dsub+0x38c>
 8001a6a:	1b5d      	subs	r5, r3, r5
 8001a6c:	1c6b      	adds	r3, r5, #1
 8001a6e:	2b1f      	cmp	r3, #31
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_dsub+0xc0>
 8001a72:	e194      	b.n	8001d9e <__aeabi_dsub+0x3ea>
 8001a74:	2120      	movs	r1, #32
 8001a76:	0010      	movs	r0, r2
 8001a78:	0035      	movs	r5, r6
 8001a7a:	1ac9      	subs	r1, r1, r3
 8001a7c:	408e      	lsls	r6, r1
 8001a7e:	40da      	lsrs	r2, r3
 8001a80:	4088      	lsls	r0, r1
 8001a82:	40dd      	lsrs	r5, r3
 8001a84:	1e71      	subs	r1, r6, #1
 8001a86:	418e      	sbcs	r6, r1
 8001a88:	0011      	movs	r1, r2
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4328      	orrs	r0, r5
 8001a8e:	2500      	movs	r5, #0
 8001a90:	4306      	orrs	r6, r0
 8001a92:	4032      	ands	r2, r6
 8001a94:	2a00      	cmp	r2, #0
 8001a96:	d009      	beq.n	8001aac <__aeabi_dsub+0xf8>
 8001a98:	230f      	movs	r3, #15
 8001a9a:	4033      	ands	r3, r6
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d005      	beq.n	8001aac <__aeabi_dsub+0xf8>
 8001aa0:	1d33      	adds	r3, r6, #4
 8001aa2:	42b3      	cmp	r3, r6
 8001aa4:	41b6      	sbcs	r6, r6
 8001aa6:	4276      	negs	r6, r6
 8001aa8:	1989      	adds	r1, r1, r6
 8001aaa:	001e      	movs	r6, r3
 8001aac:	020b      	lsls	r3, r1, #8
 8001aae:	d400      	bmi.n	8001ab2 <__aeabi_dsub+0xfe>
 8001ab0:	e23d      	b.n	8001f2e <__aeabi_dsub+0x57a>
 8001ab2:	1c6a      	adds	r2, r5, #1
 8001ab4:	4b91      	ldr	r3, [pc, #580]	; (8001cfc <__aeabi_dsub+0x348>)
 8001ab6:	0555      	lsls	r5, r2, #21
 8001ab8:	0d6d      	lsrs	r5, r5, #21
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_dsub+0x10c>
 8001abe:	e119      	b.n	8001cf4 <__aeabi_dsub+0x340>
 8001ac0:	4a8f      	ldr	r2, [pc, #572]	; (8001d00 <__aeabi_dsub+0x34c>)
 8001ac2:	08f6      	lsrs	r6, r6, #3
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	0757      	lsls	r7, r2, #29
 8001ac8:	0252      	lsls	r2, r2, #9
 8001aca:	4337      	orrs	r7, r6
 8001acc:	0b12      	lsrs	r2, r2, #12
 8001ace:	e09b      	b.n	8001c08 <__aeabi_dsub+0x254>
 8001ad0:	2e00      	cmp	r6, #0
 8001ad2:	d000      	beq.n	8001ad6 <__aeabi_dsub+0x122>
 8001ad4:	e0c5      	b.n	8001c62 <__aeabi_dsub+0x2ae>
 8001ad6:	1c6e      	adds	r6, r5, #1
 8001ad8:	0576      	lsls	r6, r6, #21
 8001ada:	0d76      	lsrs	r6, r6, #21
 8001adc:	2e01      	cmp	r6, #1
 8001ade:	dc00      	bgt.n	8001ae2 <__aeabi_dsub+0x12e>
 8001ae0:	e148      	b.n	8001d74 <__aeabi_dsub+0x3c0>
 8001ae2:	4667      	mov	r7, ip
 8001ae4:	1a86      	subs	r6, r0, r2
 8001ae6:	1bcb      	subs	r3, r1, r7
 8001ae8:	42b0      	cmp	r0, r6
 8001aea:	41bf      	sbcs	r7, r7
 8001aec:	427f      	negs	r7, r7
 8001aee:	46b8      	mov	r8, r7
 8001af0:	001f      	movs	r7, r3
 8001af2:	4643      	mov	r3, r8
 8001af4:	1aff      	subs	r7, r7, r3
 8001af6:	003b      	movs	r3, r7
 8001af8:	46b8      	mov	r8, r7
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	d500      	bpl.n	8001b00 <__aeabi_dsub+0x14c>
 8001afe:	e15f      	b.n	8001dc0 <__aeabi_dsub+0x40c>
 8001b00:	4337      	orrs	r7, r6
 8001b02:	d19a      	bne.n	8001a3a <__aeabi_dsub+0x86>
 8001b04:	2200      	movs	r2, #0
 8001b06:	2400      	movs	r4, #0
 8001b08:	2500      	movs	r5, #0
 8001b0a:	e079      	b.n	8001c00 <__aeabi_dsub+0x24c>
 8001b0c:	2e00      	cmp	r6, #0
 8001b0e:	dc00      	bgt.n	8001b12 <__aeabi_dsub+0x15e>
 8001b10:	e0fa      	b.n	8001d08 <__aeabi_dsub+0x354>
 8001b12:	2f00      	cmp	r7, #0
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x164>
 8001b16:	e08d      	b.n	8001c34 <__aeabi_dsub+0x280>
 8001b18:	4b78      	ldr	r3, [pc, #480]	; (8001cfc <__aeabi_dsub+0x348>)
 8001b1a:	429d      	cmp	r5, r3
 8001b1c:	d067      	beq.n	8001bee <__aeabi_dsub+0x23a>
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	4667      	mov	r7, ip
 8001b22:	041b      	lsls	r3, r3, #16
 8001b24:	431f      	orrs	r7, r3
 8001b26:	46bc      	mov	ip, r7
 8001b28:	2e38      	cmp	r6, #56	; 0x38
 8001b2a:	dc00      	bgt.n	8001b2e <__aeabi_dsub+0x17a>
 8001b2c:	e152      	b.n	8001dd4 <__aeabi_dsub+0x420>
 8001b2e:	4663      	mov	r3, ip
 8001b30:	4313      	orrs	r3, r2
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	4193      	sbcs	r3, r2
 8001b36:	181e      	adds	r6, r3, r0
 8001b38:	4286      	cmp	r6, r0
 8001b3a:	4180      	sbcs	r0, r0
 8001b3c:	4240      	negs	r0, r0
 8001b3e:	1809      	adds	r1, r1, r0
 8001b40:	020b      	lsls	r3, r1, #8
 8001b42:	d400      	bmi.n	8001b46 <__aeabi_dsub+0x192>
 8001b44:	e0be      	b.n	8001cc4 <__aeabi_dsub+0x310>
 8001b46:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <__aeabi_dsub+0x348>)
 8001b48:	3501      	adds	r5, #1
 8001b4a:	429d      	cmp	r5, r3
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dsub+0x19c>
 8001b4e:	e0d2      	b.n	8001cf6 <__aeabi_dsub+0x342>
 8001b50:	4a6b      	ldr	r2, [pc, #428]	; (8001d00 <__aeabi_dsub+0x34c>)
 8001b52:	0873      	lsrs	r3, r6, #1
 8001b54:	400a      	ands	r2, r1
 8001b56:	2101      	movs	r1, #1
 8001b58:	400e      	ands	r6, r1
 8001b5a:	431e      	orrs	r6, r3
 8001b5c:	0851      	lsrs	r1, r2, #1
 8001b5e:	07d3      	lsls	r3, r2, #31
 8001b60:	2207      	movs	r2, #7
 8001b62:	431e      	orrs	r6, r3
 8001b64:	4032      	ands	r2, r6
 8001b66:	e795      	b.n	8001a94 <__aeabi_dsub+0xe0>
 8001b68:	001e      	movs	r6, r3
 8001b6a:	4316      	orrs	r6, r2
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_dsub+0x1bc>
 8001b6e:	e745      	b.n	80019fc <__aeabi_dsub+0x48>
 8001b70:	e740      	b.n	80019f4 <__aeabi_dsub+0x40>
 8001b72:	4b62      	ldr	r3, [pc, #392]	; (8001cfc <__aeabi_dsub+0x348>)
 8001b74:	429d      	cmp	r5, r3
 8001b76:	d03a      	beq.n	8001bee <__aeabi_dsub+0x23a>
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	4667      	mov	r7, ip
 8001b7c:	041b      	lsls	r3, r3, #16
 8001b7e:	431f      	orrs	r7, r3
 8001b80:	46bc      	mov	ip, r7
 8001b82:	2e38      	cmp	r6, #56	; 0x38
 8001b84:	dd00      	ble.n	8001b88 <__aeabi_dsub+0x1d4>
 8001b86:	e0eb      	b.n	8001d60 <__aeabi_dsub+0x3ac>
 8001b88:	2e1f      	cmp	r6, #31
 8001b8a:	dc00      	bgt.n	8001b8e <__aeabi_dsub+0x1da>
 8001b8c:	e13a      	b.n	8001e04 <__aeabi_dsub+0x450>
 8001b8e:	0033      	movs	r3, r6
 8001b90:	4667      	mov	r7, ip
 8001b92:	3b20      	subs	r3, #32
 8001b94:	40df      	lsrs	r7, r3
 8001b96:	003b      	movs	r3, r7
 8001b98:	2e20      	cmp	r6, #32
 8001b9a:	d005      	beq.n	8001ba8 <__aeabi_dsub+0x1f4>
 8001b9c:	2740      	movs	r7, #64	; 0x40
 8001b9e:	1bbf      	subs	r7, r7, r6
 8001ba0:	4666      	mov	r6, ip
 8001ba2:	40be      	lsls	r6, r7
 8001ba4:	4332      	orrs	r2, r6
 8001ba6:	4690      	mov	r8, r2
 8001ba8:	4646      	mov	r6, r8
 8001baa:	1e72      	subs	r2, r6, #1
 8001bac:	4196      	sbcs	r6, r2
 8001bae:	4333      	orrs	r3, r6
 8001bb0:	e0da      	b.n	8001d68 <__aeabi_dsub+0x3b4>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x204>
 8001bb6:	e214      	b.n	8001fe2 <__aeabi_dsub+0x62e>
 8001bb8:	4663      	mov	r3, ip
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x20c>
 8001bbe:	e168      	b.n	8001e92 <__aeabi_dsub+0x4de>
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	074e      	lsls	r6, r1, #29
 8001bc4:	08c0      	lsrs	r0, r0, #3
 8001bc6:	08c9      	lsrs	r1, r1, #3
 8001bc8:	031b      	lsls	r3, r3, #12
 8001bca:	4306      	orrs	r6, r0
 8001bcc:	4219      	tst	r1, r3
 8001bce:	d008      	beq.n	8001be2 <__aeabi_dsub+0x22e>
 8001bd0:	4660      	mov	r0, ip
 8001bd2:	08c0      	lsrs	r0, r0, #3
 8001bd4:	4218      	tst	r0, r3
 8001bd6:	d104      	bne.n	8001be2 <__aeabi_dsub+0x22e>
 8001bd8:	4663      	mov	r3, ip
 8001bda:	0001      	movs	r1, r0
 8001bdc:	08d2      	lsrs	r2, r2, #3
 8001bde:	075e      	lsls	r6, r3, #29
 8001be0:	4316      	orrs	r6, r2
 8001be2:	00f3      	lsls	r3, r6, #3
 8001be4:	4699      	mov	r9, r3
 8001be6:	00c9      	lsls	r1, r1, #3
 8001be8:	0f72      	lsrs	r2, r6, #29
 8001bea:	4d44      	ldr	r5, [pc, #272]	; (8001cfc <__aeabi_dsub+0x348>)
 8001bec:	4311      	orrs	r1, r2
 8001bee:	464b      	mov	r3, r9
 8001bf0:	08de      	lsrs	r6, r3, #3
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <__aeabi_dsub+0x348>)
 8001bf4:	074f      	lsls	r7, r1, #29
 8001bf6:	4337      	orrs	r7, r6
 8001bf8:	08ca      	lsrs	r2, r1, #3
 8001bfa:	429d      	cmp	r5, r3
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x24c>
 8001bfe:	e06e      	b.n	8001cde <__aeabi_dsub+0x32a>
 8001c00:	0312      	lsls	r2, r2, #12
 8001c02:	056d      	lsls	r5, r5, #21
 8001c04:	0b12      	lsrs	r2, r2, #12
 8001c06:	0d6d      	lsrs	r5, r5, #21
 8001c08:	2100      	movs	r1, #0
 8001c0a:	0312      	lsls	r2, r2, #12
 8001c0c:	0b13      	lsrs	r3, r2, #12
 8001c0e:	0d0a      	lsrs	r2, r1, #20
 8001c10:	0512      	lsls	r2, r2, #20
 8001c12:	431a      	orrs	r2, r3
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <__aeabi_dsub+0x350>)
 8001c16:	052d      	lsls	r5, r5, #20
 8001c18:	4013      	ands	r3, r2
 8001c1a:	432b      	orrs	r3, r5
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	07e4      	lsls	r4, r4, #31
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	4323      	orrs	r3, r4
 8001c24:	0038      	movs	r0, r7
 8001c26:	0019      	movs	r1, r3
 8001c28:	bc3c      	pop	{r2, r3, r4, r5}
 8001c2a:	4690      	mov	r8, r2
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	46a2      	mov	sl, r4
 8001c30:	46ab      	mov	fp, r5
 8001c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c34:	4663      	mov	r3, ip
 8001c36:	4313      	orrs	r3, r2
 8001c38:	d011      	beq.n	8001c5e <__aeabi_dsub+0x2aa>
 8001c3a:	1e73      	subs	r3, r6, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d000      	beq.n	8001c42 <__aeabi_dsub+0x28e>
 8001c40:	e107      	b.n	8001e52 <__aeabi_dsub+0x49e>
 8001c42:	1886      	adds	r6, r0, r2
 8001c44:	4286      	cmp	r6, r0
 8001c46:	4180      	sbcs	r0, r0
 8001c48:	4461      	add	r1, ip
 8001c4a:	4240      	negs	r0, r0
 8001c4c:	1809      	adds	r1, r1, r0
 8001c4e:	2501      	movs	r5, #1
 8001c50:	020b      	lsls	r3, r1, #8
 8001c52:	d537      	bpl.n	8001cc4 <__aeabi_dsub+0x310>
 8001c54:	2502      	movs	r5, #2
 8001c56:	e77b      	b.n	8001b50 <__aeabi_dsub+0x19c>
 8001c58:	003e      	movs	r6, r7
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	0035      	movs	r5, r6
 8001c60:	e7c5      	b.n	8001bee <__aeabi_dsub+0x23a>
 8001c62:	465c      	mov	r4, fp
 8001c64:	2d00      	cmp	r5, #0
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x2b6>
 8001c68:	e0e1      	b.n	8001e2e <__aeabi_dsub+0x47a>
 8001c6a:	000b      	movs	r3, r1
 8001c6c:	4303      	orrs	r3, r0
 8001c6e:	d0f3      	beq.n	8001c58 <__aeabi_dsub+0x2a4>
 8001c70:	1c73      	adds	r3, r6, #1
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x2c2>
 8001c74:	e1ac      	b.n	8001fd0 <__aeabi_dsub+0x61c>
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <__aeabi_dsub+0x348>)
 8001c78:	429f      	cmp	r7, r3
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2ca>
 8001c7c:	e13a      	b.n	8001ef4 <__aeabi_dsub+0x540>
 8001c7e:	43f3      	mvns	r3, r6
 8001c80:	2b38      	cmp	r3, #56	; 0x38
 8001c82:	dd00      	ble.n	8001c86 <__aeabi_dsub+0x2d2>
 8001c84:	e16f      	b.n	8001f66 <__aeabi_dsub+0x5b2>
 8001c86:	2b1f      	cmp	r3, #31
 8001c88:	dd00      	ble.n	8001c8c <__aeabi_dsub+0x2d8>
 8001c8a:	e18c      	b.n	8001fa6 <__aeabi_dsub+0x5f2>
 8001c8c:	2520      	movs	r5, #32
 8001c8e:	000e      	movs	r6, r1
 8001c90:	1aed      	subs	r5, r5, r3
 8001c92:	40ae      	lsls	r6, r5
 8001c94:	46b0      	mov	r8, r6
 8001c96:	0006      	movs	r6, r0
 8001c98:	46aa      	mov	sl, r5
 8001c9a:	40de      	lsrs	r6, r3
 8001c9c:	4645      	mov	r5, r8
 8001c9e:	4335      	orrs	r5, r6
 8001ca0:	002e      	movs	r6, r5
 8001ca2:	4655      	mov	r5, sl
 8001ca4:	40d9      	lsrs	r1, r3
 8001ca6:	40a8      	lsls	r0, r5
 8001ca8:	4663      	mov	r3, ip
 8001caa:	1e45      	subs	r5, r0, #1
 8001cac:	41a8      	sbcs	r0, r5
 8001cae:	1a5b      	subs	r3, r3, r1
 8001cb0:	469c      	mov	ip, r3
 8001cb2:	4330      	orrs	r0, r6
 8001cb4:	1a16      	subs	r6, r2, r0
 8001cb6:	42b2      	cmp	r2, r6
 8001cb8:	4192      	sbcs	r2, r2
 8001cba:	4663      	mov	r3, ip
 8001cbc:	4252      	negs	r2, r2
 8001cbe:	1a99      	subs	r1, r3, r2
 8001cc0:	003d      	movs	r5, r7
 8001cc2:	e6b4      	b.n	8001a2e <__aeabi_dsub+0x7a>
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	4032      	ands	r2, r6
 8001cc8:	2a00      	cmp	r2, #0
 8001cca:	d000      	beq.n	8001cce <__aeabi_dsub+0x31a>
 8001ccc:	e6e4      	b.n	8001a98 <__aeabi_dsub+0xe4>
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <__aeabi_dsub+0x348>)
 8001cd0:	08f6      	lsrs	r6, r6, #3
 8001cd2:	074f      	lsls	r7, r1, #29
 8001cd4:	4337      	orrs	r7, r6
 8001cd6:	08ca      	lsrs	r2, r1, #3
 8001cd8:	429d      	cmp	r5, r3
 8001cda:	d000      	beq.n	8001cde <__aeabi_dsub+0x32a>
 8001cdc:	e790      	b.n	8001c00 <__aeabi_dsub+0x24c>
 8001cde:	003b      	movs	r3, r7
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x332>
 8001ce4:	e1a6      	b.n	8002034 <__aeabi_dsub+0x680>
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	031b      	lsls	r3, r3, #12
 8001cea:	431a      	orrs	r2, r3
 8001cec:	0312      	lsls	r2, r2, #12
 8001cee:	0b12      	lsrs	r2, r2, #12
 8001cf0:	4d02      	ldr	r5, [pc, #8]	; (8001cfc <__aeabi_dsub+0x348>)
 8001cf2:	e789      	b.n	8001c08 <__aeabi_dsub+0x254>
 8001cf4:	0015      	movs	r5, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2700      	movs	r7, #0
 8001cfa:	e785      	b.n	8001c08 <__aeabi_dsub+0x254>
 8001cfc:	000007ff 	.word	0x000007ff
 8001d00:	ff7fffff 	.word	0xff7fffff
 8001d04:	800fffff 	.word	0x800fffff
 8001d08:	2e00      	cmp	r6, #0
 8001d0a:	d000      	beq.n	8001d0e <__aeabi_dsub+0x35a>
 8001d0c:	e0c7      	b.n	8001e9e <__aeabi_dsub+0x4ea>
 8001d0e:	1c6b      	adds	r3, r5, #1
 8001d10:	055e      	lsls	r6, r3, #21
 8001d12:	0d76      	lsrs	r6, r6, #21
 8001d14:	2e01      	cmp	r6, #1
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x366>
 8001d18:	e0f0      	b.n	8001efc <__aeabi_dsub+0x548>
 8001d1a:	4dc8      	ldr	r5, [pc, #800]	; (800203c <__aeabi_dsub+0x688>)
 8001d1c:	42ab      	cmp	r3, r5
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x36e>
 8001d20:	e0b9      	b.n	8001e96 <__aeabi_dsub+0x4e2>
 8001d22:	1885      	adds	r5, r0, r2
 8001d24:	000a      	movs	r2, r1
 8001d26:	4285      	cmp	r5, r0
 8001d28:	4189      	sbcs	r1, r1
 8001d2a:	4462      	add	r2, ip
 8001d2c:	4249      	negs	r1, r1
 8001d2e:	1851      	adds	r1, r2, r1
 8001d30:	2207      	movs	r2, #7
 8001d32:	07ce      	lsls	r6, r1, #31
 8001d34:	086d      	lsrs	r5, r5, #1
 8001d36:	432e      	orrs	r6, r5
 8001d38:	0849      	lsrs	r1, r1, #1
 8001d3a:	4032      	ands	r2, r6
 8001d3c:	001d      	movs	r5, r3
 8001d3e:	e6a9      	b.n	8001a94 <__aeabi_dsub+0xe0>
 8001d40:	49bf      	ldr	r1, [pc, #764]	; (8002040 <__aeabi_dsub+0x68c>)
 8001d42:	1aed      	subs	r5, r5, r3
 8001d44:	4011      	ands	r1, r2
 8001d46:	2207      	movs	r2, #7
 8001d48:	4032      	ands	r2, r6
 8001d4a:	e6a3      	b.n	8001a94 <__aeabi_dsub+0xe0>
 8001d4c:	0032      	movs	r2, r6
 8001d4e:	3828      	subs	r0, #40	; 0x28
 8001d50:	4082      	lsls	r2, r0
 8001d52:	2600      	movs	r6, #0
 8001d54:	e686      	b.n	8001a64 <__aeabi_dsub+0xb0>
 8001d56:	0030      	movs	r0, r6
 8001d58:	f000 fa16 	bl	8002188 <__clzsi2>
 8001d5c:	3020      	adds	r0, #32
 8001d5e:	e673      	b.n	8001a48 <__aeabi_dsub+0x94>
 8001d60:	4663      	mov	r3, ip
 8001d62:	4313      	orrs	r3, r2
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	4193      	sbcs	r3, r2
 8001d68:	1ac6      	subs	r6, r0, r3
 8001d6a:	42b0      	cmp	r0, r6
 8001d6c:	4180      	sbcs	r0, r0
 8001d6e:	4240      	negs	r0, r0
 8001d70:	1a09      	subs	r1, r1, r0
 8001d72:	e65c      	b.n	8001a2e <__aeabi_dsub+0x7a>
 8001d74:	000e      	movs	r6, r1
 8001d76:	4667      	mov	r7, ip
 8001d78:	4306      	orrs	r6, r0
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	2d00      	cmp	r5, #0
 8001d7e:	d15e      	bne.n	8001e3e <__aeabi_dsub+0x48a>
 8001d80:	2e00      	cmp	r6, #0
 8001d82:	d000      	beq.n	8001d86 <__aeabi_dsub+0x3d2>
 8001d84:	e0f3      	b.n	8001f6e <__aeabi_dsub+0x5ba>
 8001d86:	2f00      	cmp	r7, #0
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dsub+0x3d8>
 8001d8a:	e11e      	b.n	8001fca <__aeabi_dsub+0x616>
 8001d8c:	465c      	mov	r4, fp
 8001d8e:	4661      	mov	r1, ip
 8001d90:	4691      	mov	r9, r2
 8001d92:	e72c      	b.n	8001bee <__aeabi_dsub+0x23a>
 8001d94:	4fa9      	ldr	r7, [pc, #676]	; (800203c <__aeabi_dsub+0x688>)
 8001d96:	42be      	cmp	r6, r7
 8001d98:	d07b      	beq.n	8001e92 <__aeabi_dsub+0x4de>
 8001d9a:	001e      	movs	r6, r3
 8001d9c:	e6f1      	b.n	8001b82 <__aeabi_dsub+0x1ce>
 8001d9e:	0010      	movs	r0, r2
 8001da0:	3d1f      	subs	r5, #31
 8001da2:	40e8      	lsrs	r0, r5
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d003      	beq.n	8001db0 <__aeabi_dsub+0x3fc>
 8001da8:	2140      	movs	r1, #64	; 0x40
 8001daa:	1acb      	subs	r3, r1, r3
 8001dac:	409a      	lsls	r2, r3
 8001dae:	4316      	orrs	r6, r2
 8001db0:	1e73      	subs	r3, r6, #1
 8001db2:	419e      	sbcs	r6, r3
 8001db4:	2207      	movs	r2, #7
 8001db6:	4306      	orrs	r6, r0
 8001db8:	4032      	ands	r2, r6
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2500      	movs	r5, #0
 8001dbe:	e783      	b.n	8001cc8 <__aeabi_dsub+0x314>
 8001dc0:	1a16      	subs	r6, r2, r0
 8001dc2:	4663      	mov	r3, ip
 8001dc4:	42b2      	cmp	r2, r6
 8001dc6:	4180      	sbcs	r0, r0
 8001dc8:	1a59      	subs	r1, r3, r1
 8001dca:	4240      	negs	r0, r0
 8001dcc:	1a0b      	subs	r3, r1, r0
 8001dce:	4698      	mov	r8, r3
 8001dd0:	465c      	mov	r4, fp
 8001dd2:	e632      	b.n	8001a3a <__aeabi_dsub+0x86>
 8001dd4:	2e1f      	cmp	r6, #31
 8001dd6:	dd00      	ble.n	8001dda <__aeabi_dsub+0x426>
 8001dd8:	e0ab      	b.n	8001f32 <__aeabi_dsub+0x57e>
 8001dda:	2720      	movs	r7, #32
 8001ddc:	1bbb      	subs	r3, r7, r6
 8001dde:	469a      	mov	sl, r3
 8001de0:	4663      	mov	r3, ip
 8001de2:	4657      	mov	r7, sl
 8001de4:	40bb      	lsls	r3, r7
 8001de6:	4699      	mov	r9, r3
 8001de8:	0013      	movs	r3, r2
 8001dea:	464f      	mov	r7, r9
 8001dec:	40f3      	lsrs	r3, r6
 8001dee:	431f      	orrs	r7, r3
 8001df0:	003b      	movs	r3, r7
 8001df2:	4657      	mov	r7, sl
 8001df4:	40ba      	lsls	r2, r7
 8001df6:	1e57      	subs	r7, r2, #1
 8001df8:	41ba      	sbcs	r2, r7
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	4662      	mov	r2, ip
 8001dfe:	40f2      	lsrs	r2, r6
 8001e00:	1889      	adds	r1, r1, r2
 8001e02:	e698      	b.n	8001b36 <__aeabi_dsub+0x182>
 8001e04:	2720      	movs	r7, #32
 8001e06:	1bbb      	subs	r3, r7, r6
 8001e08:	469a      	mov	sl, r3
 8001e0a:	4663      	mov	r3, ip
 8001e0c:	4657      	mov	r7, sl
 8001e0e:	40bb      	lsls	r3, r7
 8001e10:	4699      	mov	r9, r3
 8001e12:	0013      	movs	r3, r2
 8001e14:	464f      	mov	r7, r9
 8001e16:	40f3      	lsrs	r3, r6
 8001e18:	431f      	orrs	r7, r3
 8001e1a:	003b      	movs	r3, r7
 8001e1c:	4657      	mov	r7, sl
 8001e1e:	40ba      	lsls	r2, r7
 8001e20:	1e57      	subs	r7, r2, #1
 8001e22:	41ba      	sbcs	r2, r7
 8001e24:	4313      	orrs	r3, r2
 8001e26:	4662      	mov	r2, ip
 8001e28:	40f2      	lsrs	r2, r6
 8001e2a:	1a89      	subs	r1, r1, r2
 8001e2c:	e79c      	b.n	8001d68 <__aeabi_dsub+0x3b4>
 8001e2e:	4b83      	ldr	r3, [pc, #524]	; (800203c <__aeabi_dsub+0x688>)
 8001e30:	429f      	cmp	r7, r3
 8001e32:	d05f      	beq.n	8001ef4 <__aeabi_dsub+0x540>
 8001e34:	2580      	movs	r5, #128	; 0x80
 8001e36:	042d      	lsls	r5, r5, #16
 8001e38:	4273      	negs	r3, r6
 8001e3a:	4329      	orrs	r1, r5
 8001e3c:	e720      	b.n	8001c80 <__aeabi_dsub+0x2cc>
 8001e3e:	2e00      	cmp	r6, #0
 8001e40:	d10c      	bne.n	8001e5c <__aeabi_dsub+0x4a8>
 8001e42:	2f00      	cmp	r7, #0
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x494>
 8001e46:	e0d0      	b.n	8001fea <__aeabi_dsub+0x636>
 8001e48:	465c      	mov	r4, fp
 8001e4a:	4661      	mov	r1, ip
 8001e4c:	4691      	mov	r9, r2
 8001e4e:	4d7b      	ldr	r5, [pc, #492]	; (800203c <__aeabi_dsub+0x688>)
 8001e50:	e6cd      	b.n	8001bee <__aeabi_dsub+0x23a>
 8001e52:	4f7a      	ldr	r7, [pc, #488]	; (800203c <__aeabi_dsub+0x688>)
 8001e54:	42be      	cmp	r6, r7
 8001e56:	d01c      	beq.n	8001e92 <__aeabi_dsub+0x4de>
 8001e58:	001e      	movs	r6, r3
 8001e5a:	e665      	b.n	8001b28 <__aeabi_dsub+0x174>
 8001e5c:	2f00      	cmp	r7, #0
 8001e5e:	d018      	beq.n	8001e92 <__aeabi_dsub+0x4de>
 8001e60:	08c0      	lsrs	r0, r0, #3
 8001e62:	074e      	lsls	r6, r1, #29
 8001e64:	4306      	orrs	r6, r0
 8001e66:	2080      	movs	r0, #128	; 0x80
 8001e68:	08c9      	lsrs	r1, r1, #3
 8001e6a:	0300      	lsls	r0, r0, #12
 8001e6c:	4201      	tst	r1, r0
 8001e6e:	d008      	beq.n	8001e82 <__aeabi_dsub+0x4ce>
 8001e70:	4663      	mov	r3, ip
 8001e72:	08dc      	lsrs	r4, r3, #3
 8001e74:	4204      	tst	r4, r0
 8001e76:	d104      	bne.n	8001e82 <__aeabi_dsub+0x4ce>
 8001e78:	0021      	movs	r1, r4
 8001e7a:	46da      	mov	sl, fp
 8001e7c:	08d2      	lsrs	r2, r2, #3
 8001e7e:	075e      	lsls	r6, r3, #29
 8001e80:	4316      	orrs	r6, r2
 8001e82:	00f3      	lsls	r3, r6, #3
 8001e84:	4699      	mov	r9, r3
 8001e86:	2401      	movs	r4, #1
 8001e88:	4653      	mov	r3, sl
 8001e8a:	00c9      	lsls	r1, r1, #3
 8001e8c:	0f72      	lsrs	r2, r6, #29
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	401c      	ands	r4, r3
 8001e92:	4d6a      	ldr	r5, [pc, #424]	; (800203c <__aeabi_dsub+0x688>)
 8001e94:	e6ab      	b.n	8001bee <__aeabi_dsub+0x23a>
 8001e96:	001d      	movs	r5, r3
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2700      	movs	r7, #0
 8001e9c:	e6b4      	b.n	8001c08 <__aeabi_dsub+0x254>
 8001e9e:	2d00      	cmp	r5, #0
 8001ea0:	d159      	bne.n	8001f56 <__aeabi_dsub+0x5a2>
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	4303      	orrs	r3, r0
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0x4f6>
 8001ea8:	e6d6      	b.n	8001c58 <__aeabi_dsub+0x2a4>
 8001eaa:	1c73      	adds	r3, r6, #1
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x4fc>
 8001eae:	e0b2      	b.n	8002016 <__aeabi_dsub+0x662>
 8001eb0:	4b62      	ldr	r3, [pc, #392]	; (800203c <__aeabi_dsub+0x688>)
 8001eb2:	429f      	cmp	r7, r3
 8001eb4:	d01e      	beq.n	8001ef4 <__aeabi_dsub+0x540>
 8001eb6:	43f3      	mvns	r3, r6
 8001eb8:	2b38      	cmp	r3, #56	; 0x38
 8001eba:	dc6f      	bgt.n	8001f9c <__aeabi_dsub+0x5e8>
 8001ebc:	2b1f      	cmp	r3, #31
 8001ebe:	dd00      	ble.n	8001ec2 <__aeabi_dsub+0x50e>
 8001ec0:	e097      	b.n	8001ff2 <__aeabi_dsub+0x63e>
 8001ec2:	2520      	movs	r5, #32
 8001ec4:	000e      	movs	r6, r1
 8001ec6:	1aed      	subs	r5, r5, r3
 8001ec8:	40ae      	lsls	r6, r5
 8001eca:	46b0      	mov	r8, r6
 8001ecc:	0006      	movs	r6, r0
 8001ece:	46aa      	mov	sl, r5
 8001ed0:	40de      	lsrs	r6, r3
 8001ed2:	4645      	mov	r5, r8
 8001ed4:	4335      	orrs	r5, r6
 8001ed6:	002e      	movs	r6, r5
 8001ed8:	4655      	mov	r5, sl
 8001eda:	40a8      	lsls	r0, r5
 8001edc:	40d9      	lsrs	r1, r3
 8001ede:	1e45      	subs	r5, r0, #1
 8001ee0:	41a8      	sbcs	r0, r5
 8001ee2:	448c      	add	ip, r1
 8001ee4:	4306      	orrs	r6, r0
 8001ee6:	18b6      	adds	r6, r6, r2
 8001ee8:	4296      	cmp	r6, r2
 8001eea:	4192      	sbcs	r2, r2
 8001eec:	4251      	negs	r1, r2
 8001eee:	4461      	add	r1, ip
 8001ef0:	003d      	movs	r5, r7
 8001ef2:	e625      	b.n	8001b40 <__aeabi_dsub+0x18c>
 8001ef4:	003d      	movs	r5, r7
 8001ef6:	4661      	mov	r1, ip
 8001ef8:	4691      	mov	r9, r2
 8001efa:	e678      	b.n	8001bee <__aeabi_dsub+0x23a>
 8001efc:	000b      	movs	r3, r1
 8001efe:	4303      	orrs	r3, r0
 8001f00:	2d00      	cmp	r5, #0
 8001f02:	d000      	beq.n	8001f06 <__aeabi_dsub+0x552>
 8001f04:	e655      	b.n	8001bb2 <__aeabi_dsub+0x1fe>
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f5      	beq.n	8001ef6 <__aeabi_dsub+0x542>
 8001f0a:	4663      	mov	r3, ip
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_dsub+0x55e>
 8001f10:	e66d      	b.n	8001bee <__aeabi_dsub+0x23a>
 8001f12:	1886      	adds	r6, r0, r2
 8001f14:	4286      	cmp	r6, r0
 8001f16:	4180      	sbcs	r0, r0
 8001f18:	4461      	add	r1, ip
 8001f1a:	4240      	negs	r0, r0
 8001f1c:	1809      	adds	r1, r1, r0
 8001f1e:	2200      	movs	r2, #0
 8001f20:	020b      	lsls	r3, r1, #8
 8001f22:	d400      	bmi.n	8001f26 <__aeabi_dsub+0x572>
 8001f24:	e6d0      	b.n	8001cc8 <__aeabi_dsub+0x314>
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <__aeabi_dsub+0x68c>)
 8001f28:	3501      	adds	r5, #1
 8001f2a:	4019      	ands	r1, r3
 8001f2c:	e5b2      	b.n	8001a94 <__aeabi_dsub+0xe0>
 8001f2e:	46b1      	mov	r9, r6
 8001f30:	e65d      	b.n	8001bee <__aeabi_dsub+0x23a>
 8001f32:	0033      	movs	r3, r6
 8001f34:	4667      	mov	r7, ip
 8001f36:	3b20      	subs	r3, #32
 8001f38:	40df      	lsrs	r7, r3
 8001f3a:	003b      	movs	r3, r7
 8001f3c:	2e20      	cmp	r6, #32
 8001f3e:	d005      	beq.n	8001f4c <__aeabi_dsub+0x598>
 8001f40:	2740      	movs	r7, #64	; 0x40
 8001f42:	1bbf      	subs	r7, r7, r6
 8001f44:	4666      	mov	r6, ip
 8001f46:	40be      	lsls	r6, r7
 8001f48:	4332      	orrs	r2, r6
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	4646      	mov	r6, r8
 8001f4e:	1e72      	subs	r2, r6, #1
 8001f50:	4196      	sbcs	r6, r2
 8001f52:	4333      	orrs	r3, r6
 8001f54:	e5ef      	b.n	8001b36 <__aeabi_dsub+0x182>
 8001f56:	4b39      	ldr	r3, [pc, #228]	; (800203c <__aeabi_dsub+0x688>)
 8001f58:	429f      	cmp	r7, r3
 8001f5a:	d0cb      	beq.n	8001ef4 <__aeabi_dsub+0x540>
 8001f5c:	2580      	movs	r5, #128	; 0x80
 8001f5e:	042d      	lsls	r5, r5, #16
 8001f60:	4273      	negs	r3, r6
 8001f62:	4329      	orrs	r1, r5
 8001f64:	e7a8      	b.n	8001eb8 <__aeabi_dsub+0x504>
 8001f66:	4308      	orrs	r0, r1
 8001f68:	1e41      	subs	r1, r0, #1
 8001f6a:	4188      	sbcs	r0, r1
 8001f6c:	e6a2      	b.n	8001cb4 <__aeabi_dsub+0x300>
 8001f6e:	2f00      	cmp	r7, #0
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x5c0>
 8001f72:	e63c      	b.n	8001bee <__aeabi_dsub+0x23a>
 8001f74:	4663      	mov	r3, ip
 8001f76:	1a86      	subs	r6, r0, r2
 8001f78:	1acf      	subs	r7, r1, r3
 8001f7a:	42b0      	cmp	r0, r6
 8001f7c:	419b      	sbcs	r3, r3
 8001f7e:	425b      	negs	r3, r3
 8001f80:	1afb      	subs	r3, r7, r3
 8001f82:	4698      	mov	r8, r3
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	d54e      	bpl.n	8002026 <__aeabi_dsub+0x672>
 8001f88:	1a16      	subs	r6, r2, r0
 8001f8a:	4663      	mov	r3, ip
 8001f8c:	42b2      	cmp	r2, r6
 8001f8e:	4192      	sbcs	r2, r2
 8001f90:	1a59      	subs	r1, r3, r1
 8001f92:	4252      	negs	r2, r2
 8001f94:	1a89      	subs	r1, r1, r2
 8001f96:	465c      	mov	r4, fp
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e57b      	b.n	8001a94 <__aeabi_dsub+0xe0>
 8001f9c:	4301      	orrs	r1, r0
 8001f9e:	000e      	movs	r6, r1
 8001fa0:	1e71      	subs	r1, r6, #1
 8001fa2:	418e      	sbcs	r6, r1
 8001fa4:	e79f      	b.n	8001ee6 <__aeabi_dsub+0x532>
 8001fa6:	001d      	movs	r5, r3
 8001fa8:	000e      	movs	r6, r1
 8001faa:	3d20      	subs	r5, #32
 8001fac:	40ee      	lsrs	r6, r5
 8001fae:	46b0      	mov	r8, r6
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d004      	beq.n	8001fbe <__aeabi_dsub+0x60a>
 8001fb4:	2540      	movs	r5, #64	; 0x40
 8001fb6:	1aeb      	subs	r3, r5, r3
 8001fb8:	4099      	lsls	r1, r3
 8001fba:	4308      	orrs	r0, r1
 8001fbc:	4681      	mov	r9, r0
 8001fbe:	4648      	mov	r0, r9
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	1e41      	subs	r1, r0, #1
 8001fc4:	4188      	sbcs	r0, r1
 8001fc6:	4318      	orrs	r0, r3
 8001fc8:	e674      	b.n	8001cb4 <__aeabi_dsub+0x300>
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2400      	movs	r4, #0
 8001fce:	e617      	b.n	8001c00 <__aeabi_dsub+0x24c>
 8001fd0:	1a16      	subs	r6, r2, r0
 8001fd2:	4663      	mov	r3, ip
 8001fd4:	42b2      	cmp	r2, r6
 8001fd6:	4192      	sbcs	r2, r2
 8001fd8:	1a59      	subs	r1, r3, r1
 8001fda:	4252      	negs	r2, r2
 8001fdc:	1a89      	subs	r1, r1, r2
 8001fde:	003d      	movs	r5, r7
 8001fe0:	e525      	b.n	8001a2e <__aeabi_dsub+0x7a>
 8001fe2:	4661      	mov	r1, ip
 8001fe4:	4691      	mov	r9, r2
 8001fe6:	4d15      	ldr	r5, [pc, #84]	; (800203c <__aeabi_dsub+0x688>)
 8001fe8:	e601      	b.n	8001bee <__aeabi_dsub+0x23a>
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	2400      	movs	r4, #0
 8001fee:	0312      	lsls	r2, r2, #12
 8001ff0:	e679      	b.n	8001ce6 <__aeabi_dsub+0x332>
 8001ff2:	001d      	movs	r5, r3
 8001ff4:	000e      	movs	r6, r1
 8001ff6:	3d20      	subs	r5, #32
 8001ff8:	40ee      	lsrs	r6, r5
 8001ffa:	46b0      	mov	r8, r6
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d004      	beq.n	800200a <__aeabi_dsub+0x656>
 8002000:	2540      	movs	r5, #64	; 0x40
 8002002:	1aeb      	subs	r3, r5, r3
 8002004:	4099      	lsls	r1, r3
 8002006:	4308      	orrs	r0, r1
 8002008:	4681      	mov	r9, r0
 800200a:	464e      	mov	r6, r9
 800200c:	4643      	mov	r3, r8
 800200e:	1e71      	subs	r1, r6, #1
 8002010:	418e      	sbcs	r6, r1
 8002012:	431e      	orrs	r6, r3
 8002014:	e767      	b.n	8001ee6 <__aeabi_dsub+0x532>
 8002016:	1886      	adds	r6, r0, r2
 8002018:	4296      	cmp	r6, r2
 800201a:	419b      	sbcs	r3, r3
 800201c:	4461      	add	r1, ip
 800201e:	425b      	negs	r3, r3
 8002020:	18c9      	adds	r1, r1, r3
 8002022:	003d      	movs	r5, r7
 8002024:	e58c      	b.n	8001b40 <__aeabi_dsub+0x18c>
 8002026:	4647      	mov	r7, r8
 8002028:	4337      	orrs	r7, r6
 800202a:	d0ce      	beq.n	8001fca <__aeabi_dsub+0x616>
 800202c:	2207      	movs	r2, #7
 800202e:	4641      	mov	r1, r8
 8002030:	4032      	ands	r2, r6
 8002032:	e649      	b.n	8001cc8 <__aeabi_dsub+0x314>
 8002034:	2700      	movs	r7, #0
 8002036:	003a      	movs	r2, r7
 8002038:	e5e6      	b.n	8001c08 <__aeabi_dsub+0x254>
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	000007ff 	.word	0x000007ff
 8002040:	ff7fffff 	.word	0xff7fffff

08002044 <__aeabi_d2iz>:
 8002044:	b530      	push	{r4, r5, lr}
 8002046:	4d14      	ldr	r5, [pc, #80]	; (8002098 <__aeabi_d2iz+0x54>)
 8002048:	030a      	lsls	r2, r1, #12
 800204a:	004b      	lsls	r3, r1, #1
 800204c:	0b12      	lsrs	r2, r2, #12
 800204e:	0d5b      	lsrs	r3, r3, #21
 8002050:	0fc9      	lsrs	r1, r1, #31
 8002052:	2400      	movs	r4, #0
 8002054:	42ab      	cmp	r3, r5
 8002056:	dd11      	ble.n	800207c <__aeabi_d2iz+0x38>
 8002058:	4c10      	ldr	r4, [pc, #64]	; (800209c <__aeabi_d2iz+0x58>)
 800205a:	42a3      	cmp	r3, r4
 800205c:	dc10      	bgt.n	8002080 <__aeabi_d2iz+0x3c>
 800205e:	2480      	movs	r4, #128	; 0x80
 8002060:	0364      	lsls	r4, r4, #13
 8002062:	4322      	orrs	r2, r4
 8002064:	4c0e      	ldr	r4, [pc, #56]	; (80020a0 <__aeabi_d2iz+0x5c>)
 8002066:	1ae4      	subs	r4, r4, r3
 8002068:	2c1f      	cmp	r4, #31
 800206a:	dd0c      	ble.n	8002086 <__aeabi_d2iz+0x42>
 800206c:	480d      	ldr	r0, [pc, #52]	; (80020a4 <__aeabi_d2iz+0x60>)
 800206e:	1ac3      	subs	r3, r0, r3
 8002070:	40da      	lsrs	r2, r3
 8002072:	0013      	movs	r3, r2
 8002074:	425c      	negs	r4, r3
 8002076:	2900      	cmp	r1, #0
 8002078:	d100      	bne.n	800207c <__aeabi_d2iz+0x38>
 800207a:	001c      	movs	r4, r3
 800207c:	0020      	movs	r0, r4
 800207e:	bd30      	pop	{r4, r5, pc}
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <__aeabi_d2iz+0x64>)
 8002082:	18cc      	adds	r4, r1, r3
 8002084:	e7fa      	b.n	800207c <__aeabi_d2iz+0x38>
 8002086:	4d09      	ldr	r5, [pc, #36]	; (80020ac <__aeabi_d2iz+0x68>)
 8002088:	40e0      	lsrs	r0, r4
 800208a:	46ac      	mov	ip, r5
 800208c:	4463      	add	r3, ip
 800208e:	409a      	lsls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	4303      	orrs	r3, r0
 8002094:	e7ee      	b.n	8002074 <__aeabi_d2iz+0x30>
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	000003fe 	.word	0x000003fe
 800209c:	0000041d 	.word	0x0000041d
 80020a0:	00000433 	.word	0x00000433
 80020a4:	00000413 	.word	0x00000413
 80020a8:	7fffffff 	.word	0x7fffffff
 80020ac:	fffffbed 	.word	0xfffffbed

080020b0 <__aeabi_i2d>:
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d02d      	beq.n	8002112 <__aeabi_i2d+0x62>
 80020b6:	17c3      	asrs	r3, r0, #31
 80020b8:	18c5      	adds	r5, r0, r3
 80020ba:	405d      	eors	r5, r3
 80020bc:	0fc4      	lsrs	r4, r0, #31
 80020be:	0028      	movs	r0, r5
 80020c0:	f000 f862 	bl	8002188 <__clzsi2>
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <__aeabi_i2d+0x6c>)
 80020c6:	1a1b      	subs	r3, r3, r0
 80020c8:	055b      	lsls	r3, r3, #21
 80020ca:	0d5b      	lsrs	r3, r3, #21
 80020cc:	280a      	cmp	r0, #10
 80020ce:	dd15      	ble.n	80020fc <__aeabi_i2d+0x4c>
 80020d0:	380b      	subs	r0, #11
 80020d2:	4085      	lsls	r5, r0
 80020d4:	2200      	movs	r2, #0
 80020d6:	032d      	lsls	r5, r5, #12
 80020d8:	0b2d      	lsrs	r5, r5, #12
 80020da:	2100      	movs	r1, #0
 80020dc:	0010      	movs	r0, r2
 80020de:	032d      	lsls	r5, r5, #12
 80020e0:	0d0a      	lsrs	r2, r1, #20
 80020e2:	0b2d      	lsrs	r5, r5, #12
 80020e4:	0512      	lsls	r2, r2, #20
 80020e6:	432a      	orrs	r2, r5
 80020e8:	4d0d      	ldr	r5, [pc, #52]	; (8002120 <__aeabi_i2d+0x70>)
 80020ea:	051b      	lsls	r3, r3, #20
 80020ec:	402a      	ands	r2, r5
 80020ee:	4313      	orrs	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	07e4      	lsls	r4, r4, #31
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	4323      	orrs	r3, r4
 80020f8:	0019      	movs	r1, r3
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	0002      	movs	r2, r0
 80020fe:	0029      	movs	r1, r5
 8002100:	3215      	adds	r2, #21
 8002102:	4091      	lsls	r1, r2
 8002104:	000a      	movs	r2, r1
 8002106:	210b      	movs	r1, #11
 8002108:	1a08      	subs	r0, r1, r0
 800210a:	40c5      	lsrs	r5, r0
 800210c:	032d      	lsls	r5, r5, #12
 800210e:	0b2d      	lsrs	r5, r5, #12
 8002110:	e7e3      	b.n	80020da <__aeabi_i2d+0x2a>
 8002112:	2400      	movs	r4, #0
 8002114:	2300      	movs	r3, #0
 8002116:	2500      	movs	r5, #0
 8002118:	2200      	movs	r2, #0
 800211a:	e7de      	b.n	80020da <__aeabi_i2d+0x2a>
 800211c:	0000041e 	.word	0x0000041e
 8002120:	800fffff 	.word	0x800fffff

08002124 <__aeabi_ui2d>:
 8002124:	b510      	push	{r4, lr}
 8002126:	1e04      	subs	r4, r0, #0
 8002128:	d025      	beq.n	8002176 <__aeabi_ui2d+0x52>
 800212a:	f000 f82d 	bl	8002188 <__clzsi2>
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <__aeabi_ui2d+0x5c>)
 8002130:	1a1b      	subs	r3, r3, r0
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	0d5b      	lsrs	r3, r3, #21
 8002136:	280a      	cmp	r0, #10
 8002138:	dd12      	ble.n	8002160 <__aeabi_ui2d+0x3c>
 800213a:	380b      	subs	r0, #11
 800213c:	4084      	lsls	r4, r0
 800213e:	2200      	movs	r2, #0
 8002140:	0324      	lsls	r4, r4, #12
 8002142:	0b24      	lsrs	r4, r4, #12
 8002144:	2100      	movs	r1, #0
 8002146:	0010      	movs	r0, r2
 8002148:	0324      	lsls	r4, r4, #12
 800214a:	0d0a      	lsrs	r2, r1, #20
 800214c:	0b24      	lsrs	r4, r4, #12
 800214e:	0512      	lsls	r2, r2, #20
 8002150:	4322      	orrs	r2, r4
 8002152:	4c0c      	ldr	r4, [pc, #48]	; (8002184 <__aeabi_ui2d+0x60>)
 8002154:	051b      	lsls	r3, r3, #20
 8002156:	4022      	ands	r2, r4
 8002158:	4313      	orrs	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	0859      	lsrs	r1, r3, #1
 800215e:	bd10      	pop	{r4, pc}
 8002160:	0002      	movs	r2, r0
 8002162:	0021      	movs	r1, r4
 8002164:	3215      	adds	r2, #21
 8002166:	4091      	lsls	r1, r2
 8002168:	000a      	movs	r2, r1
 800216a:	210b      	movs	r1, #11
 800216c:	1a08      	subs	r0, r1, r0
 800216e:	40c4      	lsrs	r4, r0
 8002170:	0324      	lsls	r4, r4, #12
 8002172:	0b24      	lsrs	r4, r4, #12
 8002174:	e7e6      	b.n	8002144 <__aeabi_ui2d+0x20>
 8002176:	2300      	movs	r3, #0
 8002178:	2400      	movs	r4, #0
 800217a:	2200      	movs	r2, #0
 800217c:	e7e2      	b.n	8002144 <__aeabi_ui2d+0x20>
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	0000041e 	.word	0x0000041e
 8002184:	800fffff 	.word	0x800fffff

08002188 <__clzsi2>:
 8002188:	211c      	movs	r1, #28
 800218a:	2301      	movs	r3, #1
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	4298      	cmp	r0, r3
 8002190:	d301      	bcc.n	8002196 <__clzsi2+0xe>
 8002192:	0c00      	lsrs	r0, r0, #16
 8002194:	3910      	subs	r1, #16
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	4298      	cmp	r0, r3
 800219a:	d301      	bcc.n	80021a0 <__clzsi2+0x18>
 800219c:	0a00      	lsrs	r0, r0, #8
 800219e:	3908      	subs	r1, #8
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	4298      	cmp	r0, r3
 80021a4:	d301      	bcc.n	80021aa <__clzsi2+0x22>
 80021a6:	0900      	lsrs	r0, r0, #4
 80021a8:	3904      	subs	r1, #4
 80021aa:	a202      	add	r2, pc, #8	; (adr r2, 80021b4 <__clzsi2+0x2c>)
 80021ac:	5c10      	ldrb	r0, [r2, r0]
 80021ae:	1840      	adds	r0, r0, r1
 80021b0:	4770      	bx	lr
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	02020304 	.word	0x02020304
 80021b8:	01010101 	.word	0x01010101
	...

080021c4 <__clzdi2>:
 80021c4:	b510      	push	{r4, lr}
 80021c6:	2900      	cmp	r1, #0
 80021c8:	d103      	bne.n	80021d2 <__clzdi2+0xe>
 80021ca:	f7ff ffdd 	bl	8002188 <__clzsi2>
 80021ce:	3020      	adds	r0, #32
 80021d0:	e002      	b.n	80021d8 <__clzdi2+0x14>
 80021d2:	1c08      	adds	r0, r1, #0
 80021d4:	f7ff ffd8 	bl	8002188 <__clzsi2>
 80021d8:	bd10      	pop	{r4, pc}
 80021da:	46c0      	nop			; (mov r8, r8)

080021dc <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80021dc:	2200      	movs	r2, #0
 80021de:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80021e0:	4907      	ldr	r1, [pc, #28]	; (8002200 <GetFskBandwidthRegValue+0x24>)
 80021e2:	00d3      	lsls	r3, r2, #3
 80021e4:	185b      	adds	r3, r3, r1
 80021e6:	681c      	ldr	r4, [r3, #0]
 80021e8:	4284      	cmp	r4, r0
 80021ea:	d802      	bhi.n	80021f2 <GetFskBandwidthRegValue+0x16>
 80021ec:	689c      	ldr	r4, [r3, #8]
 80021ee:	4284      	cmp	r4, r0
 80021f0:	d803      	bhi.n	80021fa <GetFskBandwidthRegValue+0x1e>
 80021f2:	3201      	adds	r2, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80021f4:	2a15      	cmp	r2, #21
 80021f6:	d1f4      	bne.n	80021e2 <GetFskBandwidthRegValue+0x6>
 80021f8:	e7fe      	b.n	80021f8 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 80021fa:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 80021fc:	bd10      	pop	{r4, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	08007cb0 	.word	0x08007cb0

08002204 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <SX1276OnDio4Irq+0x18>)
 8002206:	795a      	ldrb	r2, [r3, #5]
 8002208:	2a00      	cmp	r2, #0
 800220a:	d105      	bne.n	8002218 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800220c:	3330      	adds	r3, #48	; 0x30
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	2a00      	cmp	r2, #0
 8002212:	d101      	bne.n	8002218 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8002214:	3201      	adds	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8002218:	4770      	bx	lr
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	2000058c 	.word	0x2000058c

08002220 <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8002220:	4b01      	ldr	r3, [pc, #4]	; (8002228 <SX1276BoardInit+0x8>)
 8002222:	6018      	str	r0, [r3, #0]
}
 8002224:	4770      	bx	lr
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	200000b8 	.word	0x200000b8

0800222c <SX1276GetStatus>:
    return SX1276.Settings.State;
 800222c:	4b01      	ldr	r3, [pc, #4]	; (8002234 <SX1276GetStatus+0x8>)
 800222e:	7918      	ldrb	r0, [r3, #4]
}
 8002230:	4770      	bx	lr
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	2000058c 	.word	0x2000058c

08002238 <SX1276Reset>:
{
 8002238:	b530      	push	{r4, r5, lr}
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800223a:	25a0      	movs	r5, #160	; 0xa0
{
 800223c:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800223e:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 8002240:	2214      	movs	r2, #20
 8002242:	2100      	movs	r1, #0
 8002244:	a801      	add	r0, sp, #4
 8002246:	f004 ff76 	bl	8007136 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 800224a:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800224c:	05ed      	lsls	r5, r5, #23
 800224e:	aa01      	add	r2, sp, #4
 8002250:	0021      	movs	r1, r4
 8002252:	0028      	movs	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 8002254:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002256:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002258:	f003 ffdc 	bl	8006214 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 800225c:	0021      	movs	r1, r4
 800225e:	2200      	movs	r2, #0
 8002260:	0028      	movs	r0, r5
 8002262:	f004 f84b 	bl	80062fc <HW_GPIO_Write>
    DelayMs( 1 );
 8002266:	0020      	movs	r0, r4
 8002268:	f004 fc78 	bl	8006b5c <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800226e:	aa01      	add	r2, sp, #4
 8002270:	0021      	movs	r1, r4
 8002272:	0028      	movs	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 8002274:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002276:	f003 ffcd 	bl	8006214 <HW_GPIO_Init>
    DelayMs( 6 );
 800227a:	2006      	movs	r0, #6
 800227c:	f004 fc6e 	bl	8006b5c <HAL_Delay>
}
 8002280:	b007      	add	sp, #28
 8002282:	bd30      	pop	{r4, r5, pc}

08002284 <SX1276WriteBuffer>:
{
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	0006      	movs	r6, r0
 8002288:	000c      	movs	r4, r1
 800228a:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800228c:	2140      	movs	r1, #64	; 0x40
 800228e:	2200      	movs	r2, #0
 8002290:	480a      	ldr	r0, [pc, #40]	; (80022bc <SX1276WriteBuffer+0x38>)
 8002292:	f004 f833 	bl	80062fc <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 8002296:	2080      	movs	r0, #128	; 0x80
 8002298:	4330      	orrs	r0, r6
 800229a:	f004 faaf 	bl	80067fc <HW_SPI_InOut>
 800229e:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 80022a0:	42ac      	cmp	r4, r5
 80022a2:	d105      	bne.n	80022b0 <SX1276WriteBuffer+0x2c>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80022a4:	2201      	movs	r2, #1
 80022a6:	2140      	movs	r1, #64	; 0x40
 80022a8:	4804      	ldr	r0, [pc, #16]	; (80022bc <SX1276WriteBuffer+0x38>)
 80022aa:	f004 f827 	bl	80062fc <HW_GPIO_Write>
}
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
        HW_SPI_InOut( buffer[i] );
 80022b0:	7820      	ldrb	r0, [r4, #0]
 80022b2:	f004 faa3 	bl	80067fc <HW_SPI_InOut>
 80022b6:	3401      	adds	r4, #1
 80022b8:	e7f2      	b.n	80022a0 <SX1276WriteBuffer+0x1c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	50000400 	.word	0x50000400

080022c0 <SX1276Write>:
{
 80022c0:	b507      	push	{r0, r1, r2, lr}
 80022c2:	466b      	mov	r3, sp
 80022c4:	71d9      	strb	r1, [r3, #7]
 80022c6:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80022c8:	2201      	movs	r2, #1
 80022ca:	0019      	movs	r1, r3
 80022cc:	f7ff ffda 	bl	8002284 <SX1276WriteBuffer>
}
 80022d0:	bd07      	pop	{r0, r1, r2, pc}
	...

080022d4 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <SX1276SetChannel+0x48>)
{
 80022d6:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 80022d8:	4911      	ldr	r1, [pc, #68]	; (8002320 <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 80022da:	6098      	str	r0, [r3, #8]
{
 80022dc:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 80022de:	f7fd ffa3 	bl	8000228 <__aeabi_uidivmod>
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <SX1276SetChannel+0x50>)
 80022e4:	0208      	lsls	r0, r1, #8
 80022e6:	18c0      	adds	r0, r0, r3
 80022e8:	490d      	ldr	r1, [pc, #52]	; (8002320 <SX1276SetChannel+0x4c>)
 80022ea:	f7fd ff17 	bl	800011c <__udivsi3>
 80022ee:	490c      	ldr	r1, [pc, #48]	; (8002320 <SX1276SetChannel+0x4c>)
 80022f0:	0004      	movs	r4, r0
 80022f2:	0028      	movs	r0, r5
 80022f4:	f7fd ff12 	bl	800011c <__udivsi3>
 80022f8:	0200      	lsls	r0, r0, #8
 80022fa:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80022fc:	0c21      	lsrs	r1, r4, #16
 80022fe:	b2c9      	uxtb	r1, r1
 8002300:	2006      	movs	r0, #6
 8002302:	f7ff ffdd 	bl	80022c0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8002306:	0a21      	lsrs	r1, r4, #8
 8002308:	b2c9      	uxtb	r1, r1
 800230a:	2007      	movs	r0, #7
 800230c:	f7ff ffd8 	bl	80022c0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8002310:	b2e1      	uxtb	r1, r4
 8002312:	2008      	movs	r0, #8
 8002314:	f7ff ffd4 	bl	80022c0 <SX1276Write>
}
 8002318:	bd70      	pop	{r4, r5, r6, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	2000058c 	.word	0x2000058c
 8002320:	00003d09 	.word	0x00003d09
 8002324:	00001e84 	.word	0x00001e84

08002328 <SX1276ReadBuffer>:
{
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	0006      	movs	r6, r0
 800232c:	000c      	movs	r4, r1
 800232e:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002330:	2140      	movs	r1, #64	; 0x40
 8002332:	2200      	movs	r2, #0
 8002334:	480a      	ldr	r0, [pc, #40]	; (8002360 <SX1276ReadBuffer+0x38>)
 8002336:	f003 ffe1 	bl	80062fc <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 800233a:	207f      	movs	r0, #127	; 0x7f
 800233c:	4030      	ands	r0, r6
 800233e:	f004 fa5d 	bl	80067fc <HW_SPI_InOut>
 8002342:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 8002344:	42ac      	cmp	r4, r5
 8002346:	d105      	bne.n	8002354 <SX1276ReadBuffer+0x2c>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8002348:	2201      	movs	r2, #1
 800234a:	2140      	movs	r1, #64	; 0x40
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <SX1276ReadBuffer+0x38>)
 800234e:	f003 ffd5 	bl	80062fc <HW_GPIO_Write>
}
 8002352:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = HW_SPI_InOut( 0 );
 8002354:	2000      	movs	r0, #0
 8002356:	f004 fa51 	bl	80067fc <HW_SPI_InOut>
 800235a:	7020      	strb	r0, [r4, #0]
 800235c:	3401      	adds	r4, #1
 800235e:	e7f1      	b.n	8002344 <SX1276ReadBuffer+0x1c>
 8002360:	50000400 	.word	0x50000400

08002364 <SX1276Read>:
{
 8002364:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8002366:	466b      	mov	r3, sp
 8002368:	1ddc      	adds	r4, r3, #7
 800236a:	2201      	movs	r2, #1
 800236c:	0021      	movs	r1, r4
 800236e:	f7ff ffdb 	bl	8002328 <SX1276ReadBuffer>
    return data;
 8002372:	7820      	ldrb	r0, [r4, #0]
}
 8002374:	bd16      	pop	{r1, r2, r4, pc}
	...

08002378 <RxChainCalibration>:
{
 8002378:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800237a:	2009      	movs	r0, #9
 800237c:	f7ff fff2 	bl	8002364 <SX1276Read>
 8002380:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002382:	2006      	movs	r0, #6
 8002384:	f7ff ffee 	bl	8002364 <SX1276Read>
 8002388:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800238a:	2007      	movs	r0, #7
 800238c:	f7ff ffea 	bl	8002364 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002390:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8002392:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002394:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8002396:	2008      	movs	r0, #8
 8002398:	f7ff ffe4 	bl	8002364 <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800239e:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80023a0:	b2c4      	uxtb	r4, r0
 80023a2:	435c      	muls	r4, r3
 80023a4:	0a00      	lsrs	r0, r0, #8
 80023a6:	4358      	muls	r0, r3
 80023a8:	3480      	adds	r4, #128	; 0x80
 80023aa:	0a24      	lsrs	r4, r4, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 80023ac:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80023ae:	1824      	adds	r4, r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 80023b0:	2009      	movs	r0, #9
 80023b2:	f7ff ff85 	bl	80022c0 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80023b6:	203b      	movs	r0, #59	; 0x3b
 80023b8:	f7ff ffd4 	bl	8002364 <SX1276Read>
 80023bc:	2140      	movs	r1, #64	; 0x40
 80023be:	4301      	orrs	r1, r0
 80023c0:	b2c9      	uxtb	r1, r1
 80023c2:	203b      	movs	r0, #59	; 0x3b
 80023c4:	f7ff ff7c 	bl	80022c0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80023c8:	2620      	movs	r6, #32
 80023ca:	203b      	movs	r0, #59	; 0x3b
 80023cc:	f7ff ffca 	bl	8002364 <SX1276Read>
 80023d0:	4230      	tst	r0, r6
 80023d2:	d1fa      	bne.n	80023ca <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 80023d4:	480d      	ldr	r0, [pc, #52]	; (800240c <RxChainCalibration+0x94>)
 80023d6:	f7ff ff7d 	bl	80022d4 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80023da:	203b      	movs	r0, #59	; 0x3b
 80023dc:	f7ff ffc2 	bl	8002364 <SX1276Read>
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	4301      	orrs	r1, r0
 80023e4:	b2c9      	uxtb	r1, r1
 80023e6:	203b      	movs	r0, #59	; 0x3b
 80023e8:	f7ff ff6a 	bl	80022c0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80023ec:	2620      	movs	r6, #32
 80023ee:	203b      	movs	r0, #59	; 0x3b
 80023f0:	f7ff ffb8 	bl	8002364 <SX1276Read>
 80023f4:	4230      	tst	r0, r6
 80023f6:	d1fa      	bne.n	80023ee <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80023f8:	0029      	movs	r1, r5
 80023fa:	2009      	movs	r0, #9
 80023fc:	f7ff ff60 	bl	80022c0 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8002400:	0020      	movs	r0, r4
 8002402:	f7ff ff67 	bl	80022d4 <SX1276SetChannel>
}
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	00003d09 	.word	0x00003d09
 800240c:	33bca100 	.word	0x33bca100

08002410 <SX1276GetTimeOnAir>:
{
 8002410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002412:	000d      	movs	r5, r1
 8002414:	b085      	sub	sp, #20
    switch( modem )
 8002416:	2800      	cmp	r0, #0
 8002418:	d003      	beq.n	8002422 <SX1276GetTimeOnAir+0x12>
 800241a:	2801      	cmp	r0, #1
 800241c:	d055      	beq.n	80024ca <SX1276GetTimeOnAir+0xba>
    uint32_t airTime = 0;
 800241e:	2000      	movs	r0, #0
    return airTime;
 8002420:	e04c      	b.n	80024bc <SX1276GetTimeOnAir+0xac>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002422:	4c6f      	ldr	r4, [pc, #444]	; (80025e0 <SX1276GetTimeOnAir+0x1d0>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002424:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002426:	8c26      	ldrh	r6, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002428:	f7ff ff9c 	bl	8002364 <SX1276Read>
 800242c:	23f8      	movs	r3, #248	; 0xf8
 800242e:	4398      	bics	r0, r3
 8002430:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002432:	1980      	adds	r0, r0, r6
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002434:	f7ff fe3c 	bl	80020b0 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002438:	1ce3      	adds	r3, r4, #3
 800243a:	7fdb      	ldrb	r3, [r3, #31]
 800243c:	2200      	movs	r2, #0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d13e      	bne.n	80024c0 <SX1276GetTimeOnAir+0xb0>
 8002442:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <SX1276GetTimeOnAir+0x1d4>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002444:	f7fe f91e 	bl	8000684 <__aeabi_dadd>
 8002448:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800244a:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800244c:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800244e:	f7ff ff89 	bl	8002364 <SX1276Read>
 8002452:	23f9      	movs	r3, #249	; 0xf9
 8002454:	2200      	movs	r2, #0
 8002456:	4398      	bics	r0, r3
 8002458:	2300      	movs	r3, #0
 800245a:	2800      	cmp	r0, #0
 800245c:	d000      	beq.n	8002460 <SX1276GetTimeOnAir+0x50>
 800245e:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <SX1276GetTimeOnAir+0x1d4>)
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002460:	0030      	movs	r0, r6
 8002462:	0039      	movs	r1, r7
 8002464:	f7fe f90e 	bl	8000684 <__aeabi_dadd>
 8002468:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800246a:	0028      	movs	r0, r5
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800246c:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800246e:	f7ff fe1f 	bl	80020b0 <__aeabi_i2d>
 8002472:	0002      	movs	r2, r0
 8002474:	000b      	movs	r3, r1
 8002476:	0030      	movs	r0, r6
 8002478:	0039      	movs	r1, r7
 800247a:	f7fe f903 	bl	8000684 <__aeabi_dadd>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800247e:	1d63      	adds	r3, r4, #5
 8002480:	7fdb      	ldrb	r3, [r3, #31]
 8002482:	2200      	movs	r2, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11d      	bne.n	80024c4 <SX1276GetTimeOnAir+0xb4>
 8002488:	2300      	movs	r3, #0
                                     pktLen +
 800248a:	f7fe f8fb 	bl	8000684 <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800248e:	2200      	movs	r2, #0
 8002490:	4b55      	ldr	r3, [pc, #340]	; (80025e8 <SX1276GetTimeOnAir+0x1d8>)
 8002492:	f7ff f81d 	bl	80014d0 <__aeabi_dmul>
 8002496:	0006      	movs	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002498:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800249a:	000f      	movs	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800249c:	f7ff fe42 	bl	8002124 <__aeabi_ui2d>
 80024a0:	0002      	movs	r2, r0
 80024a2:	000b      	movs	r3, r1
 80024a4:	0030      	movs	r0, r6
 80024a6:	0039      	movs	r1, r7
 80024a8:	f7fe fc08 	bl	8000cbc <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80024ac:	2200      	movs	r2, #0
 80024ae:	4b4f      	ldr	r3, [pc, #316]	; (80025ec <SX1276GetTimeOnAir+0x1dc>)
 80024b0:	f7ff f80e 	bl	80014d0 <__aeabi_dmul>
 80024b4:	f005 fb72 	bl	8007b9c <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80024b8:	f7fe f804 	bl	80004c4 <__aeabi_d2uiz>
}
 80024bc:	b005      	add	sp, #20
 80024be:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80024c0:	2300      	movs	r3, #0
 80024c2:	e7bf      	b.n	8002444 <SX1276GetTimeOnAir+0x34>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	05db      	lsls	r3, r3, #23
 80024c8:	e7df      	b.n	800248a <SX1276GetTimeOnAir+0x7a>
            switch( SX1276.Settings.LoRa.Bandwidth )
 80024ca:	4c45      	ldr	r4, [pc, #276]	; (80025e0 <SX1276GetTimeOnAir+0x1d0>)
 80024cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024ce:	3b07      	subs	r3, #7
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d900      	bls.n	80024d6 <SX1276GetTimeOnAir+0xc6>
 80024d4:	e07d      	b.n	80025d2 <SX1276GetTimeOnAir+0x1c2>
 80024d6:	4a46      	ldr	r2, [pc, #280]	; (80025f0 <SX1276GetTimeOnAir+0x1e0>)
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	18d3      	adds	r3, r2, r3
 80024dc:	681e      	ldr	r6, [r3, #0]
 80024de:	685f      	ldr	r7, [r3, #4]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 80024e0:	2001      	movs	r0, #1
 80024e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80024e4:	00ed      	lsls	r5, r5, #3
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 80024e6:	4098      	lsls	r0, r3
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	f7ff fde1 	bl	80020b0 <__aeabi_i2d>
 80024ee:	0002      	movs	r2, r0
 80024f0:	000b      	movs	r3, r1
 80024f2:	0030      	movs	r0, r6
 80024f4:	0039      	movs	r1, r7
 80024f6:	f7fe fbe1 	bl	8000cbc <__aeabi_ddiv>
 80024fa:	0002      	movs	r2, r0
 80024fc:	000b      	movs	r3, r1
            double ts = 1 / rs;
 80024fe:	2000      	movs	r0, #0
 8002500:	4938      	ldr	r1, [pc, #224]	; (80025e4 <SX1276GetTimeOnAir+0x1d4>)
 8002502:	f7fe fbdb 	bl	8000cbc <__aeabi_ddiv>
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002506:	0023      	movs	r3, r4
            double ts = 1 / rs;
 8002508:	0006      	movs	r6, r0
 800250a:	000f      	movs	r7, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800250c:	334e      	adds	r3, #78	; 0x4e
 800250e:	8818      	ldrh	r0, [r3, #0]
 8002510:	f7ff fdce 	bl	80020b0 <__aeabi_i2d>
 8002514:	2200      	movs	r2, #0
 8002516:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <SX1276GetTimeOnAir+0x1e4>)
 8002518:	f7fe f8b4 	bl	8000684 <__aeabi_dadd>
 800251c:	0032      	movs	r2, r6
 800251e:	003b      	movs	r3, r7
 8002520:	f7fe ffd6 	bl	80014d0 <__aeabi_dmul>
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002524:	0023      	movs	r3, r4
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002526:	9002      	str	r0, [sp, #8]
 8002528:	9103      	str	r1, [sp, #12]
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800252a:	3352      	adds	r3, #82	; 0x52
 800252c:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800252e:	9b01      	ldr	r3, [sp, #4]
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002530:	3450      	adds	r4, #80	; 0x50
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002532:	009b      	lsls	r3, r3, #2
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002534:	0100      	lsls	r0, r0, #4
 8002536:	1ac0      	subs	r0, r0, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002538:	7823      	ldrb	r3, [r4, #0]
 800253a:	2214      	movs	r2, #20
 800253c:	1e59      	subs	r1, r3, #1
 800253e:	418b      	sbcs	r3, r1
 8002540:	301c      	adds	r0, #28
 8002542:	425b      	negs	r3, r3
 8002544:	401a      	ands	r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002546:	1828      	adds	r0, r5, r0
 8002548:	1a80      	subs	r0, r0, r2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800254a:	f7ff fdeb 	bl	8002124 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800254e:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <SX1276GetTimeOnAir+0x1d0>)
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002550:	0004      	movs	r4, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002552:	334c      	adds	r3, #76	; 0x4c
 8002554:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002556:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002558:	1e43      	subs	r3, r0, #1
 800255a:	4198      	sbcs	r0, r3
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800255c:	9b01      	ldr	r3, [sp, #4]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800255e:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8002560:	1a18      	subs	r0, r3, r0
 8002562:	0080      	lsls	r0, r0, #2
 8002564:	f7ff fdde 	bl	8002124 <__aeabi_ui2d>
 8002568:	0002      	movs	r2, r0
 800256a:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800256c:	0020      	movs	r0, r4
 800256e:	0029      	movs	r1, r5
 8002570:	f7fe fba4 	bl	8000cbc <__aeabi_ddiv>
 8002574:	f005 fa0e 	bl	8007994 <ceil>
 8002578:	0004      	movs	r4, r0
 800257a:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <SX1276GetTimeOnAir+0x1d0>)
 800257e:	334d      	adds	r3, #77	; 0x4d
 8002580:	7818      	ldrb	r0, [r3, #0]
 8002582:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002584:	f7ff fd94 	bl	80020b0 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002588:	0022      	movs	r2, r4
 800258a:	002b      	movs	r3, r5
 800258c:	f7fe ffa0 	bl	80014d0 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002590:	2200      	movs	r2, #0
 8002592:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002594:	0004      	movs	r4, r0
 8002596:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002598:	f7fd ff60 	bl	800045c <__aeabi_dcmpgt>
 800259c:	2800      	cmp	r0, #0
 800259e:	d01b      	beq.n	80025d8 <SX1276GetTimeOnAir+0x1c8>
 80025a0:	2200      	movs	r2, #0
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <SX1276GetTimeOnAir+0x1d8>)
 80025a4:	0020      	movs	r0, r4
 80025a6:	0029      	movs	r1, r5
 80025a8:	f7fe f86c 	bl	8000684 <__aeabi_dadd>
            double tPayload = nPayload * ts;
 80025ac:	0032      	movs	r2, r6
 80025ae:	003b      	movs	r3, r7
 80025b0:	f7fe ff8e 	bl	80014d0 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 80025b4:	9a02      	ldr	r2, [sp, #8]
 80025b6:	9b03      	ldr	r3, [sp, #12]
 80025b8:	f7fe f864 	bl	8000684 <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80025bc:	2200      	movs	r2, #0
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <SX1276GetTimeOnAir+0x1dc>)
 80025c0:	f7fe ff86 	bl	80014d0 <__aeabi_dmul>
 80025c4:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <SX1276GetTimeOnAir+0x1e8>)
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <SX1276GetTimeOnAir+0x1ec>)
 80025c8:	f7fe f85c 	bl	8000684 <__aeabi_dadd>
 80025cc:	f005 fa64 	bl	8007a98 <floor>
 80025d0:	e772      	b.n	80024b8 <SX1276GetTimeOnAir+0xa8>
            switch( SX1276.Settings.LoRa.Bandwidth )
 80025d2:	2600      	movs	r6, #0
 80025d4:	2700      	movs	r7, #0
 80025d6:	e783      	b.n	80024e0 <SX1276GetTimeOnAir+0xd0>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80025d8:	2000      	movs	r0, #0
 80025da:	4903      	ldr	r1, [pc, #12]	; (80025e8 <SX1276GetTimeOnAir+0x1d8>)
 80025dc:	e7e6      	b.n	80025ac <SX1276GetTimeOnAir+0x19c>
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	2000058c 	.word	0x2000058c
 80025e4:	3ff00000 	.word	0x3ff00000
 80025e8:	40200000 	.word	0x40200000
 80025ec:	408f4000 	.word	0x408f4000
 80025f0:	08007c68 	.word	0x08007c68
 80025f4:	40110000 	.word	0x40110000
 80025f8:	d916872b 	.word	0xd916872b
 80025fc:	3feff7ce 	.word	0x3feff7ce

08002600 <SX1276ReadRssi>:
{
 8002600:	b510      	push	{r4, lr}
    switch( modem )
 8002602:	2800      	cmp	r0, #0
 8002604:	d004      	beq.n	8002610 <SX1276ReadRssi+0x10>
 8002606:	2801      	cmp	r0, #1
 8002608:	d00a      	beq.n	8002620 <SX1276ReadRssi+0x20>
        rssi = -1;
 800260a:	2001      	movs	r0, #1
 800260c:	4240      	negs	r0, r0
 800260e:	e006      	b.n	800261e <SX1276ReadRssi+0x1e>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8002610:	2011      	movs	r0, #17
 8002612:	f7ff fea7 	bl	8002364 <SX1276Read>
 8002616:	0840      	lsrs	r0, r0, #1
 8002618:	b2c0      	uxtb	r0, r0
 800261a:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800261c:	b200      	sxth	r0, r0
}
 800261e:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8002620:	4a06      	ldr	r2, [pc, #24]	; (800263c <SX1276ReadRssi+0x3c>)
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <SX1276ReadRssi+0x40>)
 8002624:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8002626:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8002628:	429a      	cmp	r2, r3
 800262a:	d903      	bls.n	8002634 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800262c:	f7ff fe9a 	bl	8002364 <SX1276Read>
 8002630:	389d      	subs	r0, #157	; 0x9d
 8002632:	e7f3      	b.n	800261c <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8002634:	f7ff fe96 	bl	8002364 <SX1276Read>
 8002638:	38a4      	subs	r0, #164	; 0xa4
 800263a:	e7ef      	b.n	800261c <SX1276ReadRssi+0x1c>
 800263c:	2000058c 	.word	0x2000058c
 8002640:	1f4add40 	.word	0x1f4add40

08002644 <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 8002644:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff fe8c 	bl	8002364 <SX1276Read>
 800264c:	21f8      	movs	r1, #248	; 0xf8
 800264e:	4001      	ands	r1, r0
 8002650:	2001      	movs	r0, #1
 8002652:	f7ff fe35 	bl	80022c0 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8002656:	4c05      	ldr	r4, [pc, #20]	; (800266c <SX1276SetOpMode.part.2+0x28>)
 8002658:	2001      	movs	r0, #1
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	2000      	movs	r0, #0
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4798      	blx	r3
}
 8002668:	bd10      	pop	{r4, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	200000b8 	.word	0x200000b8

08002670 <SX1276SetSleep>:
{
 8002670:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8002672:	480a      	ldr	r0, [pc, #40]	; (800269c <SX1276SetSleep+0x2c>)
 8002674:	f003 fca2 	bl	8005fbc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8002678:	4809      	ldr	r0, [pc, #36]	; (80026a0 <SX1276SetSleep+0x30>)
 800267a:	f003 fc9f 	bl	8005fbc <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800267e:	4809      	ldr	r0, [pc, #36]	; (80026a4 <SX1276SetSleep+0x34>)
 8002680:	f003 fc9c 	bl	8005fbc <TimerStop>
 8002684:	f7ff ffde 	bl	8002644 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <SX1276SetSleep+0x38>)
 800268a:	2000      	movs	r0, #0
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 8002692:	2200      	movs	r2, #0
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SX1276SetSleep+0x3c>)
 8002696:	711a      	strb	r2, [r3, #4]
}
 8002698:	bd10      	pop	{r4, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	200005f4 	.word	0x200005f4
 80026a0:	2000055c 	.word	0x2000055c
 80026a4:	20000574 	.word	0x20000574
 80026a8:	200000b8 	.word	0x200000b8
 80026ac:	2000058c 	.word	0x2000058c

080026b0 <SX1276SetOpMode>:
{
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 80026b4:	d102      	bne.n	80026bc <SX1276SetOpMode+0xc>
 80026b6:	f7ff ffc5 	bl	8002644 <SX1276SetOpMode.part.2>
}
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80026bc:	4d0c      	ldr	r5, [pc, #48]	; (80026f0 <SX1276SetOpMode+0x40>)
 80026be:	2001      	movs	r0, #1
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	2000      	movs	r0, #0
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 80026ce:	682b      	ldr	r3, [r5, #0]
 80026d0:	0020      	movs	r0, r4
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80026d6:	2001      	movs	r0, #1
 80026d8:	f7ff fe44 	bl	8002364 <SX1276Read>
 80026dc:	2307      	movs	r3, #7
 80026de:	0001      	movs	r1, r0
 80026e0:	4399      	bics	r1, r3
 80026e2:	4321      	orrs	r1, r4
 80026e4:	b2c9      	uxtb	r1, r1
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7ff fdea 	bl	80022c0 <SX1276Write>
}
 80026ec:	e7e5      	b.n	80026ba <SX1276SetOpMode+0xa>
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	200000b8 	.word	0x200000b8

080026f4 <SX1276SetStby>:
{
 80026f4:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 80026f6:	4808      	ldr	r0, [pc, #32]	; (8002718 <SX1276SetStby+0x24>)
 80026f8:	f003 fc60 	bl	8005fbc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80026fc:	4807      	ldr	r0, [pc, #28]	; (800271c <SX1276SetStby+0x28>)
 80026fe:	f003 fc5d 	bl	8005fbc <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8002702:	4807      	ldr	r0, [pc, #28]	; (8002720 <SX1276SetStby+0x2c>)
 8002704:	f003 fc5a 	bl	8005fbc <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8002708:	2001      	movs	r0, #1
 800270a:	f7ff ffd1 	bl	80026b0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800270e:	2200      	movs	r2, #0
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <SX1276SetStby+0x30>)
 8002712:	711a      	strb	r2, [r3, #4]
}
 8002714:	bd10      	pop	{r4, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	200005f4 	.word	0x200005f4
 800271c:	2000055c 	.word	0x2000055c
 8002720:	20000574 	.word	0x20000574
 8002724:	2000058c 	.word	0x2000058c

08002728 <SX1276SetRx>:
{
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	0006      	movs	r6, r0
    TimerStop( &TxTimeoutTimer );
 800272c:	4876      	ldr	r0, [pc, #472]	; (8002908 <SX1276SetRx+0x1e0>)
 800272e:	f003 fc45 	bl	8005fbc <TimerStop>
    switch( SX1276.Settings.Modem )
 8002732:	4c76      	ldr	r4, [pc, #472]	; (800290c <SX1276SetRx+0x1e4>)
 8002734:	7965      	ldrb	r5, [r4, #5]
 8002736:	2d00      	cmp	r5, #0
 8002738:	d003      	beq.n	8002742 <SX1276SetRx+0x1a>
 800273a:	2d01      	cmp	r5, #1
 800273c:	d048      	beq.n	80027d0 <SX1276SetRx+0xa8>
    bool rxContinuous = false;
 800273e:	2700      	movs	r7, #0
 8002740:	e024      	b.n	800278c <SX1276SetRx+0x64>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8002742:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002744:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8002746:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002748:	f7ff fe0c 	bl	8002364 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800274c:	2103      	movs	r1, #3
 800274e:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002750:	3109      	adds	r1, #9
 8002752:	4301      	orrs	r1, r0
 8002754:	2040      	movs	r0, #64	; 0x40
 8002756:	f7ff fdb3 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800275a:	2041      	movs	r0, #65	; 0x41
 800275c:	f7ff fe02 	bl	8002364 <SX1276Read>
 8002760:	213f      	movs	r1, #63	; 0x3f
 8002762:	4249      	negs	r1, r1
 8002764:	4301      	orrs	r1, r0
 8002766:	b2c9      	uxtb	r1, r1
 8002768:	2041      	movs	r0, #65	; 0x41
 800276a:	f7ff fda9 	bl	80022c0 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800276e:	2035      	movs	r0, #53	; 0x35
 8002770:	f7ff fdf8 	bl	8002364 <SX1276Read>
 8002774:	233f      	movs	r3, #63	; 0x3f
 8002776:	4018      	ands	r0, r3
 8002778:	0023      	movs	r3, r4
 800277a:	333e      	adds	r3, #62	; 0x3e
 800277c:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800277e:	211e      	movs	r1, #30
 8002780:	200d      	movs	r0, #13
 8002782:	f7ff fd9d 	bl	80022c0 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8002786:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8002788:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800278a:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	2100      	movs	r1, #0
 8002790:	0052      	lsls	r2, r2, #1
 8002792:	485f      	ldr	r0, [pc, #380]	; (8002910 <SX1276SetRx+0x1e8>)
 8002794:	f004 fccf 	bl	8007136 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8002798:	2301      	movs	r3, #1
 800279a:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 800279c:	2e00      	cmp	r6, #0
 800279e:	d007      	beq.n	80027b0 <SX1276SetRx+0x88>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80027a0:	4d5c      	ldr	r5, [pc, #368]	; (8002914 <SX1276SetRx+0x1ec>)
 80027a2:	0031      	movs	r1, r6
 80027a4:	0028      	movs	r0, r5
 80027a6:	f003 fc35 	bl	8006014 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80027aa:	0028      	movs	r0, r5
 80027ac:	f003 fb8a 	bl	8005ec4 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80027b0:	7963      	ldrb	r3, [r4, #5]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d000      	beq.n	80027b8 <SX1276SetRx+0x90>
 80027b6:	e0a0      	b.n	80028fa <SX1276SetRx+0x1d2>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80027b8:	2005      	movs	r0, #5
 80027ba:	f7ff ff79 	bl	80026b0 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80027be:	4d56      	ldr	r5, [pc, #344]	; (8002918 <SX1276SetRx+0x1f0>)
 80027c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80027c2:	0028      	movs	r0, r5
 80027c4:	f003 fc26 	bl	8006014 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 80027c8:	0028      	movs	r0, r5
 80027ca:	f003 fb7b 	bl	8005ec4 <TimerStart>
}
 80027ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
 80027d0:	0023      	movs	r3, r4
 80027d2:	3355      	adds	r3, #85	; 0x55
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80027d8:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d023      	beq.n	8002826 <SX1276SetRx+0xfe>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80027de:	f7ff fdc1 	bl	8002364 <SX1276Read>
 80027e2:	4338      	orrs	r0, r7
 80027e4:	b2c1      	uxtb	r1, r0
 80027e6:	2033      	movs	r0, #51	; 0x33
 80027e8:	f7ff fd6a 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80027ec:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80027ee:	203b      	movs	r0, #59	; 0x3b
 80027f0:	f7ff fd66 	bl	80022c0 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80027f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80027f6:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d86d      	bhi.n	80028d8 <SX1276SetRx+0x1b0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80027fc:	f7ff fdb2 	bl	8002364 <SX1276Read>
 8002800:	217f      	movs	r1, #127	; 0x7f
 8002802:	4001      	ands	r1, r0
 8002804:	2031      	movs	r0, #49	; 0x31
 8002806:	f7ff fd5b 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800280a:	2030      	movs	r0, #48	; 0x30
 800280c:	2100      	movs	r1, #0
 800280e:	f7ff fd57 	bl	80022c0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8002812:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002814:	2808      	cmp	r0, #8
 8002816:	d81a      	bhi.n	800284e <SX1276SetRx+0x126>
 8002818:	f7fd fc76 	bl	8000108 <__gnu_thumb1_case_uqi>
 800281c:	443d3610 	.word	0x443d3610
 8002820:	5959524b 	.word	0x5959524b
 8002824:	59          	.byte	0x59
 8002825:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8002826:	f7ff fd9d 	bl	8002364 <SX1276Read>
 800282a:	0001      	movs	r1, r0
 800282c:	43b9      	bics	r1, r7
 800282e:	4329      	orrs	r1, r5
 8002830:	b2c9      	uxtb	r1, r1
 8002832:	2033      	movs	r0, #51	; 0x33
 8002834:	f7ff fd44 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8002838:	211d      	movs	r1, #29
 800283a:	e7d8      	b.n	80027ee <SX1276SetRx+0xc6>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800283c:	2148      	movs	r1, #72	; 0x48
 800283e:	202f      	movs	r0, #47	; 0x2f
 8002840:	f7ff fd3e 	bl	80022c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8002844:	68a3      	ldr	r3, [r4, #8]
 8002846:	4a35      	ldr	r2, [pc, #212]	; (800291c <SX1276SetRx+0x1f4>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8002848:	1898      	adds	r0, r3, r2
 800284a:	f7ff fd43 	bl	80022d4 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800284e:	0023      	movs	r3, r4
 8002850:	3356      	adds	r3, #86	; 0x56
 8002852:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002854:	0023      	movs	r3, r4
 8002856:	3353      	adds	r3, #83	; 0x53
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d044      	beq.n	80028e8 <SX1276SetRx+0x1c0>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800285e:	211d      	movs	r1, #29
 8002860:	2011      	movs	r0, #17
 8002862:	f7ff fd2d 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8002866:	2040      	movs	r0, #64	; 0x40
 8002868:	f7ff fd7c 	bl	8002364 <SX1276Read>
 800286c:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800286e:	4001      	ands	r1, r0
 8002870:	2040      	movs	r0, #64	; 0x40
 8002872:	f7ff fd25 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8002876:	2100      	movs	r1, #0
 8002878:	200f      	movs	r0, #15
 800287a:	f7ff fd21 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800287e:	2100      	movs	r1, #0
 8002880:	200d      	movs	r0, #13
 8002882:	f7ff fd1d 	bl	80022c0 <SX1276Write>
        break;
 8002886:	e781      	b.n	800278c <SX1276SetRx+0x64>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8002888:	2144      	movs	r1, #68	; 0x44
 800288a:	202f      	movs	r0, #47	; 0x2f
 800288c:	f7ff fd18 	bl	80022c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8002890:	68a3      	ldr	r3, [r4, #8]
 8002892:	4a23      	ldr	r2, [pc, #140]	; (8002920 <SX1276SetRx+0x1f8>)
 8002894:	e7d8      	b.n	8002848 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8002896:	2144      	movs	r1, #68	; 0x44
 8002898:	202f      	movs	r0, #47	; 0x2f
 800289a:	f7ff fd11 	bl	80022c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800289e:	68a3      	ldr	r3, [r4, #8]
 80028a0:	4a20      	ldr	r2, [pc, #128]	; (8002924 <SX1276SetRx+0x1fc>)
 80028a2:	e7d1      	b.n	8002848 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80028a4:	2144      	movs	r1, #68	; 0x44
 80028a6:	202f      	movs	r0, #47	; 0x2f
 80028a8:	f7ff fd0a 	bl	80022c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80028ac:	68a3      	ldr	r3, [r4, #8]
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <SX1276SetRx+0x200>)
 80028b0:	e7ca      	b.n	8002848 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80028b2:	2144      	movs	r1, #68	; 0x44
 80028b4:	202f      	movs	r0, #47	; 0x2f
 80028b6:	f7ff fd03 	bl	80022c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80028ba:	68a3      	ldr	r3, [r4, #8]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <SX1276SetRx+0x204>)
 80028be:	e7c3      	b.n	8002848 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80028c0:	2144      	movs	r1, #68	; 0x44
 80028c2:	202f      	movs	r0, #47	; 0x2f
 80028c4:	f7ff fcfc 	bl	80022c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80028c8:	68a3      	ldr	r3, [r4, #8]
 80028ca:	4a19      	ldr	r2, [pc, #100]	; (8002930 <SX1276SetRx+0x208>)
 80028cc:	e7bc      	b.n	8002848 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80028d2:	f7ff fcf5 	bl	80022c0 <SX1276Write>
 80028d6:	e7ba      	b.n	800284e <SX1276SetRx+0x126>
 80028d8:	f7ff fd44 	bl	8002364 <SX1276Read>
 80028dc:	2180      	movs	r1, #128	; 0x80
 80028de:	4249      	negs	r1, r1
 80028e0:	4301      	orrs	r1, r0
 80028e2:	b2c9      	uxtb	r1, r1
 80028e4:	2031      	movs	r0, #49	; 0x31
 80028e6:	e7f4      	b.n	80028d2 <SX1276SetRx+0x1aa>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80028e8:	211f      	movs	r1, #31
 80028ea:	2011      	movs	r0, #17
 80028ec:	f7ff fce8 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80028f0:	2040      	movs	r0, #64	; 0x40
 80028f2:	f7ff fd37 	bl	8002364 <SX1276Read>
 80028f6:	213f      	movs	r1, #63	; 0x3f
 80028f8:	e7b9      	b.n	800286e <SX1276SetRx+0x146>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80028fa:	2005      	movs	r0, #5
        if( rxContinuous == true )
 80028fc:	2f00      	cmp	r7, #0
 80028fe:	d100      	bne.n	8002902 <SX1276SetRx+0x1da>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8002900:	2006      	movs	r0, #6
 8002902:	f7ff fed5 	bl	80026b0 <SX1276SetOpMode>
}
 8002906:	e762      	b.n	80027ce <SX1276SetRx+0xa6>
 8002908:	2000055c 	.word	0x2000055c
 800290c:	2000058c 	.word	0x2000058c
 8002910:	200000c0 	.word	0x200000c0
 8002914:	200005f4 	.word	0x200005f4
 8002918:	20000574 	.word	0x20000574
 800291c:	00001e82 	.word	0x00001e82
 8002920:	000028b4 	.word	0x000028b4
 8002924:	00003d04 	.word	0x00003d04
 8002928:	0000515e 	.word	0x0000515e
 800292c:	00007a12 	.word	0x00007a12
 8002930:	0000a2c6 	.word	0x0000a2c6

08002934 <SX1276SetTx>:
{
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	0004      	movs	r4, r0
    TimerStop( &RxTimeoutTimer );
 8002938:	4826      	ldr	r0, [pc, #152]	; (80029d4 <SX1276SetTx+0xa0>)
 800293a:	f003 fb3f 	bl	8005fbc <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800293e:	4d26      	ldr	r5, [pc, #152]	; (80029d8 <SX1276SetTx+0xa4>)
 8002940:	0021      	movs	r1, r4
 8002942:	0028      	movs	r0, r5
 8002944:	f003 fb66 	bl	8006014 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8002948:	4c24      	ldr	r4, [pc, #144]	; (80029dc <SX1276SetTx+0xa8>)
 800294a:	7963      	ldrb	r3, [r4, #5]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <SX1276SetTx+0x32>
 8002950:	2b01      	cmp	r3, #1
 8002952:	d023      	beq.n	800299c <SX1276SetTx+0x68>
    SX1276.Settings.State = RF_TX_RUNNING;
 8002954:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8002956:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8002958:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 800295a:	f003 fab3 	bl	8005ec4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800295e:	2003      	movs	r0, #3
 8002960:	f7ff fea6 	bl	80026b0 <SX1276SetOpMode>
}
 8002964:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002966:	2040      	movs	r0, #64	; 0x40
 8002968:	f7ff fcfc 	bl	8002364 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800296c:	2103      	movs	r1, #3
 800296e:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002970:	310d      	adds	r1, #13
 8002972:	4301      	orrs	r1, r0
 8002974:	2040      	movs	r0, #64	; 0x40
 8002976:	f7ff fca3 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800297a:	2041      	movs	r0, #65	; 0x41
 800297c:	f7ff fcf2 	bl	8002364 <SX1276Read>
 8002980:	213e      	movs	r1, #62	; 0x3e
 8002982:	4001      	ands	r1, r0
 8002984:	2041      	movs	r0, #65	; 0x41
 8002986:	f7ff fc9b 	bl	80022c0 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800298a:	2035      	movs	r0, #53	; 0x35
 800298c:	f7ff fcea 	bl	8002364 <SX1276Read>
 8002990:	233f      	movs	r3, #63	; 0x3f
 8002992:	4018      	ands	r0, r3
 8002994:	0023      	movs	r3, r4
 8002996:	333e      	adds	r3, #62	; 0x3e
 8002998:	7018      	strb	r0, [r3, #0]
        break;
 800299a:	e7db      	b.n	8002954 <SX1276SetTx+0x20>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800299c:	0023      	movs	r3, r4
 800299e:	3353      	adds	r3, #83	; 0x53
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <SX1276SetTx+0x8e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80029a6:	21f5      	movs	r1, #245	; 0xf5
 80029a8:	2011      	movs	r0, #17
 80029aa:	f7ff fc89 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80029ae:	2040      	movs	r0, #64	; 0x40
 80029b0:	f7ff fcd8 	bl	8002364 <SX1276Read>
 80029b4:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80029b6:	4001      	ands	r1, r0
 80029b8:	2040      	movs	r0, #64	; 0x40
 80029ba:	4301      	orrs	r1, r0
 80029bc:	f7ff fc80 	bl	80022c0 <SX1276Write>
 80029c0:	e7c8      	b.n	8002954 <SX1276SetTx+0x20>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80029c2:	21f7      	movs	r1, #247	; 0xf7
 80029c4:	2011      	movs	r0, #17
 80029c6:	f7ff fc7b 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80029ca:	2040      	movs	r0, #64	; 0x40
 80029cc:	f7ff fcca 	bl	8002364 <SX1276Read>
 80029d0:	213f      	movs	r1, #63	; 0x3f
 80029d2:	e7f0      	b.n	80029b6 <SX1276SetTx+0x82>
 80029d4:	200005f4 	.word	0x200005f4
 80029d8:	2000055c 	.word	0x2000055c
 80029dc:	2000058c 	.word	0x2000058c

080029e0 <SX1276StartCad>:
{
 80029e0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 80029e2:	4c0b      	ldr	r4, [pc, #44]	; (8002a10 <SX1276StartCad+0x30>)
 80029e4:	7963      	ldrb	r3, [r4, #5]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d110      	bne.n	8002a0c <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80029ea:	21fa      	movs	r1, #250	; 0xfa
 80029ec:	2011      	movs	r0, #17
 80029ee:	f7ff fc67 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80029f2:	2040      	movs	r0, #64	; 0x40
 80029f4:	f7ff fcb6 	bl	8002364 <SX1276Read>
 80029f8:	2503      	movs	r5, #3
 80029fa:	43a8      	bics	r0, r5
 80029fc:	b2c1      	uxtb	r1, r0
 80029fe:	2040      	movs	r0, #64	; 0x40
 8002a00:	f7ff fc5e 	bl	80022c0 <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8002a04:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 8002a06:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8002a08:	f7ff fe52 	bl	80026b0 <SX1276SetOpMode>
}
 8002a0c:	bd70      	pop	{r4, r5, r6, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	2000058c 	.word	0x2000058c

08002a14 <SX1276SetModem>:
{
 8002a14:	b510      	push	{r4, lr}
 8002a16:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7ff fca3 	bl	8002364 <SX1276Read>
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <SX1276SetModem+0x70>)
 8002a20:	0602      	lsls	r2, r0, #24
 8002a22:	d51a      	bpl.n	8002a5a <SX1276SetModem+0x46>
        SX1276.Settings.Modem = MODEM_LORA;
 8002a24:	2201      	movs	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 8002a26:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 8002a28:	795a      	ldrb	r2, [r3, #5]
 8002a2a:	42a2      	cmp	r2, r4
 8002a2c:	d014      	beq.n	8002a58 <SX1276SetModem+0x44>
    SX1276.Settings.Modem = modem;
 8002a2e:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8002a30:	2c01      	cmp	r4, #1
 8002a32:	d014      	beq.n	8002a5e <SX1276SetModem+0x4a>
 8002a34:	f7ff fe06 	bl	8002644 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff fc93 	bl	8002364 <SX1276Read>
 8002a3e:	217f      	movs	r1, #127	; 0x7f
 8002a40:	4001      	ands	r1, r0
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fc3c 	bl	80022c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2040      	movs	r0, #64	; 0x40
 8002a4c:	f7ff fc38 	bl	80022c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8002a50:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8002a52:	2041      	movs	r0, #65	; 0x41
 8002a54:	f7ff fc34 	bl	80022c0 <SX1276Write>
}
 8002a58:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_FSK;
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	e7e3      	b.n	8002a26 <SX1276SetModem+0x12>
 8002a5e:	f7ff fdf1 	bl	8002644 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8002a62:	0020      	movs	r0, r4
 8002a64:	f7ff fc7e 	bl	8002364 <SX1276Read>
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	4249      	negs	r1, r1
 8002a6c:	4301      	orrs	r1, r0
 8002a6e:	b2c9      	uxtb	r1, r1
 8002a70:	0020      	movs	r0, r4
 8002a72:	f7ff fc25 	bl	80022c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8002a76:	2100      	movs	r1, #0
 8002a78:	2040      	movs	r0, #64	; 0x40
 8002a7a:	f7ff fc21 	bl	80022c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8002a7e:	2100      	movs	r1, #0
 8002a80:	e7e7      	b.n	8002a52 <SX1276SetModem+0x3e>
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	2000058c 	.word	0x2000058c

08002a88 <SX1276Init>:
{
 8002a88:	b570      	push	{r4, r5, r6, lr}
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8002a8a:	4c1b      	ldr	r4, [pc, #108]	; (8002af8 <SX1276Init+0x70>)
    RadioEvents = events;
 8002a8c:	4d1b      	ldr	r5, [pc, #108]	; (8002afc <SX1276Init+0x74>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8002a8e:	0021      	movs	r1, r4
    RadioEvents = events;
 8002a90:	6068      	str	r0, [r5, #4]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8002a92:	481b      	ldr	r0, [pc, #108]	; (8002b00 <SX1276Init+0x78>)
 8002a94:	f003 fa0c 	bl	8005eb0 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8002a98:	0021      	movs	r1, r4
 8002a9a:	481a      	ldr	r0, [pc, #104]	; (8002b04 <SX1276Init+0x7c>)
 8002a9c:	f003 fa08 	bl	8005eb0 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8002aa0:	0021      	movs	r1, r4
 8002aa2:	4819      	ldr	r0, [pc, #100]	; (8002b08 <SX1276Init+0x80>)
 8002aa4:	f003 fa04 	bl	8005eb0 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	2001      	movs	r0, #1
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4798      	blx	r3
    SX1276Reset( );
 8002ab0:	f7ff fbc2 	bl	8002238 <SX1276Reset>
    RxChainCalibration( );
 8002ab4:	f7ff fc60 	bl	8002378 <RxChainCalibration>
 8002ab8:	f7ff fdc4 	bl	8002644 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	4813      	ldr	r0, [pc, #76]	; (8002b0c <SX1276Init+0x84>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4798      	blx	r3
 8002ac4:	4e12      	ldr	r6, [pc, #72]	; (8002b10 <SX1276Init+0x88>)
 8002ac6:	0034      	movs	r4, r6
 8002ac8:	3648      	adds	r6, #72	; 0x48
 8002aca:	3418      	adds	r4, #24
        SX1276SetModem( RadioRegsInit[i].Modem );
 8002acc:	7820      	ldrb	r0, [r4, #0]
 8002ace:	f7ff ffa1 	bl	8002a14 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8002ad2:	78a1      	ldrb	r1, [r4, #2]
 8002ad4:	7860      	ldrb	r0, [r4, #1]
 8002ad6:	3403      	adds	r4, #3
 8002ad8:	f7ff fbf2 	bl	80022c0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002adc:	42b4      	cmp	r4, r6
 8002ade:	d1f5      	bne.n	8002acc <SX1276Init+0x44>
    SX1276SetModem( MODEM_FSK );
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7ff ff97 	bl	8002a14 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <SX1276Init+0x8c>)
 8002aea:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4798      	blx	r3
 8002af2:	3002      	adds	r0, #2
}
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	08003769 	.word	0x08003769
 8002afc:	200000b8 	.word	0x200000b8
 8002b00:	2000055c 	.word	0x2000055c
 8002b04:	200005f4 	.word	0x200005f4
 8002b08:	20000574 	.word	0x20000574
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	08007c68 	.word	0x08007c68
 8002b14:	2000058c 	.word	0x2000058c

08002b18 <SX1276IsChannelFree>:
{
 8002b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return false;
 8002b1a:	2400      	movs	r4, #0
{
 8002b1c:	9301      	str	r3, [sp, #4]
    return SX1276.Settings.State;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <SX1276IsChannelFree+0x54>)
{
 8002b20:	0005      	movs	r5, r0
    if( SX1276GetStatus( ) != RF_IDLE )
 8002b22:	791b      	ldrb	r3, [r3, #4]
{
 8002b24:	000f      	movs	r7, r1
 8002b26:	0016      	movs	r6, r2
    if( SX1276GetStatus( ) != RF_IDLE )
 8002b28:	42a3      	cmp	r3, r4
 8002b2a:	d116      	bne.n	8002b5a <SX1276IsChannelFree+0x42>
    SX1276SetModem( modem );
 8002b2c:	f7ff ff72 	bl	8002a14 <SX1276SetModem>
    SX1276SetChannel( freq );
 8002b30:	0038      	movs	r0, r7
 8002b32:	f7ff fbcf 	bl	80022d4 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002b36:	2005      	movs	r0, #5
 8002b38:	f7ff fdba 	bl	80026b0 <SX1276SetOpMode>
    DelayMs( 1 );
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f004 f80d 	bl	8006b5c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8002b42:	f003 fa78 	bl	8006036 <TimerGetCurrentTime>
 8002b46:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8002b48:	0020      	movs	r0, r4
 8002b4a:	f003 fa7a 	bl	8006042 <TimerGetElapsedTime>
 8002b4e:	9b01      	ldr	r3, [sp, #4]
 8002b50:	4298      	cmp	r0, r3
 8002b52:	d304      	bcc.n	8002b5e <SX1276IsChannelFree+0x46>
    bool status = true;
 8002b54:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8002b56:	f7ff fd8b 	bl	8002670 <SX1276SetSleep>
}
 8002b5a:	0020      	movs	r0, r4
 8002b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 8002b5e:	0028      	movs	r0, r5
 8002b60:	f7ff fd4e 	bl	8002600 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8002b64:	42b0      	cmp	r0, r6
 8002b66:	ddef      	ble.n	8002b48 <SX1276IsChannelFree+0x30>
            status = false;
 8002b68:	2400      	movs	r4, #0
 8002b6a:	e7f4      	b.n	8002b56 <SX1276IsChannelFree+0x3e>
 8002b6c:	2000058c 	.word	0x2000058c

08002b70 <SX1276Random>:
{
 8002b70:	b570      	push	{r4, r5, r6, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002b72:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7ff ff4d 	bl	8002a14 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002b7a:	21ff      	movs	r1, #255	; 0xff
 8002b7c:	2011      	movs	r0, #17
 8002b7e:	f7ff fb9f 	bl	80022c0 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002b82:	2005      	movs	r0, #5
 8002b84:	f7ff fd94 	bl	80026b0 <SX1276SetOpMode>
    uint32_t rnd = 0;
 8002b88:	0025      	movs	r5, r4
        DelayMs( 1 );
 8002b8a:	2601      	movs	r6, #1
 8002b8c:	0030      	movs	r0, r6
 8002b8e:	f003 ffe5 	bl	8006b5c <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8002b92:	202c      	movs	r0, #44	; 0x2c
 8002b94:	f7ff fbe6 	bl	8002364 <SX1276Read>
 8002b98:	4030      	ands	r0, r6
 8002b9a:	40a0      	lsls	r0, r4
 8002b9c:	3401      	adds	r4, #1
 8002b9e:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8002ba0:	2c20      	cmp	r4, #32
 8002ba2:	d1f3      	bne.n	8002b8c <SX1276Random+0x1c>
    SX1276SetSleep( );
 8002ba4:	f7ff fd64 	bl	8002670 <SX1276SetSleep>
}
 8002ba8:	0028      	movs	r0, r5
 8002baa:	bd70      	pop	{r4, r5, r6, pc}

08002bac <SX1276SetRxConfig>:
{
 8002bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bae:	b08d      	sub	sp, #52	; 0x34
 8002bb0:	9306      	str	r3, [sp, #24]
 8002bb2:	ab12      	add	r3, sp, #72	; 0x48
 8002bb4:	0016      	movs	r6, r2
 8002bb6:	cb04      	ldmia	r3!, {r2}
 8002bb8:	0004      	movs	r4, r0
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	9208      	str	r2, [sp, #32]
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	ab14      	add	r3, sp, #80	; 0x50
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	aa0c      	add	r2, sp, #48	; 0x30
 8002bc6:	9305      	str	r3, [sp, #20]
 8002bc8:	ab15      	add	r3, sp, #84	; 0x54
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	000d      	movs	r5, r1
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	ab16      	add	r3, sp, #88	; 0x58
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	9303      	str	r3, [sp, #12]
 8002bd6:	ab17      	add	r3, sp, #92	; 0x5c
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	9304      	str	r3, [sp, #16]
 8002bdc:	ab18      	add	r3, sp, #96	; 0x60
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	930a      	str	r3, [sp, #40]	; 0x28
 8002be2:	ab19      	add	r3, sp, #100	; 0x64
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002be8:	2319      	movs	r3, #25
 8002bea:	189b      	adds	r3, r3, r2
 8002bec:	7fdf      	ldrb	r7, [r3, #31]
 8002bee:	231d      	movs	r3, #29
 8002bf0:	189b      	adds	r3, r3, r2
 8002bf2:	7fdb      	ldrb	r3, [r3, #31]
 8002bf4:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 8002bf6:	f7ff ff0d 	bl	8002a14 <SX1276SetModem>
    switch( modem )
 8002bfa:	2c00      	cmp	r4, #0
 8002bfc:	d004      	beq.n	8002c08 <SX1276SetRxConfig+0x5c>
 8002bfe:	2c01      	cmp	r4, #1
 8002c00:	d100      	bne.n	8002c04 <SX1276SetRxConfig+0x58>
 8002c02:	e084      	b.n	8002d0e <SX1276SetRxConfig+0x162>
}
 8002c04:	b00d      	add	sp, #52	; 0x34
 8002c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002c08:	4ca8      	ldr	r4, [pc, #672]	; (8002eac <SX1276SetRxConfig+0x300>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8002c0a:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002c0c:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8002c0e:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002c10:	1ce3      	adds	r3, r4, #3
 8002c12:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8002c14:	9a03      	ldr	r2, [sp, #12]
 8002c16:	1d23      	adds	r3, r4, #4
 8002c18:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8002c1a:	9a04      	ldr	r2, [sp, #16]
 8002c1c:	1d63      	adds	r3, r4, #5
 8002c1e:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8002c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8002c22:	1da3      	adds	r3, r4, #6
 8002c24:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8002c26:	1de3      	adds	r3, r4, #7
 8002c28:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002c2a:	9b01      	ldr	r3, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 8002c2c:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002c2e:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002c30:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8002c32:	0030      	movs	r0, r6
 8002c34:	f7ff fa76 	bl	8002124 <__aeabi_ui2d>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	000b      	movs	r3, r1
 8002c3c:	0006      	movs	r6, r0
 8002c3e:	000f      	movs	r7, r1
 8002c40:	2000      	movs	r0, #0
 8002c42:	499b      	ldr	r1, [pc, #620]	; (8002eb0 <SX1276SetRxConfig+0x304>)
 8002c44:	f7fe f83a 	bl	8000cbc <__aeabi_ddiv>
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4b9a      	ldr	r3, [pc, #616]	; (8002eb4 <SX1276SetRxConfig+0x308>)
 8002c4c:	f7fe fc40 	bl	80014d0 <__aeabi_dmul>
 8002c50:	9006      	str	r0, [sp, #24]
 8002c52:	9107      	str	r1, [sp, #28]
 8002c54:	9805      	ldr	r0, [sp, #20]
 8002c56:	f7ff fa2b 	bl	80020b0 <__aeabi_i2d>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	000b      	movs	r3, r1
 8002c5e:	9806      	ldr	r0, [sp, #24]
 8002c60:	9907      	ldr	r1, [sp, #28]
 8002c62:	f7fe fc35 	bl	80014d0 <__aeabi_dmul>
 8002c66:	2200      	movs	r2, #0
 8002c68:	4b93      	ldr	r3, [pc, #588]	; (8002eb8 <SX1276SetRxConfig+0x30c>)
 8002c6a:	f7fe fc31 	bl	80014d0 <__aeabi_dmul>
 8002c6e:	f7fd fc29 	bl	80004c4 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002c72:	0032      	movs	r2, r6
 8002c74:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8002c76:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002c78:	4990      	ldr	r1, [pc, #576]	; (8002ebc <SX1276SetRxConfig+0x310>)
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7fe f81e 	bl	8000cbc <__aeabi_ddiv>
 8002c80:	f7fd fc20 	bl	80004c4 <__aeabi_d2uiz>
 8002c84:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002c86:	0a21      	lsrs	r1, r4, #8
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f7ff fb19 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002c8e:	b2e1      	uxtb	r1, r4
 8002c90:	2003      	movs	r0, #3
 8002c92:	f7ff fb15 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8002c96:	0028      	movs	r0, r5
 8002c98:	f7ff faa0 	bl	80021dc <GetFskBandwidthRegValue>
 8002c9c:	0001      	movs	r1, r0
 8002c9e:	2012      	movs	r0, #18
 8002ca0:	f7ff fb0e 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8002ca4:	9808      	ldr	r0, [sp, #32]
 8002ca6:	f7ff fa99 	bl	80021dc <GetFskBandwidthRegValue>
 8002caa:	0001      	movs	r1, r0
 8002cac:	2013      	movs	r0, #19
 8002cae:	f7ff fb07 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002cb2:	9b01      	ldr	r3, [sp, #4]
 8002cb4:	2025      	movs	r0, #37	; 0x25
 8002cb6:	0a19      	lsrs	r1, r3, #8
 8002cb8:	f7ff fb02 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002cbc:	466b      	mov	r3, sp
 8002cbe:	2026      	movs	r0, #38	; 0x26
 8002cc0:	7919      	ldrb	r1, [r3, #4]
 8002cc2:	f7ff fafd 	bl	80022c0 <SX1276Write>
            if( fixLen == 1 )
 8002cc6:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8002cc8:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d100      	bne.n	8002cd0 <SX1276SetRxConfig+0x124>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8002cce:	21ff      	movs	r1, #255	; 0xff
 8002cd0:	2032      	movs	r0, #50	; 0x32
 8002cd2:	f7ff faf5 	bl	80022c0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8002cd6:	2030      	movs	r0, #48	; 0x30
 8002cd8:	f7ff fb44 	bl	8002364 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8002cdc:	216f      	movs	r1, #111	; 0x6f
 8002cde:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	9b02      	ldr	r3, [sp, #8]
 8002ce4:	428b      	cmp	r3, r1
 8002ce6:	d100      	bne.n	8002cea <SX1276SetRxConfig+0x13e>
 8002ce8:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 8002cea:	9b04      	ldr	r3, [sp, #16]
 8002cec:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002cee:	4318      	orrs	r0, r3
 8002cf0:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8002cf2:	b2c9      	uxtb	r1, r1
 8002cf4:	2030      	movs	r0, #48	; 0x30
 8002cf6:	f7ff fae3 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002cfa:	2031      	movs	r0, #49	; 0x31
 8002cfc:	f7ff fb32 	bl	8002364 <SX1276Read>
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	4301      	orrs	r1, r0
 8002d04:	2031      	movs	r0, #49	; 0x31
 8002d06:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002d08:	f7ff fada 	bl	80022c0 <SX1276Write>
}
 8002d0c:	e77a      	b.n	8002c04 <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 8002d0e:	2d02      	cmp	r5, #2
 8002d10:	d900      	bls.n	8002d14 <SX1276SetRxConfig+0x168>
 8002d12:	e7fe      	b.n	8002d12 <SX1276SetRxConfig+0x166>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002d14:	4b65      	ldr	r3, [pc, #404]	; (8002eac <SX1276SetRxConfig+0x300>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8002d16:	9906      	ldr	r1, [sp, #24]
 8002d18:	001a      	movs	r2, r3
 8002d1a:	324d      	adds	r2, #77	; 0x4d
 8002d1c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002d1e:	001a      	movs	r2, r3
 8002d20:	9901      	ldr	r1, [sp, #4]
 8002d22:	324e      	adds	r2, #78	; 0x4e
 8002d24:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002d26:	001a      	movs	r2, r3
 8002d28:	9902      	ldr	r1, [sp, #8]
 8002d2a:	3250      	adds	r2, #80	; 0x50
 8002d2c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8002d2e:	001a      	movs	r2, r3
 8002d30:	9903      	ldr	r1, [sp, #12]
 8002d32:	3251      	adds	r2, #81	; 0x51
 8002d34:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8002d36:	001a      	movs	r2, r3
 8002d38:	9904      	ldr	r1, [sp, #16]
 8002d3a:	3252      	adds	r2, #82	; 0x52
 8002d3c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002d3e:	001a      	movs	r2, r3
 8002d40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d42:	3253      	adds	r2, #83	; 0x53
 8002d44:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8002d46:	001a      	movs	r2, r3
 8002d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d4a:	3254      	adds	r2, #84	; 0x54
 8002d4c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002d4e:	001a      	movs	r2, r3
 8002d50:	3255      	adds	r2, #85	; 0x55
 8002d52:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002d54:	001a      	movs	r2, r3
 8002d56:	9909      	ldr	r1, [sp, #36]	; 0x24
            bandwidth += 7;
 8002d58:	1dec      	adds	r4, r5, #7
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002d5a:	3256      	adds	r2, #86	; 0x56
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002d5c:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8002d5e:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002d60:	7011      	strb	r1, [r2, #0]
            if( datarate > 12 )
 8002d62:	2e0c      	cmp	r6, #12
 8002d64:	d900      	bls.n	8002d68 <SX1276SetRxConfig+0x1bc>
 8002d66:	e09c      	b.n	8002ea2 <SX1276SetRxConfig+0x2f6>
            else if( datarate < 6 )
 8002d68:	2e05      	cmp	r6, #5
 8002d6a:	d800      	bhi.n	8002d6e <SX1276SetRxConfig+0x1c2>
 8002d6c:	e085      	b.n	8002e7a <SX1276SetRxConfig+0x2ce>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002d6e:	2c07      	cmp	r4, #7
 8002d70:	d17c      	bne.n	8002e6c <SX1276SetRxConfig+0x2c0>
 8002d72:	0032      	movs	r2, r6
 8002d74:	3a0b      	subs	r2, #11
 8002d76:	2a01      	cmp	r2, #1
 8002d78:	d87c      	bhi.n	8002e74 <SX1276SetRxConfig+0x2c8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	334c      	adds	r3, #76	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002d7e:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002d80:	701a      	strb	r2, [r3, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002d82:	f7ff faef 	bl	8002364 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002d86:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002d88:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002d8a:	0059      	lsls	r1, r3, #1
 8002d8c:	9b02      	ldr	r3, [sp, #8]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8002d8e:	2708      	movs	r7, #8
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002d90:	4319      	orrs	r1, r3
 8002d92:	0123      	lsls	r3, r4, #4
 8002d94:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002d96:	b2c9      	uxtb	r1, r1
 8002d98:	f7ff fa92 	bl	80022c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002d9c:	201e      	movs	r0, #30
 8002d9e:	f7ff fae1 	bl	8002364 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002da2:	9b05      	ldr	r3, [sp, #20]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8002da4:	4038      	ands	r0, r7
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002da6:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002da8:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002daa:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002dac:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002dae:	4319      	orrs	r1, r3
 8002db0:	4301      	orrs	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002db2:	0130      	lsls	r0, r6, #4
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002db4:	4301      	orrs	r1, r0
 8002db6:	b2c9      	uxtb	r1, r1
 8002db8:	201e      	movs	r0, #30
 8002dba:	f7ff fa81 	bl	80022c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002dbe:	2026      	movs	r0, #38	; 0x26
 8002dc0:	f7ff fad0 	bl	8002364 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002dc4:	4d39      	ldr	r5, [pc, #228]	; (8002eac <SX1276SetRxConfig+0x300>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002dc6:	43b8      	bics	r0, r7
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002dc8:	002b      	movs	r3, r5
 8002dca:	334c      	adds	r3, #76	; 0x4c
 8002dcc:	7819      	ldrb	r1, [r3, #0]
 8002dce:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8002dd0:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8002dd2:	b2c9      	uxtb	r1, r1
 8002dd4:	2026      	movs	r0, #38	; 0x26
 8002dd6:	f7ff fa73 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8002dda:	466b      	mov	r3, sp
 8002ddc:	201f      	movs	r0, #31
 8002dde:	7d19      	ldrb	r1, [r3, #20]
 8002de0:	f7ff fa6e 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002de4:	9b01      	ldr	r3, [sp, #4]
 8002de6:	2020      	movs	r0, #32
 8002de8:	0a19      	lsrs	r1, r3, #8
 8002dea:	f7ff fa69 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002dee:	466b      	mov	r3, sp
 8002df0:	2021      	movs	r0, #33	; 0x21
 8002df2:	7919      	ldrb	r1, [r3, #4]
 8002df4:	f7ff fa64 	bl	80022c0 <SX1276Write>
            if( fixLen == 1 )
 8002df8:	9b02      	ldr	r3, [sp, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <SX1276SetRxConfig+0x25a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8002dfe:	9903      	ldr	r1, [sp, #12]
 8002e00:	2022      	movs	r0, #34	; 0x22
 8002e02:	f7ff fa5d 	bl	80022c0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002e06:	002b      	movs	r3, r5
 8002e08:	3353      	adds	r3, #83	; 0x53
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00f      	beq.n	8002e30 <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002e10:	2044      	movs	r0, #68	; 0x44
 8002e12:	f7ff faa7 	bl	8002364 <SX1276Read>
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	4249      	negs	r1, r1
 8002e1a:	4301      	orrs	r1, r0
 8002e1c:	b2c9      	uxtb	r1, r1
 8002e1e:	2044      	movs	r0, #68	; 0x44
 8002e20:	f7ff fa4e 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8002e24:	002b      	movs	r3, r5
 8002e26:	3354      	adds	r3, #84	; 0x54
 8002e28:	7819      	ldrb	r1, [r3, #0]
 8002e2a:	2024      	movs	r0, #36	; 0x24
 8002e2c:	f7ff fa48 	bl	80022c0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8002e30:	2c09      	cmp	r4, #9
 8002e32:	d128      	bne.n	8002e86 <SX1276SetRxConfig+0x2da>
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <SX1276SetRxConfig+0x314>)
 8002e36:	68aa      	ldr	r2, [r5, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8002e38:	2102      	movs	r1, #2
 8002e3a:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d91e      	bls.n	8002e7e <SX1276SetRxConfig+0x2d2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8002e40:	f7ff fa3e 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8002e44:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8002e46:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8002e48:	f7ff fa3a 	bl	80022c0 <SX1276Write>
 8002e4c:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002e4e:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8002e50:	2e06      	cmp	r6, #6
 8002e52:	d11b      	bne.n	8002e8c <SX1276SetRxConfig+0x2e0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002e54:	f7ff fa86 	bl	8002364 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002e58:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002e5a:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002e5c:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002e5e:	b2c9      	uxtb	r1, r1
 8002e60:	2031      	movs	r0, #49	; 0x31
 8002e62:	f7ff fa2d 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002e66:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002e68:	2037      	movs	r0, #55	; 0x37
 8002e6a:	e74d      	b.n	8002d08 <SX1276SetRxConfig+0x15c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002e6c:	2c08      	cmp	r4, #8
 8002e6e:	d101      	bne.n	8002e74 <SX1276SetRxConfig+0x2c8>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8002e70:	2e0c      	cmp	r6, #12
 8002e72:	d082      	beq.n	8002d7a <SX1276SetRxConfig+0x1ce>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002e74:	334c      	adds	r3, #76	; 0x4c
 8002e76:	2200      	movs	r2, #0
 8002e78:	e781      	b.n	8002d7e <SX1276SetRxConfig+0x1d2>
                datarate = 6;
 8002e7a:	2606      	movs	r6, #6
 8002e7c:	e7fa      	b.n	8002e74 <SX1276SetRxConfig+0x2c8>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8002e7e:	f7ff fa1f 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8002e82:	217f      	movs	r1, #127	; 0x7f
 8002e84:	e7df      	b.n	8002e46 <SX1276SetRxConfig+0x29a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8002e86:	2103      	movs	r1, #3
 8002e88:	2036      	movs	r0, #54	; 0x36
 8002e8a:	e7dd      	b.n	8002e48 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002e8c:	f7ff fa6a 	bl	8002364 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002e90:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002e92:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002e94:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002e96:	b2c9      	uxtb	r1, r1
 8002e98:	2031      	movs	r0, #49	; 0x31
 8002e9a:	f7ff fa11 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002e9e:	210a      	movs	r1, #10
 8002ea0:	e7e2      	b.n	8002e68 <SX1276SetRxConfig+0x2bc>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002ea2:	260c      	movs	r6, #12
 8002ea4:	2d02      	cmp	r5, #2
 8002ea6:	d0e5      	beq.n	8002e74 <SX1276SetRxConfig+0x2c8>
 8002ea8:	e767      	b.n	8002d7a <SX1276SetRxConfig+0x1ce>
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	2000058c 	.word	0x2000058c
 8002eb0:	3ff00000 	.word	0x3ff00000
 8002eb4:	40200000 	.word	0x40200000
 8002eb8:	408f4000 	.word	0x408f4000
 8002ebc:	417e8480 	.word	0x417e8480
 8002ec0:	1f4add40 	.word	0x1f4add40

08002ec4 <SX1276SetTxConfig>:
{
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec6:	000e      	movs	r6, r1
 8002ec8:	b089      	sub	sp, #36	; 0x24
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	ab0e      	add	r3, sp, #56	; 0x38
 8002ece:	cb10      	ldmia	r3!, {r4}
 8002ed0:	0005      	movs	r5, r0
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	9203      	str	r2, [sp, #12]
 8002ed6:	9304      	str	r3, [sp, #16]
 8002ed8:	ab10      	add	r3, sp, #64	; 0x40
 8002eda:	881f      	ldrh	r7, [r3, #0]
 8002edc:	ab11      	add	r3, sp, #68	; 0x44
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	ab12      	add	r3, sp, #72	; 0x48
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	ab13      	add	r3, sp, #76	; 0x4c
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	9305      	str	r3, [sp, #20]
 8002eee:	ab14      	add	r3, sp, #80	; 0x50
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	9307      	str	r3, [sp, #28]
 8002ef4:	ab15      	add	r3, sp, #84	; 0x54
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	9306      	str	r3, [sp, #24]
    SX1276SetModem( modem );
 8002efa:	f7ff fd8b 	bl	8002a14 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8002efe:	4b86      	ldr	r3, [pc, #536]	; (8003118 <SX1276SetTxConfig+0x254>)
 8002f00:	0030      	movs	r0, r6
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4798      	blx	r3
    switch( modem )
 8002f08:	2d00      	cmp	r5, #0
 8002f0a:	d003      	beq.n	8002f14 <SX1276SetTxConfig+0x50>
 8002f0c:	2d01      	cmp	r5, #1
 8002f0e:	d05e      	beq.n	8002fce <SX1276SetTxConfig+0x10a>
}
 8002f10:	b009      	add	sp, #36	; 0x24
 8002f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Power = power;
 8002f14:	4b81      	ldr	r3, [pc, #516]	; (800311c <SX1276SetTxConfig+0x258>)
            SX1276.Settings.Fsk.Fdev = fdev;
 8002f16:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002f18:	9901      	ldr	r1, [sp, #4]
            SX1276.Settings.Fsk.Fdev = fdev;
 8002f1a:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002f1c:	9a00      	ldr	r2, [sp, #0]
            SX1276.Settings.Fsk.Power = power;
 8002f1e:	731e      	strb	r6, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002f20:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002f22:	1cda      	adds	r2, r3, #3
 8002f24:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8002f26:	9902      	ldr	r1, [sp, #8]
 8002f28:	1d5a      	adds	r2, r3, #5
 8002f2a:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8002f2c:	9906      	ldr	r1, [sp, #24]
 8002f2e:	1d9a      	adds	r2, r3, #6
 8002f30:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8002f32:	9a16      	ldr	r2, [sp, #88]	; 0x58
            SX1276.Settings.Fsk.Datarate = datarate;
 8002f34:	61dc      	str	r4, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002f38:	841f      	strh	r7, [r3, #32]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8002f3a:	9803      	ldr	r0, [sp, #12]
 8002f3c:	f7ff f8f2 	bl	8002124 <__aeabi_ui2d>
 8002f40:	2200      	movs	r2, #0
 8002f42:	4b77      	ldr	r3, [pc, #476]	; (8003120 <SX1276SetTxConfig+0x25c>)
 8002f44:	f7fd feba 	bl	8000cbc <__aeabi_ddiv>
 8002f48:	f7fd fabc 	bl	80004c4 <__aeabi_d2uiz>
 8002f4c:	b286      	uxth	r6, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8002f4e:	0a31      	lsrs	r1, r6, #8
 8002f50:	2004      	movs	r0, #4
 8002f52:	f7ff f9b5 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8002f56:	b2f1      	uxtb	r1, r6
 8002f58:	2005      	movs	r0, #5
 8002f5a:	f7ff f9b1 	bl	80022c0 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002f5e:	0020      	movs	r0, r4
 8002f60:	f7ff f8e0 	bl	8002124 <__aeabi_ui2d>
 8002f64:	000b      	movs	r3, r1
 8002f66:	0002      	movs	r2, r0
 8002f68:	496e      	ldr	r1, [pc, #440]	; (8003124 <SX1276SetTxConfig+0x260>)
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7fd fea6 	bl	8000cbc <__aeabi_ddiv>
 8002f70:	f7fd faa8 	bl	80004c4 <__aeabi_d2uiz>
 8002f74:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002f76:	0a21      	lsrs	r1, r4, #8
 8002f78:	2002      	movs	r0, #2
 8002f7a:	f7ff f9a1 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002f7e:	b2e1      	uxtb	r1, r4
 8002f80:	2003      	movs	r0, #3
 8002f82:	f7ff f99d 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002f86:	0a39      	lsrs	r1, r7, #8
 8002f88:	2025      	movs	r0, #37	; 0x25
 8002f8a:	f7ff f999 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8002f8e:	b2f9      	uxtb	r1, r7
 8002f90:	2026      	movs	r0, #38	; 0x26
 8002f92:	f7ff f995 	bl	80022c0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8002f96:	2030      	movs	r0, #48	; 0x30
 8002f98:	f7ff f9e4 	bl	8002364 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8002f9c:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002f9e:	9b01      	ldr	r3, [sp, #4]
                           RF_PACKETCONFIG1_CRC_MASK &
 8002fa0:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <SX1276SetTxConfig+0xe6>
 8002fa6:	2580      	movs	r5, #128	; 0x80
 8002fa8:	426d      	negs	r5, r5
                           ( crcOn << 4 ) );
 8002faa:	9b02      	ldr	r3, [sp, #8]
 8002fac:	0118      	lsls	r0, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002fae:	4301      	orrs	r1, r0
 8002fb0:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 8002fb2:	b2c9      	uxtb	r1, r1
 8002fb4:	2030      	movs	r0, #48	; 0x30
 8002fb6:	f7ff f983 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002fba:	2031      	movs	r0, #49	; 0x31
 8002fbc:	f7ff f9d2 	bl	8002364 <SX1276Read>
 8002fc0:	2140      	movs	r1, #64	; 0x40
 8002fc2:	4301      	orrs	r1, r0
 8002fc4:	2031      	movs	r0, #49	; 0x31
 8002fc6:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002fc8:	f7ff f97a 	bl	80022c0 <SX1276Write>
}
 8002fcc:	e7a0      	b.n	8002f10 <SX1276SetTxConfig+0x4c>
            SX1276.Settings.LoRa.Power = power;
 8002fce:	4d53      	ldr	r5, [pc, #332]	; (800311c <SX1276SetTxConfig+0x258>)
 8002fd0:	002b      	movs	r3, r5
 8002fd2:	3340      	adds	r3, #64	; 0x40
 8002fd4:	701e      	strb	r6, [r3, #0]
            if( bandwidth > 2 )
 8002fd6:	9b00      	ldr	r3, [sp, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d900      	bls.n	8002fde <SX1276SetTxConfig+0x11a>
 8002fdc:	e7fe      	b.n	8002fdc <SX1276SetTxConfig+0x118>
            bandwidth += 7;
 8002fde:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.LoRa.Coderate = coderate;
 8002fe0:	9a04      	ldr	r2, [sp, #16]
            bandwidth += 7;
 8002fe2:	1dde      	adds	r6, r3, #7
            SX1276.Settings.LoRa.Coderate = coderate;
 8002fe4:	002b      	movs	r3, r5
 8002fe6:	334d      	adds	r3, #77	; 0x4d
 8002fe8:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002fea:	002b      	movs	r3, r5
 8002fec:	334e      	adds	r3, #78	; 0x4e
 8002fee:	801f      	strh	r7, [r3, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002ff0:	002b      	movs	r3, r5
 8002ff2:	9a01      	ldr	r2, [sp, #4]
 8002ff4:	3350      	adds	r3, #80	; 0x50
 8002ff6:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002ff8:	002b      	movs	r3, r5
 8002ffa:	9a05      	ldr	r2, [sp, #20]
 8002ffc:	3353      	adds	r3, #83	; 0x53
 8002ffe:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003000:	002b      	movs	r3, r5
 8003002:	9a07      	ldr	r2, [sp, #28]
 8003004:	3354      	adds	r3, #84	; 0x54
 8003006:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003008:	002b      	movs	r3, r5
 800300a:	9a02      	ldr	r2, [sp, #8]
 800300c:	3352      	adds	r3, #82	; 0x52
 800300e:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8003010:	002b      	movs	r3, r5
 8003012:	9a06      	ldr	r2, [sp, #24]
 8003014:	3355      	adds	r3, #85	; 0x55
 8003016:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8003018:	9b16      	ldr	r3, [sp, #88]	; 0x58
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800301a:	646e      	str	r6, [r5, #68]	; 0x44
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800301c:	65ab      	str	r3, [r5, #88]	; 0x58
            SX1276.Settings.LoRa.Datarate = datarate;
 800301e:	64ac      	str	r4, [r5, #72]	; 0x48
 8003020:	002b      	movs	r3, r5
            if( datarate > 12 )
 8003022:	2c0c      	cmp	r4, #12
 8003024:	d872      	bhi.n	800310c <SX1276SetTxConfig+0x248>
            else if( datarate < 6 )
 8003026:	2c05      	cmp	r4, #5
 8003028:	d963      	bls.n	80030f2 <SX1276SetTxConfig+0x22e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800302a:	2e07      	cmp	r6, #7
 800302c:	d15a      	bne.n	80030e4 <SX1276SetTxConfig+0x220>
 800302e:	0022      	movs	r2, r4
 8003030:	3a0b      	subs	r2, #11
 8003032:	2a01      	cmp	r2, #1
 8003034:	d85a      	bhi.n	80030ec <SX1276SetTxConfig+0x228>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003036:	2201      	movs	r2, #1
 8003038:	334c      	adds	r3, #76	; 0x4c
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800303a:	701a      	strb	r2, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800303c:	9b05      	ldr	r3, [sp, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00f      	beq.n	8003062 <SX1276SetTxConfig+0x19e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003042:	2044      	movs	r0, #68	; 0x44
 8003044:	f7ff f98e 	bl	8002364 <SX1276Read>
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	4249      	negs	r1, r1
 800304c:	4301      	orrs	r1, r0
 800304e:	b2c9      	uxtb	r1, r1
 8003050:	2044      	movs	r0, #68	; 0x44
 8003052:	f7ff f935 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8003056:	4b31      	ldr	r3, [pc, #196]	; (800311c <SX1276SetTxConfig+0x258>)
 8003058:	2024      	movs	r0, #36	; 0x24
 800305a:	3354      	adds	r3, #84	; 0x54
 800305c:	7819      	ldrb	r1, [r3, #0]
 800305e:	f7ff f92f 	bl	80022c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8003062:	201d      	movs	r0, #29
 8003064:	f7ff f97e 	bl	8002364 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003068:	9b04      	ldr	r3, [sp, #16]
 800306a:	0136      	lsls	r6, r6, #4
 800306c:	0059      	lsls	r1, r3, #1
 800306e:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003070:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003072:	430b      	orrs	r3, r1
 8003074:	0019      	movs	r1, r3
 8003076:	4331      	orrs	r1, r6
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003078:	b2c9      	uxtb	r1, r1
 800307a:	f7ff f921 	bl	80022c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800307e:	201e      	movs	r0, #30
 8003080:	f7ff f970 	bl	8002364 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8003084:	9b02      	ldr	r3, [sp, #8]
 8003086:	0121      	lsls	r1, r4, #4
 8003088:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800308a:	4319      	orrs	r1, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800308c:	230b      	movs	r3, #11
 800308e:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003090:	4301      	orrs	r1, r0
 8003092:	b2c9      	uxtb	r1, r1
 8003094:	201e      	movs	r0, #30
 8003096:	f7ff f913 	bl	80022c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800309a:	2026      	movs	r0, #38	; 0x26
 800309c:	f7ff f962 	bl	8002364 <SX1276Read>
 80030a0:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80030a2:	354c      	adds	r5, #76	; 0x4c
 80030a4:	7829      	ldrb	r1, [r5, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80030a6:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80030a8:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80030aa:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 80030ac:	b2c9      	uxtb	r1, r1
 80030ae:	2026      	movs	r0, #38	; 0x26
 80030b0:	f7ff f906 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80030b4:	0a39      	lsrs	r1, r7, #8
 80030b6:	2020      	movs	r0, #32
 80030b8:	f7ff f902 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80030bc:	2021      	movs	r0, #33	; 0x21
 80030be:	b2f9      	uxtb	r1, r7
 80030c0:	f7ff f8fe 	bl	80022c0 <SX1276Write>
 80030c4:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80030c6:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80030c8:	2c06      	cmp	r4, #6
 80030ca:	d114      	bne.n	80030f6 <SX1276SetTxConfig+0x232>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80030cc:	f7ff f94a 	bl	8002364 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80030d0:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80030d2:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80030d4:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80030d6:	b2c9      	uxtb	r1, r1
 80030d8:	2031      	movs	r0, #49	; 0x31
 80030da:	f7ff f8f1 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80030de:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80030e0:	2037      	movs	r0, #55	; 0x37
 80030e2:	e771      	b.n	8002fc8 <SX1276SetTxConfig+0x104>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80030e4:	2e08      	cmp	r6, #8
 80030e6:	d101      	bne.n	80030ec <SX1276SetTxConfig+0x228>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80030e8:	2c0c      	cmp	r4, #12
 80030ea:	d0a4      	beq.n	8003036 <SX1276SetTxConfig+0x172>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80030ec:	334c      	adds	r3, #76	; 0x4c
 80030ee:	2200      	movs	r2, #0
 80030f0:	e7a3      	b.n	800303a <SX1276SetTxConfig+0x176>
                datarate = 6;
 80030f2:	2406      	movs	r4, #6
 80030f4:	e7fa      	b.n	80030ec <SX1276SetTxConfig+0x228>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80030f6:	f7ff f935 	bl	8002364 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80030fa:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80030fc:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80030fe:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003100:	b2c9      	uxtb	r1, r1
 8003102:	2031      	movs	r0, #49	; 0x31
 8003104:	f7ff f8dc 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003108:	210a      	movs	r1, #10
 800310a:	e7e9      	b.n	80030e0 <SX1276SetTxConfig+0x21c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800310c:	9a00      	ldr	r2, [sp, #0]
 800310e:	240c      	movs	r4, #12
 8003110:	2a02      	cmp	r2, #2
 8003112:	d0eb      	beq.n	80030ec <SX1276SetTxConfig+0x228>
 8003114:	e78f      	b.n	8003036 <SX1276SetTxConfig+0x172>
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	200000b8 	.word	0x200000b8
 800311c:	2000058c 	.word	0x2000058c
 8003120:	404e8480 	.word	0x404e8480
 8003124:	417e8480 	.word	0x417e8480

08003128 <SX1276SetTxContinuousWave>:
{
 8003128:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 800312a:	24fa      	movs	r4, #250	; 0xfa
{
 800312c:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 800312e:	00a4      	lsls	r4, r4, #2
 8003130:	4354      	muls	r4, r2
{
 8003132:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8003134:	f7ff f8ce 	bl	80022d4 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8003138:	2305      	movs	r3, #5
 800313a:	9302      	str	r3, [sp, #8]
 800313c:	2396      	movs	r3, #150	; 0x96
 800313e:	2000      	movs	r0, #0
 8003140:	015b      	lsls	r3, r3, #5
 8003142:	0002      	movs	r2, r0
 8003144:	0029      	movs	r1, r5
 8003146:	9007      	str	r0, [sp, #28]
 8003148:	9006      	str	r0, [sp, #24]
 800314a:	9005      	str	r0, [sp, #20]
 800314c:	9004      	str	r0, [sp, #16]
 800314e:	9003      	str	r0, [sp, #12]
 8003150:	9001      	str	r0, [sp, #4]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	9408      	str	r4, [sp, #32]
 8003156:	0003      	movs	r3, r0
 8003158:	f7ff feb4 	bl	8002ec4 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800315c:	2031      	movs	r0, #49	; 0x31
 800315e:	f7ff f901 	bl	8002364 <SX1276Read>
 8003162:	2540      	movs	r5, #64	; 0x40
 8003164:	43a8      	bics	r0, r5
 8003166:	b2c1      	uxtb	r1, r0
 8003168:	2031      	movs	r0, #49	; 0x31
 800316a:	f7ff f8a9 	bl	80022c0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800316e:	0028      	movs	r0, r5
 8003170:	21f0      	movs	r1, #240	; 0xf0
 8003172:	f7ff f8a5 	bl	80022c0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8003176:	21a0      	movs	r1, #160	; 0xa0
 8003178:	2041      	movs	r0, #65	; 0x41
 800317a:	f7ff f8a1 	bl	80022c0 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800317e:	4d08      	ldr	r5, [pc, #32]	; (80031a0 <SX1276SetTxContinuousWave+0x78>)
 8003180:	0021      	movs	r1, r4
 8003182:	0028      	movs	r0, r5
 8003184:	f002 ff46 	bl	8006014 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8003188:	2202      	movs	r2, #2
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800318c:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800318e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003190:	f002 fe98 	bl	8005ec4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003194:	2003      	movs	r0, #3
 8003196:	f7ff fa8b 	bl	80026b0 <SX1276SetOpMode>
}
 800319a:	b00b      	add	sp, #44	; 0x2c
 800319c:	bd30      	pop	{r4, r5, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	2000055c 	.word	0x2000055c
 80031a4:	2000058c 	.word	0x2000058c

080031a8 <SX1276OnDio2Irq>:
{
 80031a8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80031aa:	4c2b      	ldr	r4, [pc, #172]	; (8003258 <SX1276OnDio2Irq+0xb0>)
 80031ac:	7921      	ldrb	r1, [r4, #4]
 80031ae:	2901      	cmp	r1, #1
 80031b0:	d002      	beq.n	80031b8 <SX1276OnDio2Irq+0x10>
 80031b2:	2902      	cmp	r1, #2
 80031b4:	d048      	beq.n	8003248 <SX1276OnDio2Irq+0xa0>
}
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80031b8:	7963      	ldrb	r3, [r4, #5]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d017      	beq.n	80031ee <SX1276OnDio2Irq+0x46>
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d1f9      	bne.n	80031b6 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80031c2:	3453      	adds	r4, #83	; 0x53
 80031c4:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80031c6:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f4      	beq.n	80031b6 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80031cc:	2012      	movs	r0, #18
 80031ce:	f7ff f877 	bl	80022c0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <SX1276OnDio2Irq+0xb4>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ed      	beq.n	80031b6 <SX1276OnDio2Irq+0xe>
 80031da:	695c      	ldr	r4, [r3, #20]
 80031dc:	2c00      	cmp	r4, #0
 80031de:	d0ea      	beq.n	80031b6 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80031e0:	201c      	movs	r0, #28
 80031e2:	f7ff f8bf 	bl	8002364 <SX1276Read>
 80031e6:	233f      	movs	r3, #63	; 0x3f
 80031e8:	4018      	ands	r0, r3
 80031ea:	47a0      	blx	r4
}
 80031ec:	e7e3      	b.n	80031b6 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80031ee:	0023      	movs	r3, r4
 80031f0:	3330      	adds	r3, #48	; 0x30
 80031f2:	7019      	strb	r1, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 80031f4:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80031f6:	2d01      	cmp	r5, #1
 80031f8:	d1dd      	bne.n	80031b6 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 80031fa:	4819      	ldr	r0, [pc, #100]	; (8003260 <SX1276OnDio2Irq+0xb8>)
 80031fc:	f002 fede 	bl	8005fbc <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003200:	0023      	movs	r3, r4
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003202:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003204:	3331      	adds	r3, #49	; 0x31
 8003206:	701d      	strb	r5, [r3, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003208:	f7ff f8ac 	bl	8002364 <SX1276Read>
 800320c:	0023      	movs	r3, r4
 800320e:	0840      	lsrs	r0, r0, #1
 8003210:	3332      	adds	r3, #50	; 0x32
 8003212:	4240      	negs	r0, r0
 8003214:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003216:	201b      	movs	r0, #27
 8003218:	f7ff f8a4 	bl	8002364 <SX1276Read>
 800321c:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800321e:	201c      	movs	r0, #28
 8003220:	f7ff f8a0 	bl	8002364 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003224:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8003226:	4a0f      	ldr	r2, [pc, #60]	; (8003264 <SX1276OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003228:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 800322a:	b2c3      	uxtb	r3, r0
 800322c:	4353      	muls	r3, r2
 800322e:	0a00      	lsrs	r0, r0, #8
 8003230:	4350      	muls	r0, r2
 8003232:	3380      	adds	r3, #128	; 0x80
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	1818      	adds	r0, r3, r0
 8003238:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800323a:	200c      	movs	r0, #12
 800323c:	f7ff f892 	bl	8002364 <SX1276Read>
 8003240:	3438      	adds	r4, #56	; 0x38
 8003242:	0940      	lsrs	r0, r0, #5
 8003244:	7020      	strb	r0, [r4, #0]
 8003246:	e7b6      	b.n	80031b6 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8003248:	7963      	ldrb	r3, [r4, #5]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d1b3      	bne.n	80031b6 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800324e:	3453      	adds	r4, #83	; 0x53
 8003250:	7823      	ldrb	r3, [r4, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0af      	beq.n	80031b6 <SX1276OnDio2Irq+0xe>
 8003256:	e7b9      	b.n	80031cc <SX1276OnDio2Irq+0x24>
 8003258:	2000058c 	.word	0x2000058c
 800325c:	200000b8 	.word	0x200000b8
 8003260:	20000574 	.word	0x20000574
 8003264:	00003d09 	.word	0x00003d09

08003268 <SX1276OnDio3Irq>:
{
 8003268:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <SX1276OnDio3Irq+0x4c>)
 800326c:	795d      	ldrb	r5, [r3, #5]
 800326e:	2d01      	cmp	r5, #1
 8003270:	d111      	bne.n	8003296 <SX1276OnDio3Irq+0x2e>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8003272:	2012      	movs	r0, #18
 8003274:	f7ff f876 	bl	8002364 <SX1276Read>
 8003278:	4028      	ands	r0, r5
 800327a:	1e04      	subs	r4, r0, #0
 800327c:	4e0e      	ldr	r6, [pc, #56]	; (80032b8 <SX1276OnDio3Irq+0x50>)
 800327e:	d00b      	beq.n	8003298 <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003280:	2105      	movs	r1, #5
 8003282:	2012      	movs	r0, #18
 8003284:	f7ff f81c 	bl	80022c0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003288:	6873      	ldr	r3, [r6, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <SX1276OnDio3Irq+0x2e>
 800328e:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8003290:	0028      	movs	r0, r5
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <SX1276OnDio3Irq+0x46>
}
 8003296:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8003298:	2104      	movs	r1, #4
 800329a:	2012      	movs	r0, #18
 800329c:	f7ff f810 	bl	80022c0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80032a0:	6873      	ldr	r3, [r6, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f7      	beq.n	8003296 <SX1276OnDio3Irq+0x2e>
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f4      	beq.n	8003296 <SX1276OnDio3Irq+0x2e>
                RadioEvents->CadDone( false );
 80032ac:	0020      	movs	r0, r4
 80032ae:	4798      	blx	r3
}
 80032b0:	e7f1      	b.n	8003296 <SX1276OnDio3Irq+0x2e>
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	2000058c 	.word	0x2000058c
 80032b8:	200000b8 	.word	0x200000b8

080032bc <SX1276WriteFifo>:
{
 80032bc:	b510      	push	{r4, lr}
 80032be:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 80032c0:	0001      	movs	r1, r0
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7fe ffde 	bl	8002284 <SX1276WriteBuffer>
}
 80032c8:	bd10      	pop	{r4, pc}
	...

080032cc <SX1276Send>:
{
 80032cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032ce:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 80032d0:	4c3a      	ldr	r4, [pc, #232]	; (80033bc <SX1276Send+0xf0>)
{
 80032d2:	1dde      	adds	r6, r3, #7
 80032d4:	7031      	strb	r1, [r6, #0]
    switch( SX1276.Settings.Modem )
 80032d6:	7965      	ldrb	r5, [r4, #5]
{
 80032d8:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 80032da:	2d00      	cmp	r5, #0
 80032dc:	d003      	beq.n	80032e6 <SX1276Send+0x1a>
 80032de:	2d01      	cmp	r5, #1
 80032e0:	d02e      	beq.n	8003340 <SX1276Send+0x74>
    uint32_t txTimeout = 0;
 80032e2:	2000      	movs	r0, #0
 80032e4:	e01c      	b.n	8003320 <SX1276Send+0x54>
            SX1276.Settings.FskPacketHandler.Size = size;
 80032e6:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80032e8:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80032ea:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 80032ec:	1ce3      	adds	r3, r4, #3
 80032ee:	7fdb      	ldrb	r3, [r3, #31]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d118      	bne.n	8003326 <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80032f4:	2101      	movs	r1, #1
 80032f6:	0030      	movs	r0, r6
 80032f8:	f7ff ffe0 	bl	80032bc <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 80032fc:	7832      	ldrb	r2, [r6, #0]
 80032fe:	1e53      	subs	r3, r2, #1
 8003300:	2b3f      	cmp	r3, #63	; 0x3f
 8003302:	d814      	bhi.n	800332e <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8003304:	0023      	movs	r3, r4
 8003306:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003308:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800330a:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800330c:	353f      	adds	r5, #63	; 0x3f
 800330e:	0038      	movs	r0, r7
 8003310:	7829      	ldrb	r1, [r5, #0]
 8003312:	f7ff ffd3 	bl	80032bc <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003316:	782b      	ldrb	r3, [r5, #0]
 8003318:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800331a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800331c:	189b      	adds	r3, r3, r2
 800331e:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 8003320:	f7ff fb08 	bl	8002934 <SX1276SetTx>
}
 8003324:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8003326:	2032      	movs	r0, #50	; 0x32
 8003328:	f7fe ffca 	bl	80022c0 <SX1276Write>
 800332c:	e7e6      	b.n	80032fc <SX1276Send+0x30>
                memcpy1( RxTxBuffer, buffer, size );
 800332e:	b292      	uxth	r2, r2
 8003330:	0039      	movs	r1, r7
 8003332:	4823      	ldr	r0, [pc, #140]	; (80033c0 <SX1276Send+0xf4>)
 8003334:	f002 ff0c 	bl	8006150 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8003338:	0023      	movs	r3, r4
 800333a:	2220      	movs	r2, #32
 800333c:	333f      	adds	r3, #63	; 0x3f
 800333e:	e7e3      	b.n	8003308 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003340:	0023      	movs	r3, r4
 8003342:	3355      	adds	r3, #85	; 0x55
 8003344:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003346:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02b      	beq.n	80033a4 <SX1276Send+0xd8>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800334c:	f7ff f80a 	bl	8002364 <SX1276Read>
 8003350:	2341      	movs	r3, #65	; 0x41
 8003352:	4398      	bics	r0, r3
 8003354:	b2c1      	uxtb	r1, r0
 8003356:	2033      	movs	r0, #51	; 0x33
 8003358:	f7fe ffb2 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800335c:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800335e:	203b      	movs	r0, #59	; 0x3b
 8003360:	f7fe ffae 	bl	80022c0 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8003364:	0023      	movs	r3, r4
 8003366:	7831      	ldrb	r1, [r6, #0]
 8003368:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800336a:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800336c:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800336e:	f7fe ffa7 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003372:	2100      	movs	r1, #0
 8003374:	200e      	movs	r0, #14
 8003376:	f7fe ffa3 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800337a:	2100      	movs	r1, #0
 800337c:	200d      	movs	r0, #13
 800337e:	f7fe ff9f 	bl	80022c0 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8003382:	2001      	movs	r0, #1
 8003384:	f7fe ffee 	bl	8002364 <SX1276Read>
 8003388:	23f8      	movs	r3, #248	; 0xf8
 800338a:	4398      	bics	r0, r3
 800338c:	d104      	bne.n	8003398 <SX1276Send+0xcc>
                SX1276SetStby( );
 800338e:	f7ff f9b1 	bl	80026f4 <SX1276SetStby>
                DelayMs( 1 );
 8003392:	2001      	movs	r0, #1
 8003394:	f003 fbe2 	bl	8006b5c <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 8003398:	0038      	movs	r0, r7
 800339a:	7831      	ldrb	r1, [r6, #0]
 800339c:	f7ff ff8e 	bl	80032bc <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80033a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 80033a2:	e7bd      	b.n	8003320 <SX1276Send+0x54>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80033a4:	f7fe ffde 	bl	8002364 <SX1276Read>
 80033a8:	2341      	movs	r3, #65	; 0x41
 80033aa:	0001      	movs	r1, r0
 80033ac:	4399      	bics	r1, r3
 80033ae:	4329      	orrs	r1, r5
 80033b0:	b2c9      	uxtb	r1, r1
 80033b2:	2033      	movs	r0, #51	; 0x33
 80033b4:	f7fe ff84 	bl	80022c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80033b8:	211d      	movs	r1, #29
 80033ba:	e7d0      	b.n	800335e <SX1276Send+0x92>
 80033bc:	2000058c 	.word	0x2000058c
 80033c0:	200000c0 	.word	0x200000c0

080033c4 <SX1276ReadFifo>:
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 80033c8:	0001      	movs	r1, r0
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fe ffac 	bl	8002328 <SX1276ReadBuffer>
}
 80033d0:	bd10      	pop	{r4, pc}
	...

080033d4 <SX1276OnDio0Irq>:
{
 80033d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 80033d6:	466b      	mov	r3, sp
 80033d8:	1ddd      	adds	r5, r3, #7
 80033da:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 80033dc:	4c8c      	ldr	r4, [pc, #560]	; (8003610 <SX1276OnDio0Irq+0x23c>)
    volatile uint8_t irqFlags = 0;
 80033de:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 80033e0:	7923      	ldrb	r3, [r4, #4]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d003      	beq.n	80033ee <SX1276OnDio0Irq+0x1a>
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d100      	bne.n	80033ec <SX1276OnDio0Irq+0x18>
 80033ea:	e0fe      	b.n	80035ea <SX1276OnDio0Irq+0x216>
}
 80033ec:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 80033ee:	7963      	ldrb	r3, [r4, #5]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d024      	beq.n	800343e <SX1276OnDio0Irq+0x6a>
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d1f9      	bne.n	80033ec <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80033f8:	2140      	movs	r1, #64	; 0x40
 80033fa:	2012      	movs	r0, #18
 80033fc:	f7fe ff60 	bl	80022c0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003400:	2012      	movs	r0, #18
 8003402:	f7fe ffaf 	bl	8002364 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003406:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003408:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800340a:	782b      	ldrb	r3, [r5, #0]
 800340c:	4e81      	ldr	r6, [pc, #516]	; (8003614 <SX1276OnDio0Irq+0x240>)
 800340e:	4d82      	ldr	r5, [pc, #520]	; (8003618 <SX1276OnDio0Irq+0x244>)
 8003410:	420b      	tst	r3, r1
 8003412:	d100      	bne.n	8003416 <SX1276OnDio0Irq+0x42>
 8003414:	e08e      	b.n	8003534 <SX1276OnDio0Irq+0x160>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8003416:	2012      	movs	r0, #18
 8003418:	f7fe ff52 	bl	80022c0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800341c:	0023      	movs	r3, r4
 800341e:	3356      	adds	r3, #86	; 0x56
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d100      	bne.n	8003428 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 8003426:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8003428:	0030      	movs	r0, r6
 800342a:	f002 fdc7 	bl	8005fbc <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800342e:	686b      	ldr	r3, [r5, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0db      	beq.n	80033ec <SX1276OnDio0Irq+0x18>
 8003434:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0d8      	beq.n	80033ec <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800343a:	4798      	blx	r3
}
 800343c:	e7d6      	b.n	80033ec <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800343e:	1d63      	adds	r3, r4, #5
 8003440:	7fdb      	ldrb	r3, [r3, #31]
 8003442:	4e76      	ldr	r6, [pc, #472]	; (800361c <SX1276OnDio0Irq+0x248>)
 8003444:	4f74      	ldr	r7, [pc, #464]	; (8003618 <SX1276OnDio0Irq+0x244>)
 8003446:	2b00      	cmp	r3, #0
 8003448:	d032      	beq.n	80034b0 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800344a:	203f      	movs	r0, #63	; 0x3f
 800344c:	f7fe ff8a 	bl	8002364 <SX1276Read>
 8003450:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003452:	782b      	ldrb	r3, [r5, #0]
 8003454:	079b      	lsls	r3, r3, #30
 8003456:	d42b      	bmi.n	80034b0 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003458:	210b      	movs	r1, #11
 800345a:	203e      	movs	r0, #62	; 0x3e
 800345c:	f7fe ff30 	bl	80022c0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003460:	2110      	movs	r1, #16
 8003462:	203f      	movs	r0, #63	; 0x3f
 8003464:	f7fe ff2c 	bl	80022c0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8003468:	486a      	ldr	r0, [pc, #424]	; (8003614 <SX1276OnDio0Irq+0x240>)
 800346a:	f002 fda7 	bl	8005fbc <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800346e:	1de3      	adds	r3, r4, #7
 8003470:	7fdd      	ldrb	r5, [r3, #31]
 8003472:	2d00      	cmp	r5, #0
 8003474:	d10f      	bne.n	8003496 <SX1276OnDio0Irq+0xc2>
                            TimerStop( &RxTimeoutSyncWord );
 8003476:	0030      	movs	r0, r6
 8003478:	f002 fda0 	bl	8005fbc <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800347c:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <SX1276OnDio0Irq+0xb8>
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d000      	beq.n	800348c <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 800348a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800348c:	2300      	movs	r3, #0
 800348e:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003490:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8003492:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8003494:	e7aa      	b.n	80033ec <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003496:	200d      	movs	r0, #13
 8003498:	f7fe ff64 	bl	8002364 <SX1276Read>
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	4301      	orrs	r1, r0
 80034a0:	b2c9      	uxtb	r1, r1
 80034a2:	200d      	movs	r0, #13
 80034a4:	f7fe ff0c 	bl	80022c0 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80034a8:	0030      	movs	r0, r6
 80034aa:	f002 fd0b 	bl	8005ec4 <TimerStart>
 80034ae:	e7e6      	b.n	800347e <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80034b0:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80034b2:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80034b4:	4d5a      	ldr	r5, [pc, #360]	; (8003620 <SX1276OnDio0Irq+0x24c>)
 80034b6:	2900      	cmp	r1, #0
 80034b8:	d10b      	bne.n	80034d2 <SX1276OnDio0Irq+0xfe>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d109      	bne.n	80034d2 <SX1276OnDio0Irq+0xfe>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80034be:	1ce3      	adds	r3, r4, #3
 80034c0:	7fdb      	ldrb	r3, [r3, #31]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d124      	bne.n	8003510 <SX1276OnDio0Irq+0x13c>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80034c6:	3101      	adds	r1, #1
 80034c8:	4856      	ldr	r0, [pc, #344]	; (8003624 <SX1276OnDio0Irq+0x250>)
 80034ca:	f7ff ff7b 	bl	80033c4 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80034ce:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80034d0:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80034d2:	1a09      	subs	r1, r1, r0
 80034d4:	b2c9      	uxtb	r1, r1
 80034d6:	1828      	adds	r0, r5, r0
 80034d8:	f7ff ff74 	bl	80033c4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80034dc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 80034de:	484d      	ldr	r0, [pc, #308]	; (8003614 <SX1276OnDio0Irq+0x240>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80034e0:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 80034e2:	f002 fd6b 	bl	8005fbc <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80034e6:	1de3      	adds	r3, r4, #7
 80034e8:	7fdb      	ldrb	r3, [r3, #31]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d115      	bne.n	800351a <SX1276OnDio0Irq+0x146>
                    TimerStop( &RxTimeoutSyncWord );
 80034ee:	0030      	movs	r0, r6
                    SX1276.Settings.State = RF_IDLE;
 80034f0:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80034f2:	f002 fd63 	bl	8005fbc <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0c7      	beq.n	800348c <SX1276OnDio0Irq+0xb8>
 80034fc:	689e      	ldr	r6, [r3, #8]
 80034fe:	2e00      	cmp	r6, #0
 8003500:	d0c4      	beq.n	800348c <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8003502:	2232      	movs	r2, #50	; 0x32
 8003504:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003506:	56a2      	ldrsb	r2, [r4, r2]
 8003508:	2300      	movs	r3, #0
 800350a:	0028      	movs	r0, r5
 800350c:	47b0      	blx	r6
 800350e:	e7bd      	b.n	800348c <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003510:	2032      	movs	r0, #50	; 0x32
 8003512:	f7fe ff27 	bl	8002364 <SX1276Read>
 8003516:	8760      	strh	r0, [r4, #58]	; 0x3a
 8003518:	e7d9      	b.n	80034ce <SX1276OnDio0Irq+0xfa>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800351a:	200d      	movs	r0, #13
 800351c:	f7fe ff22 	bl	8002364 <SX1276Read>
 8003520:	2140      	movs	r1, #64	; 0x40
 8003522:	4301      	orrs	r1, r0
 8003524:	b2c9      	uxtb	r1, r1
 8003526:	200d      	movs	r0, #13
 8003528:	f7fe feca 	bl	80022c0 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 800352c:	0030      	movs	r0, r6
 800352e:	f002 fcc9 	bl	8005ec4 <TimerStart>
 8003532:	e7e0      	b.n	80034f6 <SX1276OnDio0Irq+0x122>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8003534:	2019      	movs	r0, #25
 8003536:	f7fe ff15 	bl	8002364 <SX1276Read>
 800353a:	0027      	movs	r7, r4
 800353c:	b240      	sxtb	r0, r0
 800353e:	3002      	adds	r0, #2
 8003540:	3760      	adds	r7, #96	; 0x60
 8003542:	1080      	asrs	r0, r0, #2
 8003544:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8003546:	201a      	movs	r0, #26
 8003548:	f7fe ff0c 	bl	8002364 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800354c:	2300      	movs	r3, #0
 800354e:	0021      	movs	r1, r4
 8003550:	56fb      	ldrsb	r3, [r7, r3]
 8003552:	4a35      	ldr	r2, [pc, #212]	; (8003628 <SX1276OnDio0Irq+0x254>)
 8003554:	b207      	sxth	r7, r0
 8003556:	113f      	asrs	r7, r7, #4
 8003558:	b2bf      	uxth	r7, r7
 800355a:	b280      	uxth	r0, r0
 800355c:	4694      	mov	ip, r2
 800355e:	3162      	adds	r1, #98	; 0x62
 8003560:	2b00      	cmp	r3, #0
 8003562:	da39      	bge.n	80035d8 <SX1276OnDio0Irq+0x204>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003564:	68a2      	ldr	r2, [r4, #8]
 8003566:	b29b      	uxth	r3, r3
 8003568:	4562      	cmp	r2, ip
 800356a:	d933      	bls.n	80035d4 <SX1276OnDio0Irq+0x200>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800356c:	3b9d      	subs	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800356e:	18c3      	adds	r3, r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8003570:	18fb      	adds	r3, r7, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8003572:	2013      	movs	r0, #19
 8003574:	0027      	movs	r7, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8003576:	800b      	strh	r3, [r1, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8003578:	f7fe fef4 	bl	8002364 <SX1276Read>
 800357c:	3764      	adds	r7, #100	; 0x64
 800357e:	7038      	strb	r0, [r7, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8003580:	2010      	movs	r0, #16
 8003582:	f7fe feef 	bl	8002364 <SX1276Read>
 8003586:	0001      	movs	r1, r0
 8003588:	200d      	movs	r0, #13
 800358a:	f7fe fe99 	bl	80022c0 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800358e:	7839      	ldrb	r1, [r7, #0]
 8003590:	4f23      	ldr	r7, [pc, #140]	; (8003620 <SX1276OnDio0Irq+0x24c>)
 8003592:	0038      	movs	r0, r7
 8003594:	f7ff ff16 	bl	80033c4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8003598:	0023      	movs	r3, r4
 800359a:	3356      	adds	r3, #86	; 0x56
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <SX1276OnDio0Irq+0x1d0>
                        SX1276.Settings.State = RF_IDLE;
 80035a2:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80035a4:	0030      	movs	r0, r6
 80035a6:	f002 fd09 	bl	8005fbc <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80035aa:	686b      	ldr	r3, [r5, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d100      	bne.n	80035b2 <SX1276OnDio0Irq+0x1de>
 80035b0:	e71c      	b.n	80033ec <SX1276OnDio0Irq+0x18>
 80035b2:	689d      	ldr	r5, [r3, #8]
 80035b4:	2d00      	cmp	r5, #0
 80035b6:	d100      	bne.n	80035ba <SX1276OnDio0Irq+0x1e6>
 80035b8:	e718      	b.n	80033ec <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80035ba:	0023      	movs	r3, r4
 80035bc:	0022      	movs	r2, r4
 80035be:	3360      	adds	r3, #96	; 0x60
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	3464      	adds	r4, #100	; 0x64
 80035c4:	3262      	adds	r2, #98	; 0x62
 80035c6:	2100      	movs	r1, #0
 80035c8:	5e52      	ldrsh	r2, [r2, r1]
 80035ca:	b25b      	sxtb	r3, r3
 80035cc:	7821      	ldrb	r1, [r4, #0]
 80035ce:	0038      	movs	r0, r7
 80035d0:	47a8      	blx	r5
 80035d2:	e70b      	b.n	80033ec <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80035d4:	3ba4      	subs	r3, #164	; 0xa4
 80035d6:	e7ca      	b.n	800356e <SX1276OnDio0Irq+0x19a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80035d8:	68a3      	ldr	r3, [r4, #8]
 80035da:	4293      	cmp	r3, r2
 80035dc:	d902      	bls.n	80035e4 <SX1276OnDio0Irq+0x210>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80035de:	0003      	movs	r3, r0
 80035e0:	3b9d      	subs	r3, #157	; 0x9d
 80035e2:	e7c5      	b.n	8003570 <SX1276OnDio0Irq+0x19c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80035e4:	0003      	movs	r3, r0
 80035e6:	3ba4      	subs	r3, #164	; 0xa4
 80035e8:	e7c2      	b.n	8003570 <SX1276OnDio0Irq+0x19c>
            TimerStop( &TxTimeoutTimer );
 80035ea:	4810      	ldr	r0, [pc, #64]	; (800362c <SX1276OnDio0Irq+0x258>)
 80035ec:	f002 fce6 	bl	8005fbc <TimerStop>
            switch( SX1276.Settings.Modem )
 80035f0:	7963      	ldrb	r3, [r4, #5]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d103      	bne.n	80035fe <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80035f6:	2108      	movs	r1, #8
 80035f8:	2012      	movs	r0, #18
 80035fa:	f7fe fe61 	bl	80022c0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <SX1276OnDio0Irq+0x244>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d100      	bne.n	800360c <SX1276OnDio0Irq+0x238>
 800360a:	e6ef      	b.n	80033ec <SX1276OnDio0Irq+0x18>
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	e712      	b.n	8003436 <SX1276OnDio0Irq+0x62>
 8003610:	2000058c 	.word	0x2000058c
 8003614:	200005f4 	.word	0x200005f4
 8003618:	200000b8 	.word	0x200000b8
 800361c:	20000574 	.word	0x20000574
 8003620:	200000c0 	.word	0x200000c0
 8003624:	200005c6 	.word	0x200005c6
 8003628:	1f4add40 	.word	0x1f4add40
 800362c:	2000055c 	.word	0x2000055c

08003630 <SX1276OnDio1Irq>:
{
 8003630:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003632:	4c31      	ldr	r4, [pc, #196]	; (80036f8 <SX1276OnDio1Irq+0xc8>)
 8003634:	7925      	ldrb	r5, [r4, #4]
 8003636:	2d01      	cmp	r5, #1
 8003638:	d002      	beq.n	8003640 <SX1276OnDio1Irq+0x10>
 800363a:	2d02      	cmp	r5, #2
 800363c:	d046      	beq.n	80036cc <SX1276OnDio1Irq+0x9c>
}
 800363e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003640:	7963      	ldrb	r3, [r4, #5]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d013      	beq.n	800366e <SX1276OnDio1Irq+0x3e>
 8003646:	2b01      	cmp	r3, #1
 8003648:	d1f9      	bne.n	800363e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800364a:	482c      	ldr	r0, [pc, #176]	; (80036fc <SX1276OnDio1Irq+0xcc>)
 800364c:	f002 fcb6 	bl	8005fbc <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	2012      	movs	r0, #18
 8003654:	f7fe fe34 	bl	80022c0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8003658:	2300      	movs	r3, #0
 800365a:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <SX1276OnDio1Irq+0xd0>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ec      	beq.n	800363e <SX1276OnDio1Irq+0xe>
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0e9      	beq.n	800363e <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800366a:	4798      	blx	r3
 800366c:	e7e7      	b.n	800363e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800366e:	4825      	ldr	r0, [pc, #148]	; (8003704 <SX1276OnDio1Irq+0xd4>)
 8003670:	f002 fca4 	bl	8005fbc <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003674:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <SX1276OnDio1Irq+0x60>
 800367a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003680:	1ce3      	adds	r3, r4, #3
 8003682:	7fdb      	ldrb	r3, [r3, #31]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d117      	bne.n	80036b8 <SX1276OnDio1Irq+0x88>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003688:	0029      	movs	r1, r5
 800368a:	481f      	ldr	r0, [pc, #124]	; (8003708 <SX1276OnDio1Irq+0xd8>)
 800368c:	f7ff fe9a 	bl	80033c4 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8003690:	0025      	movs	r5, r4
 8003692:	353e      	adds	r5, #62	; 0x3e
 8003694:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003696:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003698:	481c      	ldr	r0, [pc, #112]	; (800370c <SX1276OnDio1Irq+0xdc>)
 800369a:	782b      	ldrb	r3, [r5, #0]
 800369c:	1810      	adds	r0, r2, r0
 800369e:	1a89      	subs	r1, r1, r2
 80036a0:	4299      	cmp	r1, r3
 80036a2:	db0e      	blt.n	80036c2 <SX1276OnDio1Irq+0x92>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b2d9      	uxtb	r1, r3
 80036a8:	f7ff fe8c 	bl	80033c4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80036ac:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80036ae:	782b      	ldrb	r3, [r5, #0]
 80036b0:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80036b2:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80036b4:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 80036b6:	e7c2      	b.n	800363e <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80036b8:	2032      	movs	r0, #50	; 0x32
 80036ba:	f7fe fe53 	bl	8002364 <SX1276Read>
 80036be:	8760      	strh	r0, [r4, #58]	; 0x3a
 80036c0:	e7e6      	b.n	8003690 <SX1276OnDio1Irq+0x60>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80036c2:	b2c9      	uxtb	r1, r1
 80036c4:	f7ff fe7e 	bl	80033c4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80036c8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80036ca:	e7f3      	b.n	80036b4 <SX1276OnDio1Irq+0x84>
            switch( SX1276.Settings.Modem )
 80036cc:	7963      	ldrb	r3, [r4, #5]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1b5      	bne.n	800363e <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80036d2:	0025      	movs	r5, r4
 80036d4:	353f      	adds	r5, #63	; 0x3f
 80036d6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80036d8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80036da:	480c      	ldr	r0, [pc, #48]	; (800370c <SX1276OnDio1Irq+0xdc>)
 80036dc:	7829      	ldrb	r1, [r5, #0]
 80036de:	1810      	adds	r0, r2, r0
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	428b      	cmp	r3, r1
 80036e4:	dd04      	ble.n	80036f0 <SX1276OnDio1Irq+0xc0>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80036e6:	f7ff fde9 	bl	80032bc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80036ea:	782b      	ldrb	r3, [r5, #0]
 80036ec:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80036ee:	e7e0      	b.n	80036b2 <SX1276OnDio1Irq+0x82>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80036f0:	b2d9      	uxtb	r1, r3
 80036f2:	f7ff fde3 	bl	80032bc <SX1276WriteFifo>
 80036f6:	e7e7      	b.n	80036c8 <SX1276OnDio1Irq+0x98>
 80036f8:	2000058c 	.word	0x2000058c
 80036fc:	200005f4 	.word	0x200005f4
 8003700:	200000b8 	.word	0x200000b8
 8003704:	20000574 	.word	0x20000574
 8003708:	200005c6 	.word	0x200005c6
 800370c:	200000c0 	.word	0x200000c0

08003710 <SX1276SetMaxPayloadLength>:
{
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	0004      	movs	r4, r0
 8003714:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 8003716:	f7ff f97d 	bl	8002a14 <SX1276SetModem>
    switch( modem )
 800371a:	2c00      	cmp	r4, #0
 800371c:	d002      	beq.n	8003724 <SX1276SetMaxPayloadLength+0x14>
 800371e:	2c01      	cmp	r4, #1
 8003720:	d00a      	beq.n	8003738 <SX1276SetMaxPayloadLength+0x28>
}
 8003722:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <SX1276SetMaxPayloadLength+0x30>)
 8003726:	3303      	adds	r3, #3
 8003728:	7fdb      	ldrb	r3, [r3, #31]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f9      	bne.n	8003722 <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800372e:	0029      	movs	r1, r5
 8003730:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003732:	f7fe fdc5 	bl	80022c0 <SX1276Write>
}
 8003736:	e7f4      	b.n	8003722 <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003738:	0029      	movs	r1, r5
 800373a:	2023      	movs	r0, #35	; 0x23
 800373c:	e7f9      	b.n	8003732 <SX1276SetMaxPayloadLength+0x22>
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	2000058c 	.word	0x2000058c

08003744 <SX1276SetPublicNetwork>:
{
 8003744:	b510      	push	{r4, lr}
 8003746:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8003748:	2001      	movs	r0, #1
 800374a:	f7ff f963 	bl	8002a14 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8003750:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8003752:	335c      	adds	r3, #92	; 0x5c
 8003754:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8003756:	2c00      	cmp	r4, #0
 8003758:	d100      	bne.n	800375c <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800375a:	2112      	movs	r1, #18
 800375c:	2039      	movs	r0, #57	; 0x39
 800375e:	f7fe fdaf 	bl	80022c0 <SX1276Write>
}
 8003762:	bd10      	pop	{r4, pc}
 8003764:	2000058c 	.word	0x2000058c

08003768 <SX1276OnTimeoutIrq>:
{
 8003768:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800376a:	4c2c      	ldr	r4, [pc, #176]	; (800381c <SX1276OnTimeoutIrq+0xb4>)
 800376c:	7923      	ldrb	r3, [r4, #4]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d002      	beq.n	8003778 <SX1276OnTimeoutIrq+0x10>
 8003772:	2b02      	cmp	r3, #2
 8003774:	d02d      	beq.n	80037d2 <SX1276OnTimeoutIrq+0x6a>
}
 8003776:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8003778:	7963      	ldrb	r3, [r4, #5]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11b      	bne.n	80037b6 <SX1276OnTimeoutIrq+0x4e>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800377e:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003780:	210b      	movs	r1, #11
 8003782:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003784:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003786:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003788:	f7fe fd9a 	bl	80022c0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800378c:	2110      	movs	r1, #16
 800378e:	203f      	movs	r0, #63	; 0x3f
 8003790:	f7fe fd96 	bl	80022c0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8003794:	1de3      	adds	r3, r4, #7
 8003796:	7fdb      	ldrb	r3, [r3, #31]
 8003798:	4d21      	ldr	r5, [pc, #132]	; (8003820 <SX1276OnTimeoutIrq+0xb8>)
 800379a:	2b00      	cmp	r3, #0
 800379c:	d014      	beq.n	80037c8 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800379e:	200d      	movs	r0, #13
 80037a0:	f7fe fde0 	bl	8002364 <SX1276Read>
 80037a4:	2140      	movs	r1, #64	; 0x40
 80037a6:	4301      	orrs	r1, r0
 80037a8:	b2c9      	uxtb	r1, r1
 80037aa:	200d      	movs	r0, #13
 80037ac:	f7fe fd88 	bl	80022c0 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 80037b0:	0028      	movs	r0, r5
 80037b2:	f002 fb87 	bl	8005ec4 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <SX1276OnTimeoutIrq+0xbc>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0db      	beq.n	8003776 <SX1276OnTimeoutIrq+0xe>
 80037be:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0d8      	beq.n	8003776 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 80037c4:	4798      	blx	r3
}
 80037c6:	e7d6      	b.n	8003776 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 80037c8:	0028      	movs	r0, r5
                SX1276.Settings.State = RF_IDLE;
 80037ca:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 80037cc:	f002 fbf6 	bl	8005fbc <TimerStop>
 80037d0:	e7f1      	b.n	80037b6 <SX1276OnTimeoutIrq+0x4e>
        SX1276Reset( );
 80037d2:	f7fe fd31 	bl	8002238 <SX1276Reset>
        RxChainCalibration( );
 80037d6:	f7fe fdcf 	bl	8002378 <RxChainCalibration>
 80037da:	f7fe ff33 	bl	8002644 <SX1276SetOpMode.part.2>
 80037de:	4e12      	ldr	r6, [pc, #72]	; (8003828 <SX1276OnTimeoutIrq+0xc0>)
 80037e0:	0035      	movs	r5, r6
 80037e2:	3648      	adds	r6, #72	; 0x48
 80037e4:	3518      	adds	r5, #24
            SX1276SetModem( RadioRegsInit[i].Modem );
 80037e6:	7828      	ldrb	r0, [r5, #0]
 80037e8:	f7ff f914 	bl	8002a14 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80037ec:	78a9      	ldrb	r1, [r5, #2]
 80037ee:	7868      	ldrb	r0, [r5, #1]
 80037f0:	3503      	adds	r5, #3
 80037f2:	f7fe fd65 	bl	80022c0 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80037f6:	42b5      	cmp	r5, r6
 80037f8:	d1f5      	bne.n	80037e6 <SX1276OnTimeoutIrq+0x7e>
        SX1276SetModem( MODEM_FSK );
 80037fa:	2000      	movs	r0, #0
 80037fc:	f7ff f90a 	bl	8002a14 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8003800:	0023      	movs	r3, r4
 8003802:	335c      	adds	r3, #92	; 0x5c
 8003804:	7818      	ldrb	r0, [r3, #0]
 8003806:	f7ff ff9d 	bl	8003744 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800380a:	2300      	movs	r3, #0
 800380c:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <SX1276OnTimeoutIrq+0xbc>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0af      	beq.n	8003776 <SX1276OnTimeoutIrq+0xe>
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	e7d2      	b.n	80037c0 <SX1276OnTimeoutIrq+0x58>
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	2000058c 	.word	0x2000058c
 8003820:	20000574 	.word	0x20000574
 8003824:	200000b8 	.word	0x200000b8
 8003828:	08007c68 	.word	0x08007c68

0800382c <SX1276GetWakeupTime>:
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800382c:	4b03      	ldr	r3, [pc, #12]	; (800383c <SX1276GetWakeupTime+0x10>)
{
 800382e:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4798      	blx	r3
 8003836:	3002      	adds	r0, #2
}
 8003838:	bd10      	pop	{r4, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	200000b8 	.word	0x200000b8

08003840 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 8003840:	2000      	movs	r0, #0
 8003842:	4770      	bx	lr

08003844 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
}
 8003844:	4770      	bx	lr

08003846 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 8003846:	2001      	movs	r0, #1
 8003848:	4770      	bx	lr
	...

0800384c <SX1276SetRfTxPower>:
{
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	0005      	movs	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
 8003850:	2009      	movs	r0, #9
 8003852:	f7fe fd87 	bl	8002364 <SX1276Read>
    paDac = SX1276Read( REG_PADAC );
 8003856:	204d      	movs	r0, #77	; 0x4d
 8003858:	f7fe fd84 	bl	8002364 <SX1276Read>
 800385c:	0004      	movs	r4, r0
        if( power > 0 )
 800385e:	2d00      	cmp	r5, #0
 8003860:	dd0e      	ble.n	8003880 <SX1276SetRfTxPower+0x34>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8003862:	1c2b      	adds	r3, r5, #0
 8003864:	2d0f      	cmp	r5, #15
 8003866:	dd00      	ble.n	800386a <SX1276SetRfTxPower+0x1e>
 8003868:	230f      	movs	r3, #15
 800386a:	2170      	movs	r1, #112	; 0x70
 800386c:	4319      	orrs	r1, r3
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800386e:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8003870:	2009      	movs	r0, #9
 8003872:	f7fe fd25 	bl	80022c0 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8003876:	0021      	movs	r1, r4
 8003878:	204d      	movs	r0, #77	; 0x4d
 800387a:	f7fe fd21 	bl	80022c0 <SX1276Write>
}
 800387e:	bd70      	pop	{r4, r5, r6, pc}
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8003880:	1c29      	adds	r1, r5, #0
 8003882:	1d2b      	adds	r3, r5, #4
 8003884:	da01      	bge.n	800388a <SX1276SetRfTxPower+0x3e>
 8003886:	4b02      	ldr	r3, [pc, #8]	; (8003890 <SX1276SetRfTxPower+0x44>)
 8003888:	7819      	ldrb	r1, [r3, #0]
 800388a:	3104      	adds	r1, #4
 800388c:	e7ef      	b.n	800386e <SX1276SetRfTxPower+0x22>
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	08007ea8 	.word	0x08007ea8

08003894 <SX1276IoInit>:
{
 8003894:	b510      	push	{r4, lr}
 8003896:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8003898:	2214      	movs	r2, #20
 800389a:	2100      	movs	r1, #0
 800389c:	a801      	add	r0, sp, #4
 800389e:	f003 fc4a 	bl	8007136 <memset>
  SX1276BoardInit( &BoardCallbacks );
 80038a2:	4811      	ldr	r0, [pc, #68]	; (80038e8 <SX1276IoInit+0x54>)
 80038a4:	f7fe fcbc 	bl	8002220 <SX1276BoardInit>
  initStruct.Mode = GPIO_MODE_IT_RISING;
 80038a8:	4b10      	ldr	r3, [pc, #64]	; (80038ec <SX1276IoInit+0x58>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80038aa:	2180      	movs	r1, #128	; 0x80
  initStruct.Mode = GPIO_MODE_IT_RISING;
 80038ac:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 80038ae:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80038b0:	20a0      	movs	r0, #160	; 0xa0
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80038b2:	4c0f      	ldr	r4, [pc, #60]	; (80038f0 <SX1276IoInit+0x5c>)
  initStruct.Pull = GPIO_PULLDOWN;
 80038b4:	9303      	str	r3, [sp, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80038b6:	3301      	adds	r3, #1
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80038b8:	4099      	lsls	r1, r3
 80038ba:	aa01      	add	r2, sp, #4
 80038bc:	05c0      	lsls	r0, r0, #23
  initStruct.Speed = GPIO_SPEED_HIGH;
 80038be:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80038c0:	f002 fca8 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80038c4:	aa01      	add	r2, sp, #4
 80038c6:	0020      	movs	r0, r4
 80038c8:	2108      	movs	r1, #8
 80038ca:	f002 fca3 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80038ce:	aa01      	add	r2, sp, #4
 80038d0:	0020      	movs	r0, r4
 80038d2:	2120      	movs	r1, #32
 80038d4:	f002 fc9e 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80038d8:	aa01      	add	r2, sp, #4
 80038da:	2110      	movs	r1, #16
 80038dc:	0020      	movs	r0, r4
 80038de:	f002 fc99 	bl	8006214 <HW_GPIO_Init>
}
 80038e2:	b006      	add	sp, #24
 80038e4:	bd10      	pop	{r4, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20000018 	.word	0x20000018
 80038ec:	10110000 	.word	0x10110000
 80038f0:	50000400 	.word	0x50000400

080038f4 <SX1276IoDeInit>:
{
 80038f4:	b510      	push	{r4, lr}
 80038f6:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 80038f8:	2214      	movs	r2, #20
 80038fa:	2100      	movs	r1, #0
 80038fc:	a801      	add	r0, sp, #4
 80038fe:	f003 fc1a 	bl	8007136 <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ;
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <SX1276IoDeInit+0x48>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003904:	2180      	movs	r1, #128	; 0x80
 8003906:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Mode = GPIO_MODE_IT_RISING ;
 8003908:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 800390a:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800390c:	4c0c      	ldr	r4, [pc, #48]	; (8003940 <SX1276IoDeInit+0x4c>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800390e:	aa01      	add	r2, sp, #4
 8003910:	00c9      	lsls	r1, r1, #3
 8003912:	05c0      	lsls	r0, r0, #23
  initStruct.Pull = GPIO_PULLDOWN;
 8003914:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003916:	f002 fc7d 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800391a:	aa01      	add	r2, sp, #4
 800391c:	0020      	movs	r0, r4
 800391e:	2108      	movs	r1, #8
 8003920:	f002 fc78 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8003924:	aa01      	add	r2, sp, #4
 8003926:	0020      	movs	r0, r4
 8003928:	2120      	movs	r1, #32
 800392a:	f002 fc73 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800392e:	aa01      	add	r2, sp, #4
 8003930:	2110      	movs	r1, #16
 8003932:	0020      	movs	r0, r4
 8003934:	f002 fc6e 	bl	8006214 <HW_GPIO_Init>
}
 8003938:	b006      	add	sp, #24
 800393a:	bd10      	pop	{r4, pc}
 800393c:	10110000 	.word	0x10110000
 8003940:	50000400 	.word	0x50000400

08003944 <SX1276IoIrqInit>:
{
 8003944:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8003946:	2180      	movs	r1, #128	; 0x80
{
 8003948:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800394a:	20a0      	movs	r0, #160	; 0xa0
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800394c:	4d0c      	ldr	r5, [pc, #48]	; (8003980 <SX1276IoIrqInit+0x3c>)
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	2200      	movs	r2, #0
 8003952:	00c9      	lsls	r1, r1, #3
 8003954:	05c0      	lsls	r0, r0, #23
 8003956:	f002 fca9 	bl	80062ac <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800395a:	0028      	movs	r0, r5
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	2108      	movs	r1, #8
 8003962:	f002 fca3 	bl	80062ac <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8003966:	0028      	movs	r0, r5
 8003968:	68a3      	ldr	r3, [r4, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	2120      	movs	r1, #32
 800396e:	f002 fc9d 	bl	80062ac <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8003972:	0028      	movs	r0, r5
 8003974:	68e3      	ldr	r3, [r4, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	2110      	movs	r1, #16
 800397a:	f002 fc97 	bl	80062ac <HW_GPIO_SetIrq>
}
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	50000400 	.word	0x50000400

08003984 <SX1276AntSwDeInit>:
{
 8003984:	b510      	push	{r4, lr}
 8003986:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8003988:	2214      	movs	r2, #20
 800398a:	2100      	movs	r1, #0
 800398c:	a801      	add	r0, sp, #4
 800398e:	f003 fbd2 	bl	8007136 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003992:	2301      	movs	r3, #1
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct  ); 
 8003994:	4c07      	ldr	r4, [pc, #28]	; (80039b4 <SX1276AntSwDeInit+0x30>)
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003996:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct  ); 
 8003998:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 800399a:	3302      	adds	r3, #2
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct  ); 
 800399c:	0020      	movs	r0, r4
 800399e:	2102      	movs	r1, #2
  initStruct.Speed = GPIO_SPEED_HIGH;
 80039a0:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct  ); 
 80039a2:	f002 fc37 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 80039a6:	2200      	movs	r2, #0
 80039a8:	2102      	movs	r1, #2
 80039aa:	0020      	movs	r0, r4
 80039ac:	f002 fca6 	bl	80062fc <HW_GPIO_Write>
}
 80039b0:	b006      	add	sp, #24
 80039b2:	bd10      	pop	{r4, pc}
 80039b4:	50000800 	.word	0x50000800

080039b8 <SX1276SetAntSwLowPower>:
    if( RadioIsActive != status )
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <SX1276SetAntSwLowPower+0x1c>)
{
 80039ba:	b510      	push	{r4, lr}
    if( RadioIsActive != status )
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	4282      	cmp	r2, r0
 80039c0:	d004      	beq.n	80039cc <SX1276SetAntSwLowPower+0x14>
        RadioIsActive = status;
 80039c2:	7018      	strb	r0, [r3, #0]
        if( status == false )
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d102      	bne.n	80039ce <SX1276SetAntSwLowPower+0x16>
            SX1276AntSwInit( );
 80039c8:	f7ff ffdc 	bl	8003984 <SX1276AntSwDeInit>
}
 80039cc:	bd10      	pop	{r4, pc}
            SX1276AntSwDeInit( );
 80039ce:	f7ff ffd9 	bl	8003984 <SX1276AntSwDeInit>
}
 80039d2:	e7fb      	b.n	80039cc <SX1276SetAntSwLowPower+0x14>
 80039d4:	200001c0 	.word	0x200001c0

080039d8 <SX1276SetAntSw>:
{
 80039d8:	b510      	push	{r4, lr}
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_TX);
 80039da:	2201      	movs	r2, #1
    switch( opMode )
 80039dc:	2803      	cmp	r0, #3
 80039de:	d000      	beq.n	80039e2 <SX1276SetAntSw+0xa>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 80039e0:	2200      	movs	r2, #0
 80039e2:	2102      	movs	r1, #2
 80039e4:	4801      	ldr	r0, [pc, #4]	; (80039ec <SX1276SetAntSw+0x14>)
 80039e6:	f002 fc89 	bl	80062fc <HW_GPIO_Write>
}
 80039ea:	bd10      	pop	{r4, pc}
 80039ec:	50000800 	.word	0x50000800

080039f0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <SystemInit+0x44>)
 80039f4:	0052      	lsls	r2, r2, #1
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	490e      	ldr	r1, [pc, #56]	; (8003a38 <SystemInit+0x48>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	490d      	ldr	r1, [pc, #52]	; (8003a3c <SystemInit+0x4c>)
 8003a08:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003a0a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003a0c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	438a      	bics	r2, r1
 8003a12:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	490a      	ldr	r1, [pc, #40]	; (8003a40 <SystemInit+0x50>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	4909      	ldr	r1, [pc, #36]	; (8003a44 <SystemInit+0x54>)
 8003a20:	400a      	ands	r2, r1
 8003a22:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003a24:	2200      	movs	r2, #0
 8003a26:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <SystemInit+0x58>)
 8003a2c:	0512      	lsls	r2, r2, #20
 8003a2e:	609a      	str	r2, [r3, #8]
#endif
}
 8003a30:	4770      	bx	lr
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	40021000 	.word	0x40021000
 8003a38:	88ff400c 	.word	0x88ff400c
 8003a3c:	fef6fff6 	.word	0xfef6fff6
 8003a40:	fffbffff 	.word	0xfffbffff
 8003a44:	ff02ffff 	.word	0xff02ffff
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <HAL_Init+0x24>)
{
 8003a50:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a52:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a54:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a5a:	f003 f87d 	bl	8006b58 <HAL_InitTick>
 8003a5e:	1e04      	subs	r4, r0, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a62:	f003 f881 	bl	8006b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8003a66:	0020      	movs	r0, r4
 8003a68:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003a6a:	2401      	movs	r4, #1
 8003a6c:	e7fb      	b.n	8003a66 <HAL_Init+0x1a>
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	40022000 	.word	0x40022000

08003a74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003a74:	4a02      	ldr	r2, [pc, #8]	; (8003a80 <HAL_IncTick+0xc>)
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	6013      	str	r3, [r2, #0]
}
 8003a7c:	4770      	bx	lr
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	2000060c 	.word	0x2000060c

08003a84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003a84:	4b01      	ldr	r3, [pc, #4]	; (8003a8c <HAL_GetTick+0x8>)
 8003a86:	6818      	ldr	r0, [r3, #0]
}
 8003a88:	4770      	bx	lr
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	2000060c 	.word	0x2000060c

08003a90 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003a90:	2101      	movs	r1, #1
 8003a92:	4a02      	ldr	r2, [pc, #8]	; (8003a9c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8003a94:	6853      	ldr	r3, [r2, #4]
 8003a96:	438b      	bics	r3, r1
 8003a98:	6053      	str	r3, [r2, #4]
}
 8003a9a:	4770      	bx	lr
 8003a9c:	40015800 	.word	0x40015800

08003aa0 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4a02      	ldr	r2, [pc, #8]	; (8003aac <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8003aa4:	6853      	ldr	r3, [r2, #4]
 8003aa6:	438b      	bics	r3, r1
 8003aa8:	6053      	str	r3, [r2, #4]
}
 8003aaa:	4770      	bx	lr
 8003aac:	40015800 	.word	0x40015800

08003ab0 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	4a02      	ldr	r2, [pc, #8]	; (8003abc <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8003ab4:	6853      	ldr	r3, [r2, #4]
 8003ab6:	438b      	bics	r3, r1
 8003ab8:	6053      	str	r3, [r2, #4]
}
 8003aba:	4770      	bx	lr
 8003abc:	40015800 	.word	0x40015800

08003ac0 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003ac0:	2103      	movs	r1, #3
 8003ac2:	6803      	ldr	r3, [r0, #0]
{
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003ac8:	6898      	ldr	r0, [r3, #8]
 8003aca:	4008      	ands	r0, r1
 8003acc:	2801      	cmp	r0, #1
 8003ace:	d001      	beq.n	8003ad4 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ad0:	2000      	movs	r0, #0
}
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4202      	tst	r2, r0
 8003ad8:	d0fa      	beq.n	8003ad0 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003ada:	2205      	movs	r2, #5
 8003adc:	689d      	ldr	r5, [r3, #8]
 8003ade:	4015      	ands	r5, r2
 8003ae0:	2d01      	cmp	r5, #1
 8003ae2:	d119      	bne.n	8003b18 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8003ae4:	6898      	ldr	r0, [r3, #8]
 8003ae6:	3a03      	subs	r2, #3
 8003ae8:	4302      	orrs	r2, r0
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003aee:	f7ff ffc9 	bl	8003a84 <HAL_GetTick>
 8003af2:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	422b      	tst	r3, r5
 8003afa:	d0e9      	beq.n	8003ad0 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003afc:	f7ff ffc2 	bl	8003a84 <HAL_GetTick>
 8003b00:	1b80      	subs	r0, r0, r6
 8003b02:	280a      	cmp	r0, #10
 8003b04:	d9f6      	bls.n	8003af4 <ADC_Disable+0x34>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b06:	2310      	movs	r3, #16
 8003b08:	6d62      	ldr	r2, [r4, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b12:	431d      	orrs	r5, r3
 8003b14:	65a5      	str	r5, [r4, #88]	; 0x58
 8003b16:	e7dc      	b.n	8003ad2 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b18:	2310      	movs	r3, #16
 8003b1a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b22:	4303      	orrs	r3, r0
 8003b24:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8003b26:	e7d4      	b.n	8003ad2 <ADC_Disable+0x12>

08003b28 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003b28:	2204      	movs	r2, #4
 8003b2a:	6803      	ldr	r3, [r0, #0]
{
 8003b2c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003b2e:	6899      	ldr	r1, [r3, #8]
{
 8003b30:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003b32:	4211      	tst	r1, r2
 8003b34:	d101      	bne.n	8003b3a <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b36:	2000      	movs	r0, #0
}
 8003b38:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b3a:	6899      	ldr	r1, [r3, #8]
 8003b3c:	4211      	tst	r1, r2
 8003b3e:	d006      	beq.n	8003b4e <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003b40:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b42:	0792      	lsls	r2, r2, #30
 8003b44:	d403      	bmi.n	8003b4e <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003b46:	2210      	movs	r2, #16
 8003b48:	6899      	ldr	r1, [r3, #8]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003b4e:	f7ff ff99 	bl	8003a84 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003b52:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8003b54:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	422b      	tst	r3, r5
 8003b5c:	d0eb      	beq.n	8003b36 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b5e:	f7ff ff91 	bl	8003a84 <HAL_GetTick>
 8003b62:	1b80      	subs	r0, r0, r6
 8003b64:	280a      	cmp	r0, #10
 8003b66:	d9f6      	bls.n	8003b56 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b68:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b74:	4303      	orrs	r3, r0
 8003b76:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b78:	e7de      	b.n	8003b38 <ADC_ConversionStop+0x10>

08003b7a <HAL_ADC_MspInit>:
}
 8003b7a:	4770      	bx	lr

08003b7c <HAL_ADC_Init>:
{
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003b80:	2001      	movs	r0, #1
  if(hadc == NULL)
 8003b82:	2c00      	cmp	r4, #0
 8003b84:	d019      	beq.n	8003bba <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8003b8c:	0022      	movs	r2, r4
 8003b8e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8003b90:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8003b92:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003b94:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8003b96:	f7ff fff0 	bl	8003b7a <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003b9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b9c:	06db      	lsls	r3, r3, #27
 8003b9e:	d404      	bmi.n	8003baa <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	6898      	ldr	r0, [r3, #8]
 8003ba6:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003ba8:	d008      	beq.n	8003bbc <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003baa:	2310      	movs	r3, #16
 8003bac:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8003bae:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	3450      	adds	r4, #80	; 0x50
 8003bb8:	7023      	strb	r3, [r4, #0]
}
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8003bbc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003bbe:	4955      	ldr	r1, [pc, #340]	; (8003d14 <HAL_ADC_Init+0x198>)
 8003bc0:	4011      	ands	r1, r2
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bc8:	2203      	movs	r2, #3
 8003bca:	6899      	ldr	r1, [r3, #8]
 8003bcc:	4011      	ands	r1, r2
 8003bce:	4a52      	ldr	r2, [pc, #328]	; (8003d18 <HAL_ADC_Init+0x19c>)
 8003bd0:	2901      	cmp	r1, #1
 8003bd2:	d102      	bne.n	8003bda <HAL_ADC_Init+0x5e>
 8003bd4:	681d      	ldr	r5, [r3, #0]
 8003bd6:	420d      	tst	r5, r1
 8003bd8:	d119      	bne.n	8003c0e <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003bda:	2680      	movs	r6, #128	; 0x80
 8003bdc:	6861      	ldr	r1, [r4, #4]
 8003bde:	05f6      	lsls	r6, r6, #23
 8003be0:	004d      	lsls	r5, r1, #1
 8003be2:	086d      	lsrs	r5, r5, #1
 8003be4:	42b5      	cmp	r5, r6
 8003be6:	d003      	beq.n	8003bf0 <HAL_ADC_Init+0x74>
 8003be8:	2580      	movs	r5, #128	; 0x80
 8003bea:	062d      	lsls	r5, r5, #24
 8003bec:	42a9      	cmp	r1, r5
 8003bee:	d176      	bne.n	8003cde <HAL_ADC_Init+0x162>
 8003bf0:	691d      	ldr	r5, [r3, #16]
 8003bf2:	00ad      	lsls	r5, r5, #2
 8003bf4:	08ad      	lsrs	r5, r5, #2
 8003bf6:	611d      	str	r5, [r3, #16]
 8003bf8:	691d      	ldr	r5, [r3, #16]
 8003bfa:	4329      	orrs	r1, r5
 8003bfc:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003bfe:	2518      	movs	r5, #24
 8003c00:	68d9      	ldr	r1, [r3, #12]
 8003c02:	43a9      	bics	r1, r5
 8003c04:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003c06:	68d9      	ldr	r1, [r3, #12]
 8003c08:	68a5      	ldr	r5, [r4, #8]
 8003c0a:	4329      	orrs	r1, r5
 8003c0c:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003c0e:	6811      	ldr	r1, [r2, #0]
 8003c10:	4d42      	ldr	r5, [pc, #264]	; (8003d1c <HAL_ADC_Init+0x1a0>)
 8003c12:	4029      	ands	r1, r5
 8003c14:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c18:	6815      	ldr	r5, [r2, #0]
 8003c1a:	0649      	lsls	r1, r1, #25
 8003c1c:	4329      	orrs	r1, r5
 8003c1e:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	0552      	lsls	r2, r2, #21
 8003c26:	4211      	tst	r1, r2
 8003c28:	d102      	bne.n	8003c30 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003c2a:	6899      	ldr	r1, [r3, #8]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	493b      	ldr	r1, [pc, #236]	; (8003d20 <HAL_ADC_Init+0x1a4>)
 8003c34:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003c36:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003c38:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003c3a:	68dd      	ldr	r5, [r3, #12]
 8003c3c:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003c3e:	2902      	cmp	r1, #2
 8003c40:	d100      	bne.n	8003c44 <HAL_ADC_Init+0xc8>
 8003c42:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003c44:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003c46:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003c48:	4332      	orrs	r2, r6
 8003c4a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003c4c:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003c4e:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003c50:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003c52:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003c54:	69e5      	ldr	r5, [r4, #28]
 8003c56:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003c58:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003c5a:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003c5c:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003c5e:	0025      	movs	r5, r4
 8003c60:	352c      	adds	r5, #44	; 0x2c
 8003c62:	782d      	ldrb	r5, [r5, #0]
 8003c64:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003c66:	432a      	orrs	r2, r5
 8003c68:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c6a:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003c6c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c70:	30ff      	adds	r0, #255	; 0xff
 8003c72:	4282      	cmp	r2, r0
 8003c74:	d004      	beq.n	8003c80 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003c76:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003c78:	68d8      	ldr	r0, [r3, #12]
 8003c7a:	432a      	orrs	r2, r5
 8003c7c:	4302      	orrs	r2, r0
 8003c7e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c80:	1ca2      	adds	r2, r4, #2
 8003c82:	7fd2      	ldrb	r2, [r2, #31]
 8003c84:	2a01      	cmp	r2, #1
 8003c86:	d106      	bne.n	8003c96 <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c88:	2900      	cmp	r1, #0
 8003c8a:	d134      	bne.n	8003cf6 <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	68d9      	ldr	r1, [r3, #12]
 8003c90:	0252      	lsls	r2, r2, #9
 8003c92:	430a      	orrs	r2, r1
 8003c94:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c96:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003c98:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c9a:	2901      	cmp	r1, #1
 8003c9c:	d133      	bne.n	8003d06 <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003c9e:	4821      	ldr	r0, [pc, #132]	; (8003d24 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003ca0:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003ca2:	4002      	ands	r2, r0
 8003ca4:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003ca6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ca8:	6918      	ldr	r0, [r3, #16]
 8003caa:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8003cac:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003cae:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003cb0:	4302      	orrs	r2, r0
 8003cb2:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003cba:	2107      	movs	r1, #7
 8003cbc:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8003cbe:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8003ccc:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8003cce:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8003cd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cd2:	4393      	bics	r3, r2
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8003cdc:	e76d      	b.n	8003bba <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003cde:	691d      	ldr	r5, [r3, #16]
 8003ce0:	4e11      	ldr	r6, [pc, #68]	; (8003d28 <HAL_ADC_Init+0x1ac>)
 8003ce2:	00ad      	lsls	r5, r5, #2
 8003ce4:	08ad      	lsrs	r5, r5, #2
 8003ce6:	611d      	str	r5, [r3, #16]
 8003ce8:	6815      	ldr	r5, [r2, #0]
 8003cea:	4035      	ands	r5, r6
 8003cec:	6015      	str	r5, [r2, #0]
 8003cee:	6815      	ldr	r5, [r2, #0]
 8003cf0:	4329      	orrs	r1, r5
 8003cf2:	6011      	str	r1, [r2, #0]
 8003cf4:	e783      	b.n	8003bfe <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf6:	2120      	movs	r1, #32
 8003cf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cfa:	4301      	orrs	r1, r0
 8003cfc:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003d00:	430a      	orrs	r2, r1
 8003d02:	65a2      	str	r2, [r4, #88]	; 0x58
 8003d04:	e7c7      	b.n	8003c96 <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003d06:	2101      	movs	r1, #1
 8003d08:	420a      	tst	r2, r1
 8003d0a:	d0d6      	beq.n	8003cba <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	438a      	bics	r2, r1
 8003d10:	611a      	str	r2, [r3, #16]
 8003d12:	e7d2      	b.n	8003cba <HAL_ADC_Init+0x13e>
 8003d14:	fffffefd 	.word	0xfffffefd
 8003d18:	40012708 	.word	0x40012708
 8003d1c:	fdffffff 	.word	0xfdffffff
 8003d20:	fffe0219 	.word	0xfffe0219
 8003d24:	fffffc03 	.word	0xfffffc03
 8003d28:	ffc3ffff 	.word	0xffc3ffff

08003d2c <HAL_ADC_MspDeInit>:
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_ADC_DeInit>:
{
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003d34:	2501      	movs	r5, #1
  if(hadc == NULL)
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d011      	beq.n	8003d5e <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003d42:	f7ff fef1 	bl	8003b28 <ADC_ConversionStop>
 8003d46:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8003d48:	d137      	bne.n	8003dba <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8003d4a:	0020      	movs	r0, r4
 8003d4c:	f7ff feb8 	bl	8003ac0 <ADC_Disable>
 8003d50:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8003d52:	2801      	cmp	r0, #1
 8003d54:	d105      	bne.n	8003d62 <HAL_ADC_DeInit+0x32>
{
 8003d56:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	3450      	adds	r4, #80	; 0x50
 8003d5c:	7023      	strb	r3, [r4, #0]
}
 8003d5e:	0028      	movs	r0, r5
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8003d62:	2301      	movs	r3, #1
 8003d64:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	4915      	ldr	r1, [pc, #84]	; (8003dc0 <HAL_ADC_DeInit+0x90>)
 8003d6a:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8003d6c:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003d6e:	400a      	ands	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003d72:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003d74:	4914      	ldr	r1, [pc, #80]	; (8003dc8 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003d76:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	4912      	ldr	r1, [pc, #72]	; (8003dcc <HAL_ADC_DeInit+0x9c>)
 8003d82:	400a      	ands	r2, r1
 8003d84:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	4911      	ldr	r1, [pc, #68]	; (8003dd0 <HAL_ADC_DeInit+0xa0>)
 8003d8a:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003d8c:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8003d8e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	438a      	bics	r2, r1
 8003d94:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8003d96:	6a1a      	ldr	r2, [r3, #32]
 8003d98:	490e      	ldr	r1, [pc, #56]	; (8003dd4 <HAL_ADC_DeInit+0xa4>)
 8003d9a:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003d9c:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8003d9e:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003da0:	33b4      	adds	r3, #180	; 0xb4
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	438a      	bics	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	438a      	bics	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 8003dae:	f7ff ffbd 	bl	8003d2c <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003db2:	2300      	movs	r3, #0
 8003db4:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8003db6:	6563      	str	r3, [r4, #84]	; 0x54
 8003db8:	e7ce      	b.n	8003d58 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 8003dba:	2801      	cmp	r0, #1
 8003dbc:	d0cb      	beq.n	8003d56 <HAL_ADC_DeInit+0x26>
 8003dbe:	e7d2      	b.n	8003d66 <HAL_ADC_DeInit+0x36>
 8003dc0:	fffff760 	.word	0xfffff760
 8003dc4:	0000089f 	.word	0x0000089f
 8003dc8:	efffffff 	.word	0xefffffff
 8003dcc:	833e0200 	.word	0x833e0200
 8003dd0:	3ffffc02 	.word	0x3ffffc02
 8003dd4:	f000f000 	.word	0xf000f000

08003dd8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dd8:	b530      	push	{r4, r5, lr}
 8003dda:	25ff      	movs	r5, #255	; 0xff
 8003ddc:	2403      	movs	r4, #3
 8003dde:	002a      	movs	r2, r5
 8003de0:	b2c3      	uxtb	r3, r0
 8003de2:	401c      	ands	r4, r3
 8003de4:	00e4      	lsls	r4, r4, #3
 8003de6:	40a2      	lsls	r2, r4
 8003de8:	0189      	lsls	r1, r1, #6
 8003dea:	4029      	ands	r1, r5
 8003dec:	43d2      	mvns	r2, r2
 8003dee:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003df0:	2800      	cmp	r0, #0
 8003df2:	db0a      	blt.n	8003e0a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003df4:	24c0      	movs	r4, #192	; 0xc0
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_NVIC_SetPriority+0x4c>)
 8003df8:	0880      	lsrs	r0, r0, #2
 8003dfa:	0080      	lsls	r0, r0, #2
 8003dfc:	18c0      	adds	r0, r0, r3
 8003dfe:	00a4      	lsls	r4, r4, #2
 8003e00:	5903      	ldr	r3, [r0, r4]
 8003e02:	401a      	ands	r2, r3
 8003e04:	4311      	orrs	r1, r2
 8003e06:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003e08:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e0a:	200f      	movs	r0, #15
 8003e0c:	4003      	ands	r3, r0
 8003e0e:	3b08      	subs	r3, #8
 8003e10:	4805      	ldr	r0, [pc, #20]	; (8003e28 <HAL_NVIC_SetPriority+0x50>)
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	181b      	adds	r3, r3, r0
 8003e18:	69d8      	ldr	r0, [r3, #28]
 8003e1a:	4002      	ands	r2, r0
 8003e1c:	4311      	orrs	r1, r2
 8003e1e:	61d9      	str	r1, [r3, #28]
 8003e20:	e7f2      	b.n	8003e08 <HAL_NVIC_SetPriority+0x30>
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	e000e100 	.word	0xe000e100
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	db05      	blt.n	8003e3c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e30:	231f      	movs	r3, #31
 8003e32:	4018      	ands	r0, r3
 8003e34:	3b1e      	subs	r3, #30
 8003e36:	4083      	lsls	r3, r0
 8003e38:	4a01      	ldr	r2, [pc, #4]	; (8003e40 <HAL_NVIC_EnableIRQ+0x14>)
 8003e3a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e3c:	4770      	bx	lr
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	e000e100 	.word	0xe000e100

08003e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003e48:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003e4a:	2c00      	cmp	r4, #0
 8003e4c:	d035      	beq.n	8003eba <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e4e:	6825      	ldr	r5, [r4, #0]
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_DMA_Init+0x78>)
 8003e52:	2114      	movs	r1, #20
 8003e54:	18e8      	adds	r0, r5, r3
 8003e56:	f7fc f961 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e5c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003e5e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e60:	2302      	movs	r3, #2
 8003e62:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e64:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e66:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e68:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e6a:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e6c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e6e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003e70:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e72:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8003e74:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e76:	433b      	orrs	r3, r7
 8003e78:	6967      	ldr	r7, [r4, #20]
 8003e7a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7c:	69a7      	ldr	r7, [r4, #24]
 8003e7e:	433b      	orrs	r3, r7
 8003e80:	69e7      	ldr	r7, [r4, #28]
 8003e82:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e84:	6a27      	ldr	r7, [r4, #32]
 8003e86:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003e88:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e8a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	01db      	lsls	r3, r3, #7
 8003e90:	4299      	cmp	r1, r3
 8003e92:	d00c      	beq.n	8003eae <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e94:	251c      	movs	r5, #28
 8003e96:	4028      	ands	r0, r5
 8003e98:	3d0d      	subs	r5, #13
 8003e9a:	4085      	lsls	r5, r0
 8003e9c:	490a      	ldr	r1, [pc, #40]	; (8003ec8 <HAL_DMA_Init+0x84>)
 8003e9e:	680b      	ldr	r3, [r1, #0]
 8003ea0:	43ab      	bics	r3, r5
 8003ea2:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ea4:	6863      	ldr	r3, [r4, #4]
 8003ea6:	680d      	ldr	r5, [r1, #0]
 8003ea8:	4083      	lsls	r3, r0
 8003eaa:	432b      	orrs	r3, r5
 8003eac:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eae:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003eb0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb2:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003eb4:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003eb6:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003eb8:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ebc:	bffdfff8 	.word	0xbffdfff8
 8003ec0:	40020000 	.word	0x40020000
 8003ec4:	ffff800f 	.word	0xffff800f
 8003ec8:	400200a8 	.word	0x400200a8

08003ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ece:	1d44      	adds	r4, r0, #5
 8003ed0:	7fe6      	ldrb	r6, [r4, #31]
{
 8003ed2:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	2e01      	cmp	r6, #1
 8003ed8:	d02b      	beq.n	8003f32 <HAL_DMA_Start_IT+0x66>
 8003eda:	3801      	subs	r0, #1
 8003edc:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ede:	1da8      	adds	r0, r5, #6
 8003ee0:	7fc6      	ldrb	r6, [r0, #31]
 8003ee2:	4684      	mov	ip, r0
 8003ee4:	b2f6      	uxtb	r6, r6
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	2700      	movs	r7, #0
 8003eea:	2e01      	cmp	r6, #1
 8003eec:	d12c      	bne.n	8003f48 <HAL_DMA_Start_IT+0x7c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eee:	4664      	mov	r4, ip
 8003ef0:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ef2:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef4:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003ef6:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ef8:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 8003efa:	43b0      	bics	r0, r6
 8003efc:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003efe:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8003f00:	9001      	str	r0, [sp, #4]
 8003f02:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8003f04:	4007      	ands	r7, r0
 8003f06:	40be      	lsls	r6, r7
 8003f08:	9801      	ldr	r0, [sp, #4]
 8003f0a:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f0c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f0e:	68ab      	ldr	r3, [r5, #8]
 8003f10:	6828      	ldr	r0, [r5, #0]
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d10e      	bne.n	8003f34 <HAL_DMA_Start_IT+0x68>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f16:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f18:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003f1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00c      	beq.n	8003f3a <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f20:	230e      	movs	r3, #14
 8003f22:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f24:	4313      	orrs	r3, r2
 8003f26:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003f28:	2301      	movs	r3, #1
 8003f2a:	6802      	ldr	r2, [r0, #0]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2000      	movs	r0, #0
}
 8003f32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003f34:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003f36:	60e2      	str	r2, [r4, #12]
 8003f38:	e7ef      	b.n	8003f1a <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	4393      	bics	r3, r2
 8003f40:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	230a      	movs	r3, #10
 8003f46:	e7ed      	b.n	8003f24 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 8003f48:	77e7      	strb	r7, [r4, #31]
 8003f4a:	e7f2      	b.n	8003f32 <HAL_DMA_Start_IT+0x66>

08003f4c <HAL_DMA_Abort_IT>:
{
 8003f4c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f4e:	1d84      	adds	r4, r0, #6
 8003f50:	7fe3      	ldrb	r3, [r4, #31]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d004      	beq.n	8003f60 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f56:	2304      	movs	r3, #4
 8003f58:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003f5a:	3b03      	subs	r3, #3
}
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f60:	210e      	movs	r1, #14
 8003f62:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f64:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	438a      	bics	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	6819      	ldr	r1, [r3, #0]
 8003f70:	4391      	bics	r1, r2
 8003f72:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f74:	231c      	movs	r3, #28
 8003f76:	402b      	ands	r3, r5
 8003f78:	0015      	movs	r5, r2
 8003f7a:	409d      	lsls	r5, r3
 8003f7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8003f7e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f80:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003f82:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003f84:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8003f86:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003f88:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003f8c:	42a2      	cmp	r2, r4
 8003f8e:	d0e5      	beq.n	8003f5c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003f90:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	0023      	movs	r3, r4
 8003f94:	e7e2      	b.n	8003f5c <HAL_DMA_Abort_IT+0x10>

08003f96 <HAL_DMA_IRQHandler>:
{
 8003f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f98:	221c      	movs	r2, #28
 8003f9a:	2704      	movs	r7, #4
 8003f9c:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f9e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003fa0:	4032      	ands	r2, r6
 8003fa2:	003e      	movs	r6, r7
 8003fa4:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fa6:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003fa8:	6803      	ldr	r3, [r0, #0]
 8003faa:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003fac:	4235      	tst	r5, r6
 8003fae:	d00d      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x36>
 8003fb0:	423c      	tst	r4, r7
 8003fb2:	d00b      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	0692      	lsls	r2, r2, #26
 8003fb8:	d402      	bmi.n	8003fc0 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	43ba      	bics	r2, r7
 8003fbe:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003fc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003fc2:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d019      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003fc8:	4798      	blx	r3
  return;
 8003fca:	e017      	b.n	8003ffc <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003fcc:	2702      	movs	r7, #2
 8003fce:	003e      	movs	r6, r7
 8003fd0:	4096      	lsls	r6, r2
 8003fd2:	4235      	tst	r5, r6
 8003fd4:	d013      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x68>
 8003fd6:	423c      	tst	r4, r7
 8003fd8:	d011      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	0692      	lsls	r2, r2, #26
 8003fde:	d406      	bmi.n	8003fee <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fe0:	240a      	movs	r4, #10
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	43a2      	bics	r2, r4
 8003fe6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	1d83      	adds	r3, r0, #6
 8003fec:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ff2:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003ff4:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003ff6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d1e5      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x32>
}
 8003ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003ffe:	2608      	movs	r6, #8
 8004000:	0037      	movs	r7, r6
 8004002:	4097      	lsls	r7, r2
 8004004:	423d      	tst	r5, r7
 8004006:	d0f9      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x66>
 8004008:	4234      	tst	r4, r6
 800400a:	d0f7      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800400c:	250e      	movs	r5, #14
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	43ac      	bics	r4, r5
 8004012:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004014:	2301      	movs	r3, #1
 8004016:	001c      	movs	r4, r3
 8004018:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800401a:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800401c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800401e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004020:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8004022:	2200      	movs	r2, #0
 8004024:	1d43      	adds	r3, r0, #5
 8004026:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8004028:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800402a:	e7e5      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x62>

0800402c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800402c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800402e:	4a54      	ldr	r2, [pc, #336]	; (8004180 <HAL_GPIO_Init+0x154>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8004030:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004032:	1882      	adds	r2, r0, r2
 8004034:	1e54      	subs	r4, r2, #1
 8004036:	41a2      	sbcs	r2, r4
{
 8004038:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 800403a:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 800403c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800403e:	3205      	adds	r2, #5
 8004040:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004042:	9a03      	ldr	r2, [sp, #12]
 8004044:	40da      	lsrs	r2, r3
 8004046:	d101      	bne.n	800404c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8004048:	b007      	add	sp, #28
 800404a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800404c:	2501      	movs	r5, #1
 800404e:	409d      	lsls	r5, r3
 8004050:	9a03      	ldr	r2, [sp, #12]
 8004052:	402a      	ands	r2, r5
 8004054:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8004056:	d100      	bne.n	800405a <HAL_GPIO_Init+0x2e>
 8004058:	e08f      	b.n	800417a <HAL_GPIO_Init+0x14e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800405a:	684a      	ldr	r2, [r1, #4]
 800405c:	9201      	str	r2, [sp, #4]
 800405e:	2210      	movs	r2, #16
 8004060:	9e01      	ldr	r6, [sp, #4]
 8004062:	4396      	bics	r6, r2
 8004064:	2e02      	cmp	r6, #2
 8004066:	d10f      	bne.n	8004088 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8004068:	08da      	lsrs	r2, r3, #3
 800406a:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800406c:	2407      	movs	r4, #7
 800406e:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8004070:	6a17      	ldr	r7, [r2, #32]
 8004072:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004074:	220f      	movs	r2, #15
 8004076:	401c      	ands	r4, r3
 8004078:	00a4      	lsls	r4, r4, #2
 800407a:	40a2      	lsls	r2, r4
 800407c:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800407e:	690a      	ldr	r2, [r1, #16]
 8004080:	40a2      	lsls	r2, r4
 8004082:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 8004084:	9a04      	ldr	r2, [sp, #16]
 8004086:	6217      	str	r7, [r2, #32]
 8004088:	2203      	movs	r2, #3
 800408a:	005c      	lsls	r4, r3, #1
 800408c:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800408e:	3e01      	subs	r6, #1
 8004090:	43d2      	mvns	r2, r2
 8004092:	2e01      	cmp	r6, #1
 8004094:	d80d      	bhi.n	80040b2 <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004096:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8004098:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800409a:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800409c:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800409e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80040a0:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 80040a2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040a4:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80040a6:	9d01      	ldr	r5, [sp, #4]
 80040a8:	06ed      	lsls	r5, r5, #27
 80040aa:	0fed      	lsrs	r5, r5, #31
 80040ac:	409d      	lsls	r5, r3
 80040ae:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80040b0:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b2:	2603      	movs	r6, #3
 80040b4:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 80040b6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b8:	4035      	ands	r5, r6
 80040ba:	40a5      	lsls	r5, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040bc:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040be:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 80040c0:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 80040c2:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040c4:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80040c6:	688d      	ldr	r5, [r1, #8]
 80040c8:	40a5      	lsls	r5, r4
 80040ca:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80040cc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80040ce:	9a01      	ldr	r2, [sp, #4]
 80040d0:	00d2      	lsls	r2, r2, #3
 80040d2:	d552      	bpl.n	800417a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d4:	2501      	movs	r5, #1
 80040d6:	4c2b      	ldr	r4, [pc, #172]	; (8004184 <HAL_GPIO_Init+0x158>)
 80040d8:	46ac      	mov	ip, r5
 80040da:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80040dc:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040de:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80040e0:	001d      	movs	r5, r3
 80040e2:	4035      	ands	r5, r6
 80040e4:	00ad      	lsls	r5, r5, #2
 80040e6:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e8:	6362      	str	r2, [r4, #52]	; 0x34
 80040ea:	4a27      	ldr	r2, [pc, #156]	; (8004188 <HAL_GPIO_Init+0x15c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80040ec:	089c      	lsrs	r4, r3, #2
 80040ee:	00a4      	lsls	r4, r4, #2
 80040f0:	18a4      	adds	r4, r4, r2
 80040f2:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80040f4:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80040f6:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80040f8:	9204      	str	r2, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80040fa:	05ff      	lsls	r7, r7, #23
 80040fc:	2200      	movs	r2, #0
 80040fe:	42b8      	cmp	r0, r7
 8004100:	d010      	beq.n	8004124 <HAL_GPIO_Init+0xf8>
 8004102:	4f22      	ldr	r7, [pc, #136]	; (800418c <HAL_GPIO_Init+0x160>)
 8004104:	4662      	mov	r2, ip
 8004106:	42b8      	cmp	r0, r7
 8004108:	d00c      	beq.n	8004124 <HAL_GPIO_Init+0xf8>
 800410a:	4f21      	ldr	r7, [pc, #132]	; (8004190 <HAL_GPIO_Init+0x164>)
 800410c:	1892      	adds	r2, r2, r2
 800410e:	42b8      	cmp	r0, r7
 8004110:	d008      	beq.n	8004124 <HAL_GPIO_Init+0xf8>
 8004112:	4f20      	ldr	r7, [pc, #128]	; (8004194 <HAL_GPIO_Init+0x168>)
 8004114:	0032      	movs	r2, r6
 8004116:	42b8      	cmp	r0, r7
 8004118:	d004      	beq.n	8004124 <HAL_GPIO_Init+0xf8>
 800411a:	4e1f      	ldr	r6, [pc, #124]	; (8004198 <HAL_GPIO_Init+0x16c>)
 800411c:	4462      	add	r2, ip
 800411e:	42b0      	cmp	r0, r6
 8004120:	d000      	beq.n	8004124 <HAL_GPIO_Init+0xf8>
 8004122:	9a05      	ldr	r2, [sp, #20]
 8004124:	40aa      	lsls	r2, r5
 8004126:	9d04      	ldr	r5, [sp, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004128:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800412a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800412c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800412e:	4a1b      	ldr	r2, [pc, #108]	; (800419c <HAL_GPIO_Init+0x170>)
        temp &= ~((uint32_t)iocurrent);
 8004130:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8004132:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8004134:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8004136:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8004138:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800413a:	03ff      	lsls	r7, r7, #15
 800413c:	d401      	bmi.n	8004142 <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 800413e:	0035      	movs	r5, r6
 8004140:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8004142:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8004144:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8004146:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004148:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800414a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800414c:	03bf      	lsls	r7, r7, #14
 800414e:	d401      	bmi.n	8004154 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8004150:	0035      	movs	r5, r6
 8004152:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8004154:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8004156:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8004158:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800415a:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800415c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800415e:	02ff      	lsls	r7, r7, #11
 8004160:	d401      	bmi.n	8004166 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8004162:	0035      	movs	r5, r6
 8004164:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8004166:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8004168:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800416a:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800416c:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800416e:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004170:	02bf      	lsls	r7, r7, #10
 8004172:	d401      	bmi.n	8004178 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8004174:	4025      	ands	r5, r4
 8004176:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8004178:	60d6      	str	r6, [r2, #12]
    position++;
 800417a:	3301      	adds	r3, #1
 800417c:	e761      	b.n	8004042 <HAL_GPIO_Init+0x16>
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	afffe400 	.word	0xafffe400
 8004184:	40021000 	.word	0x40021000
 8004188:	40010000 	.word	0x40010000
 800418c:	50000400 	.word	0x50000400
 8004190:	50000800 	.word	0x50000800
 8004194:	50000c00 	.word	0x50000c00
 8004198:	50001000 	.word	0x50001000
 800419c:	40010400 	.word	0x40010400

080041a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80041a0:	2a00      	cmp	r2, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041a4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80041a6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80041a8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80041aa:	e7fc      	b.n	80041a6 <HAL_GPIO_WritePin+0x6>

080041ac <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80041ae:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	4210      	tst	r0, r2
 80041b4:	d002      	beq.n	80041bc <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041b6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041b8:	f002 fd28 	bl	8006c0c <HAL_GPIO_EXTI_Callback>
  }
}
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	40010400 	.word	0x40010400

080041c4 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80041c4:	2110      	movs	r1, #16
 80041c6:	4a02      	ldr	r2, [pc, #8]	; (80041d0 <HAL_PWR_DisablePVD+0xc>)
 80041c8:	6813      	ldr	r3, [r2, #0]
 80041ca:	438b      	bics	r3, r1
 80041cc:	6013      	str	r3, [r2, #0]
}
 80041ce:	4770      	bx	lr
 80041d0:	40007000 	.word	0x40007000

080041d4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80041d4:	b510      	push	{r4, lr}

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80041d6:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <HAL_PWR_EnterSLEEPMode+0x2c>)
 80041da:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80041dc:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80041de:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80041e0:	6010      	str	r0, [r2, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80041e2:	2004      	movs	r0, #4
 80041e4:	4a07      	ldr	r2, [pc, #28]	; (8004204 <HAL_PWR_EnterSLEEPMode+0x30>)
 80041e6:	6913      	ldr	r3, [r2, #16]
 80041e8:	4383      	bics	r3, r0
 80041ea:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80041ec:	2901      	cmp	r1, #1
 80041ee:	d102      	bne.n	80041f6 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80041f0:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80041f2:	46c0      	nop			; (mov r8, r8)

}
 80041f4:	bd10      	pop	{r4, pc}
    __SEV();
 80041f6:	bf40      	sev
    __WFE();
 80041f8:	bf20      	wfe
    __WFE();
 80041fa:	bf20      	wfe
 80041fc:	e7f9      	b.n	80041f2 <HAL_PWR_EnterSLEEPMode+0x1e>
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	40007000 	.word	0x40007000
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004208:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800420a:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <HAL_PWR_EnterSTOPMode+0x30>)
 800420e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004210:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004212:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004214:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004216:	2204      	movs	r2, #4
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_PWR_EnterSTOPMode+0x34>)
 800421a:	6918      	ldr	r0, [r3, #16]
 800421c:	4302      	orrs	r2, r0
 800421e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004220:	2901      	cmp	r1, #1
 8004222:	d105      	bne.n	8004230 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004224:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004226:	2104      	movs	r1, #4
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	438a      	bics	r2, r1
 800422c:	611a      	str	r2, [r3, #16]

}
 800422e:	bd10      	pop	{r4, pc}
    __SEV();
 8004230:	bf40      	sev
    __WFE();
 8004232:	bf20      	wfe
    __WFE();
 8004234:	bf20      	wfe
 8004236:	e7f6      	b.n	8004226 <HAL_PWR_EnterSTOPMode+0x1e>
 8004238:	40007000 	.word	0x40007000
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	4a03      	ldr	r2, [pc, #12]	; (8004250 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	6811      	ldr	r1, [r2, #0]
 8004248:	430b      	orrs	r3, r1
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	4770      	bx	lr
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	40007000 	.word	0x40007000

08004254 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	4a03      	ldr	r2, [pc, #12]	; (8004264 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	6811      	ldr	r1, [r2, #0]
 800425c:	430b      	orrs	r3, r1
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	4770      	bx	lr
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	40007000 	.word	0x40007000

08004268 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004268:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800426c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800426e:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004270:	400a      	ands	r2, r1
 8004272:	2a08      	cmp	r2, #8
 8004274:	d029      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x62>
 8004276:	2a0c      	cmp	r2, #12
 8004278:	d009      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x26>
 800427a:	2a04      	cmp	r2, #4
 800427c:	d11d      	bne.n	80042ba <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800427e:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004282:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8004284:	17c0      	asrs	r0, r0, #31
 8004286:	4018      	ands	r0, r3
 8004288:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x70>)
 800428a:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800428c:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800428e:	028a      	lsls	r2, r1, #10
 8004290:	4812      	ldr	r0, [pc, #72]	; (80042dc <HAL_RCC_GetSysClockFreq+0x74>)
 8004292:	0f12      	lsrs	r2, r2, #28
 8004294:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004296:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004298:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800429a:	0f89      	lsrs	r1, r1, #30
 800429c:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429e:	03c0      	lsls	r0, r0, #15
 80042a0:	d504      	bpl.n	80042ac <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 80042a2:	480f      	ldr	r0, [pc, #60]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 80042a4:	4350      	muls	r0, r2
 80042a6:	f7fb ff39 	bl	800011c <__udivsi3>
 80042aa:	e7ef      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	06db      	lsls	r3, r3, #27
 80042b0:	d501      	bpl.n	80042b6 <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80042b2:	480c      	ldr	r0, [pc, #48]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x7c>)
 80042b4:	e7f6      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 80042b6:	4808      	ldr	r0, [pc, #32]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x70>)
 80042b8:	e7f4      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80042ba:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80042bc:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80042be:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80042c4:	3301      	adds	r3, #1
 80042c6:	4098      	lsls	r0, r3
 80042c8:	e7e0      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 80042ca:	4805      	ldr	r0, [pc, #20]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x78>)
 80042cc:	e7de      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x24>
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	40021000 	.word	0x40021000
 80042d4:	ff48e500 	.word	0xff48e500
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	08007dd4 	.word	0x08007dd4
 80042e0:	007a1200 	.word	0x007a1200
 80042e4:	003d0900 	.word	0x003d0900

080042e8 <HAL_RCC_OscConfig>:
{
 80042e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ea:	0005      	movs	r5, r0
 80042ec:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80042f2:	2001      	movs	r0, #1
}
 80042f4:	b007      	add	sp, #28
 80042f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f8:	230c      	movs	r3, #12
 80042fa:	4cc2      	ldr	r4, [pc, #776]	; (8004604 <HAL_RCC_OscConfig+0x31c>)
 80042fc:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042fe:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004300:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	025b      	lsls	r3, r3, #9
 8004306:	401a      	ands	r2, r3
 8004308:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430a:	6802      	ldr	r2, [r0, #0]
 800430c:	07d2      	lsls	r2, r2, #31
 800430e:	d441      	bmi.n	8004394 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	079b      	lsls	r3, r3, #30
 8004314:	d500      	bpl.n	8004318 <HAL_RCC_OscConfig+0x30>
 8004316:	e087      	b.n	8004428 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	06db      	lsls	r3, r3, #27
 800431c:	d528      	bpl.n	8004370 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800431e:	2e00      	cmp	r6, #0
 8004320:	d000      	beq.n	8004324 <HAL_RCC_OscConfig+0x3c>
 8004322:	e0e1      	b.n	80044e8 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	059b      	lsls	r3, r3, #22
 8004328:	d502      	bpl.n	8004330 <HAL_RCC_OscConfig+0x48>
 800432a:	69eb      	ldr	r3, [r5, #28]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0e0      	beq.n	80042f2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004330:	6862      	ldr	r2, [r4, #4]
 8004332:	49b5      	ldr	r1, [pc, #724]	; (8004608 <HAL_RCC_OscConfig+0x320>)
 8004334:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004336:	400a      	ands	r2, r1
 8004338:	431a      	orrs	r2, r3
 800433a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800433c:	6861      	ldr	r1, [r4, #4]
 800433e:	6a2a      	ldr	r2, [r5, #32]
 8004340:	0209      	lsls	r1, r1, #8
 8004342:	0a09      	lsrs	r1, r1, #8
 8004344:	0612      	lsls	r2, r2, #24
 8004346:	430a      	orrs	r2, r1
 8004348:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800434a:	2280      	movs	r2, #128	; 0x80
 800434c:	0b5b      	lsrs	r3, r3, #13
 800434e:	3301      	adds	r3, #1
 8004350:	0212      	lsls	r2, r2, #8
 8004352:	409a      	lsls	r2, r3
 8004354:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004356:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004358:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800435a:	060a      	lsls	r2, r1, #24
 800435c:	49ab      	ldr	r1, [pc, #684]	; (800460c <HAL_RCC_OscConfig+0x324>)
 800435e:	0f12      	lsrs	r2, r2, #28
 8004360:	5c8a      	ldrb	r2, [r1, r2]
 8004362:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004364:	4aaa      	ldr	r2, [pc, #680]	; (8004610 <HAL_RCC_OscConfig+0x328>)
 8004366:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004368:	f002 fbf6 	bl	8006b58 <HAL_InitTick>
        if(status != HAL_OK)
 800436c:	2800      	cmp	r0, #0
 800436e:	d1c1      	bne.n	80042f4 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	071b      	lsls	r3, r3, #28
 8004374:	d500      	bpl.n	8004378 <HAL_RCC_OscConfig+0x90>
 8004376:	e0ee      	b.n	8004556 <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	075b      	lsls	r3, r3, #29
 800437c:	d500      	bpl.n	8004380 <HAL_RCC_OscConfig+0x98>
 800437e:	e110      	b.n	80045a2 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	069b      	lsls	r3, r3, #26
 8004384:	d500      	bpl.n	8004388 <HAL_RCC_OscConfig+0xa0>
 8004386:	e195      	b.n	80046b4 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004388:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d000      	beq.n	8004390 <HAL_RCC_OscConfig+0xa8>
 800438e:	e1c4      	b.n	800471a <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8004390:	2000      	movs	r0, #0
 8004392:	e7af      	b.n	80042f4 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004394:	2e08      	cmp	r6, #8
 8004396:	d004      	beq.n	80043a2 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004398:	2e0c      	cmp	r6, #12
 800439a:	d109      	bne.n	80043b0 <HAL_RCC_OscConfig+0xc8>
 800439c:	9a01      	ldr	r2, [sp, #4]
 800439e:	2a00      	cmp	r2, #0
 80043a0:	d006      	beq.n	80043b0 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	039b      	lsls	r3, r3, #14
 80043a6:	d5b3      	bpl.n	8004310 <HAL_RCC_OscConfig+0x28>
 80043a8:	686b      	ldr	r3, [r5, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1b0      	bne.n	8004310 <HAL_RCC_OscConfig+0x28>
 80043ae:	e7a0      	b.n	80042f2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b0:	686a      	ldr	r2, [r5, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d111      	bne.n	80043da <HAL_RCC_OscConfig+0xf2>
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043bc:	f7ff fb62 	bl	8003a84 <HAL_GetTick>
 80043c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	0292      	lsls	r2, r2, #10
 80043c8:	4213      	tst	r3, r2
 80043ca:	d1a1      	bne.n	8004310 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043cc:	f7ff fb5a 	bl	8003a84 <HAL_GetTick>
 80043d0:	1bc0      	subs	r0, r0, r7
 80043d2:	2864      	cmp	r0, #100	; 0x64
 80043d4:	d9f5      	bls.n	80043c2 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 80043d6:	2003      	movs	r0, #3
 80043d8:	e78c      	b.n	80042f4 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043da:	21a0      	movs	r1, #160	; 0xa0
 80043dc:	02c9      	lsls	r1, r1, #11
 80043de:	428a      	cmp	r2, r1
 80043e0:	d105      	bne.n	80043ee <HAL_RCC_OscConfig+0x106>
 80043e2:	2280      	movs	r2, #128	; 0x80
 80043e4:	6821      	ldr	r1, [r4, #0]
 80043e6:	02d2      	lsls	r2, r2, #11
 80043e8:	430a      	orrs	r2, r1
 80043ea:	6022      	str	r2, [r4, #0]
 80043ec:	e7e3      	b.n	80043b6 <HAL_RCC_OscConfig+0xce>
 80043ee:	6821      	ldr	r1, [r4, #0]
 80043f0:	4888      	ldr	r0, [pc, #544]	; (8004614 <HAL_RCC_OscConfig+0x32c>)
 80043f2:	4001      	ands	r1, r0
 80043f4:	6021      	str	r1, [r4, #0]
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	400b      	ands	r3, r1
 80043fa:	9305      	str	r3, [sp, #20]
 80043fc:	9b05      	ldr	r3, [sp, #20]
 80043fe:	4986      	ldr	r1, [pc, #536]	; (8004618 <HAL_RCC_OscConfig+0x330>)
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	400b      	ands	r3, r1
 8004404:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004406:	2a00      	cmp	r2, #0
 8004408:	d1d8      	bne.n	80043bc <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 800440a:	f7ff fb3b 	bl	8003a84 <HAL_GetTick>
 800440e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	0292      	lsls	r2, r2, #10
 8004416:	4213      	tst	r3, r2
 8004418:	d100      	bne.n	800441c <HAL_RCC_OscConfig+0x134>
 800441a:	e779      	b.n	8004310 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7ff fb32 	bl	8003a84 <HAL_GetTick>
 8004420:	1bc0      	subs	r0, r0, r7
 8004422:	2864      	cmp	r0, #100	; 0x64
 8004424:	d9f4      	bls.n	8004410 <HAL_RCC_OscConfig+0x128>
 8004426:	e7d6      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004428:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800442a:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800442c:	4213      	tst	r3, r2
 800442e:	d003      	beq.n	8004438 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004430:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004432:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004434:	4311      	orrs	r1, r2
 8004436:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004438:	2e04      	cmp	r6, #4
 800443a:	d004      	beq.n	8004446 <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800443c:	2e0c      	cmp	r6, #12
 800443e:	d125      	bne.n	800448c <HAL_RCC_OscConfig+0x1a4>
 8004440:	9a01      	ldr	r2, [sp, #4]
 8004442:	2a00      	cmp	r2, #0
 8004444:	d122      	bne.n	800448c <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	0752      	lsls	r2, r2, #29
 800444a:	d502      	bpl.n	8004452 <HAL_RCC_OscConfig+0x16a>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d100      	bne.n	8004452 <HAL_RCC_OscConfig+0x16a>
 8004450:	e74f      	b.n	80042f2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	6861      	ldr	r1, [r4, #4]
 8004454:	692a      	ldr	r2, [r5, #16]
 8004456:	4871      	ldr	r0, [pc, #452]	; (800461c <HAL_RCC_OscConfig+0x334>)
 8004458:	0212      	lsls	r2, r2, #8
 800445a:	4001      	ands	r1, r0
 800445c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800445e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004462:	6822      	ldr	r2, [r4, #0]
 8004464:	438a      	bics	r2, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800446a:	f7ff fefd 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 800446e:	68e3      	ldr	r3, [r4, #12]
 8004470:	4a66      	ldr	r2, [pc, #408]	; (800460c <HAL_RCC_OscConfig+0x324>)
 8004472:	061b      	lsls	r3, r3, #24
 8004474:	0f1b      	lsrs	r3, r3, #28
 8004476:	5cd3      	ldrb	r3, [r2, r3]
 8004478:	40d8      	lsrs	r0, r3
 800447a:	4b65      	ldr	r3, [pc, #404]	; (8004610 <HAL_RCC_OscConfig+0x328>)
 800447c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800447e:	2003      	movs	r0, #3
 8004480:	f002 fb6a 	bl	8006b58 <HAL_InitTick>
      if(status != HAL_OK)
 8004484:	2800      	cmp	r0, #0
 8004486:	d100      	bne.n	800448a <HAL_RCC_OscConfig+0x1a2>
 8004488:	e746      	b.n	8004318 <HAL_RCC_OscConfig+0x30>
 800448a:	e733      	b.n	80042f4 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 800448c:	2b00      	cmp	r3, #0
 800448e:	d019      	beq.n	80044c4 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004490:	2109      	movs	r1, #9
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	438a      	bics	r2, r1
 8004496:	4313      	orrs	r3, r2
 8004498:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800449a:	f7ff faf3 	bl	8003a84 <HAL_GetTick>
 800449e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a0:	2204      	movs	r2, #4
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	4213      	tst	r3, r2
 80044a6:	d007      	beq.n	80044b8 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a8:	6862      	ldr	r2, [r4, #4]
 80044aa:	692b      	ldr	r3, [r5, #16]
 80044ac:	495b      	ldr	r1, [pc, #364]	; (800461c <HAL_RCC_OscConfig+0x334>)
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	400a      	ands	r2, r1
 80044b2:	4313      	orrs	r3, r2
 80044b4:	6063      	str	r3, [r4, #4]
 80044b6:	e72f      	b.n	8004318 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b8:	f7ff fae4 	bl	8003a84 <HAL_GetTick>
 80044bc:	1bc0      	subs	r0, r0, r7
 80044be:	2802      	cmp	r0, #2
 80044c0:	d9ee      	bls.n	80044a0 <HAL_RCC_OscConfig+0x1b8>
 80044c2:	e788      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80044c4:	2201      	movs	r2, #1
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	4393      	bics	r3, r2
 80044ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80044cc:	f7ff fada 	bl	8003a84 <HAL_GetTick>
 80044d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044d2:	2204      	movs	r2, #4
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	4213      	tst	r3, r2
 80044d8:	d100      	bne.n	80044dc <HAL_RCC_OscConfig+0x1f4>
 80044da:	e71d      	b.n	8004318 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044dc:	f7ff fad2 	bl	8003a84 <HAL_GetTick>
 80044e0:	1bc0      	subs	r0, r0, r7
 80044e2:	2802      	cmp	r0, #2
 80044e4:	d9f5      	bls.n	80044d2 <HAL_RCC_OscConfig+0x1ea>
 80044e6:	e776      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044e8:	69eb      	ldr	r3, [r5, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d020      	beq.n	8004530 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	6822      	ldr	r2, [r4, #0]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4313      	orrs	r3, r2
 80044f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80044f8:	f7ff fac4 	bl	8003a84 <HAL_GetTick>
 80044fc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044fe:	2280      	movs	r2, #128	; 0x80
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	4213      	tst	r3, r2
 8004506:	d00d      	beq.n	8004524 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <HAL_RCC_OscConfig+0x320>)
 800450c:	4013      	ands	r3, r2
 800450e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004510:	4313      	orrs	r3, r2
 8004512:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004514:	6862      	ldr	r2, [r4, #4]
 8004516:	6a2b      	ldr	r3, [r5, #32]
 8004518:	0212      	lsls	r2, r2, #8
 800451a:	061b      	lsls	r3, r3, #24
 800451c:	0a12      	lsrs	r2, r2, #8
 800451e:	4313      	orrs	r3, r2
 8004520:	6063      	str	r3, [r4, #4]
 8004522:	e725      	b.n	8004370 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004524:	f7ff faae 	bl	8003a84 <HAL_GetTick>
 8004528:	1bc0      	subs	r0, r0, r7
 800452a:	2802      	cmp	r0, #2
 800452c:	d9e7      	bls.n	80044fe <HAL_RCC_OscConfig+0x216>
 800452e:	e752      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	4a3b      	ldr	r2, [pc, #236]	; (8004620 <HAL_RCC_OscConfig+0x338>)
 8004534:	4013      	ands	r3, r2
 8004536:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004538:	f7ff faa4 	bl	8003a84 <HAL_GetTick>
 800453c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	0092      	lsls	r2, r2, #2
 8004544:	4213      	tst	r3, r2
 8004546:	d100      	bne.n	800454a <HAL_RCC_OscConfig+0x262>
 8004548:	e712      	b.n	8004370 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800454a:	f7ff fa9b 	bl	8003a84 <HAL_GetTick>
 800454e:	1bc0      	subs	r0, r0, r7
 8004550:	2802      	cmp	r0, #2
 8004552:	d9f4      	bls.n	800453e <HAL_RCC_OscConfig+0x256>
 8004554:	e73f      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004556:	696a      	ldr	r2, [r5, #20]
 8004558:	2301      	movs	r3, #1
 800455a:	2a00      	cmp	r2, #0
 800455c:	d010      	beq.n	8004580 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 800455e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004560:	4313      	orrs	r3, r2
 8004562:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004564:	f7ff fa8e 	bl	8003a84 <HAL_GetTick>
 8004568:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800456a:	2202      	movs	r2, #2
 800456c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800456e:	4213      	tst	r3, r2
 8004570:	d000      	beq.n	8004574 <HAL_RCC_OscConfig+0x28c>
 8004572:	e701      	b.n	8004378 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004574:	f7ff fa86 	bl	8003a84 <HAL_GetTick>
 8004578:	1bc0      	subs	r0, r0, r7
 800457a:	2802      	cmp	r0, #2
 800457c:	d9f5      	bls.n	800456a <HAL_RCC_OscConfig+0x282>
 800457e:	e72a      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8004580:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004582:	439a      	bics	r2, r3
 8004584:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004586:	f7ff fa7d 	bl	8003a84 <HAL_GetTick>
 800458a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800458c:	2202      	movs	r2, #2
 800458e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004590:	4213      	tst	r3, r2
 8004592:	d100      	bne.n	8004596 <HAL_RCC_OscConfig+0x2ae>
 8004594:	e6f0      	b.n	8004378 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004596:	f7ff fa75 	bl	8003a84 <HAL_GetTick>
 800459a:	1bc0      	subs	r0, r0, r7
 800459c:	2802      	cmp	r0, #2
 800459e:	d9f5      	bls.n	800458c <HAL_RCC_OscConfig+0x2a4>
 80045a0:	e719      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80045a4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045a8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80045aa:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ac:	421a      	tst	r2, r3
 80045ae:	d104      	bne.n	80045ba <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045b2:	4313      	orrs	r3, r2
 80045b4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	2280      	movs	r2, #128	; 0x80
 80045bc:	4f19      	ldr	r7, [pc, #100]	; (8004624 <HAL_RCC_OscConfig+0x33c>)
 80045be:	0052      	lsls	r2, r2, #1
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	4213      	tst	r3, r2
 80045c4:	d008      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c6:	2280      	movs	r2, #128	; 0x80
 80045c8:	68ab      	ldr	r3, [r5, #8]
 80045ca:	0052      	lsls	r2, r2, #1
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d12b      	bne.n	8004628 <HAL_RCC_OscConfig+0x340>
 80045d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80045d2:	4313      	orrs	r3, r2
 80045d4:	6523      	str	r3, [r4, #80]	; 0x50
 80045d6:	e04c      	b.n	8004672 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d8:	2280      	movs	r2, #128	; 0x80
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	0052      	lsls	r2, r2, #1
 80045de:	4313      	orrs	r3, r2
 80045e0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80045e2:	f7ff fa4f 	bl	8003a84 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80045ea:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	9303      	str	r3, [sp, #12]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	9a03      	ldr	r2, [sp, #12]
 80045f2:	4213      	tst	r3, r2
 80045f4:	d1e7      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f6:	f7ff fa45 	bl	8003a84 <HAL_GetTick>
 80045fa:	9b02      	ldr	r3, [sp, #8]
 80045fc:	1ac0      	subs	r0, r0, r3
 80045fe:	2864      	cmp	r0, #100	; 0x64
 8004600:	d9f5      	bls.n	80045ee <HAL_RCC_OscConfig+0x306>
 8004602:	e6e8      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
 8004604:	40021000 	.word	0x40021000
 8004608:	ffff1fff 	.word	0xffff1fff
 800460c:	08007ddd 	.word	0x08007ddd
 8004610:	20000030 	.word	0x20000030
 8004614:	fffeffff 	.word	0xfffeffff
 8004618:	fffbffff 	.word	0xfffbffff
 800461c:	ffffe0ff 	.word	0xffffe0ff
 8004620:	fffffeff 	.word	0xfffffeff
 8004624:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004628:	2b00      	cmp	r3, #0
 800462a:	d116      	bne.n	800465a <HAL_RCC_OscConfig+0x372>
 800462c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800462e:	4a6c      	ldr	r2, [pc, #432]	; (80047e0 <HAL_RCC_OscConfig+0x4f8>)
 8004630:	4013      	ands	r3, r2
 8004632:	6523      	str	r3, [r4, #80]	; 0x50
 8004634:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004636:	4a6b      	ldr	r2, [pc, #428]	; (80047e4 <HAL_RCC_OscConfig+0x4fc>)
 8004638:	4013      	ands	r3, r2
 800463a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800463c:	f7ff fa22 	bl	8003a84 <HAL_GetTick>
 8004640:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004646:	0092      	lsls	r2, r2, #2
 8004648:	4213      	tst	r3, r2
 800464a:	d02a      	beq.n	80046a2 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7ff fa1a 	bl	8003a84 <HAL_GetTick>
 8004650:	4b65      	ldr	r3, [pc, #404]	; (80047e8 <HAL_RCC_OscConfig+0x500>)
 8004652:	1bc0      	subs	r0, r0, r7
 8004654:	4298      	cmp	r0, r3
 8004656:	d9f4      	bls.n	8004642 <HAL_RCC_OscConfig+0x35a>
 8004658:	e6bd      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465a:	21a0      	movs	r1, #160	; 0xa0
 800465c:	00c9      	lsls	r1, r1, #3
 800465e:	428b      	cmp	r3, r1
 8004660:	d10b      	bne.n	800467a <HAL_RCC_OscConfig+0x392>
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	430b      	orrs	r3, r1
 800466a:	6523      	str	r3, [r4, #80]	; 0x50
 800466c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800466e:	431a      	orrs	r2, r3
 8004670:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004672:	f7ff fa07 	bl	8003a84 <HAL_GetTick>
 8004676:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004678:	e00e      	b.n	8004698 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800467c:	4a58      	ldr	r2, [pc, #352]	; (80047e0 <HAL_RCC_OscConfig+0x4f8>)
 800467e:	4013      	ands	r3, r2
 8004680:	6523      	str	r3, [r4, #80]	; 0x50
 8004682:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004684:	4a57      	ldr	r2, [pc, #348]	; (80047e4 <HAL_RCC_OscConfig+0x4fc>)
 8004686:	4013      	ands	r3, r2
 8004688:	e7a4      	b.n	80045d4 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f7ff f9fb 	bl	8003a84 <HAL_GetTick>
 800468e:	4b56      	ldr	r3, [pc, #344]	; (80047e8 <HAL_RCC_OscConfig+0x500>)
 8004690:	1bc0      	subs	r0, r0, r7
 8004692:	4298      	cmp	r0, r3
 8004694:	d900      	bls.n	8004698 <HAL_RCC_OscConfig+0x3b0>
 8004696:	e69e      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004698:	2280      	movs	r2, #128	; 0x80
 800469a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800469c:	0092      	lsls	r2, r2, #2
 800469e:	4213      	tst	r3, r2
 80046a0:	d0f3      	beq.n	800468a <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 80046a2:	9b01      	ldr	r3, [sp, #4]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d000      	beq.n	80046aa <HAL_RCC_OscConfig+0x3c2>
 80046a8:	e66a      	b.n	8004380 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046ac:	4a4f      	ldr	r2, [pc, #316]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80046b2:	e665      	b.n	8004380 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046b4:	69a9      	ldr	r1, [r5, #24]
 80046b6:	2301      	movs	r3, #1
 80046b8:	4a4d      	ldr	r2, [pc, #308]	; (80047f0 <HAL_RCC_OscConfig+0x508>)
 80046ba:	2900      	cmp	r1, #0
 80046bc:	d018      	beq.n	80046f0 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 80046be:	68a1      	ldr	r1, [r4, #8]
 80046c0:	4319      	orrs	r1, r3
 80046c2:	60a1      	str	r1, [r4, #8]
 80046c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6363      	str	r3, [r4, #52]	; 0x34
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	6a11      	ldr	r1, [r2, #32]
 80046ce:	019b      	lsls	r3, r3, #6
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80046d4:	f7ff f9d6 	bl	8003a84 <HAL_GetTick>
 80046d8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046da:	2202      	movs	r2, #2
 80046dc:	68a3      	ldr	r3, [r4, #8]
 80046de:	4213      	tst	r3, r2
 80046e0:	d000      	beq.n	80046e4 <HAL_RCC_OscConfig+0x3fc>
 80046e2:	e651      	b.n	8004388 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e4:	f7ff f9ce 	bl	8003a84 <HAL_GetTick>
 80046e8:	1bc0      	subs	r0, r0, r7
 80046ea:	2802      	cmp	r0, #2
 80046ec:	d9f5      	bls.n	80046da <HAL_RCC_OscConfig+0x3f2>
 80046ee:	e672      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 80046f0:	68a1      	ldr	r1, [r4, #8]
 80046f2:	4399      	bics	r1, r3
 80046f4:	60a1      	str	r1, [r4, #8]
 80046f6:	6a13      	ldr	r3, [r2, #32]
 80046f8:	493e      	ldr	r1, [pc, #248]	; (80047f4 <HAL_RCC_OscConfig+0x50c>)
 80046fa:	400b      	ands	r3, r1
 80046fc:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80046fe:	f7ff f9c1 	bl	8003a84 <HAL_GetTick>
 8004702:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004704:	2202      	movs	r2, #2
 8004706:	68a3      	ldr	r3, [r4, #8]
 8004708:	4213      	tst	r3, r2
 800470a:	d100      	bne.n	800470e <HAL_RCC_OscConfig+0x426>
 800470c:	e63c      	b.n	8004388 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800470e:	f7ff f9b9 	bl	8003a84 <HAL_GetTick>
 8004712:	1bc0      	subs	r0, r0, r7
 8004714:	2802      	cmp	r0, #2
 8004716:	d9f5      	bls.n	8004704 <HAL_RCC_OscConfig+0x41c>
 8004718:	e65d      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800471a:	2e0c      	cmp	r6, #12
 800471c:	d043      	beq.n	80047a6 <HAL_RCC_OscConfig+0x4be>
 800471e:	4a36      	ldr	r2, [pc, #216]	; (80047f8 <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004720:	2b02      	cmp	r3, #2
 8004722:	d12e      	bne.n	8004782 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8004724:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004726:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004728:	4013      	ands	r3, r2
 800472a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800472c:	f7ff f9aa 	bl	8003a84 <HAL_GetTick>
 8004730:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004732:	04b6      	lsls	r6, r6, #18
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	4233      	tst	r3, r6
 8004738:	d11d      	bne.n	8004776 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800473a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800473c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800473e:	68e2      	ldr	r2, [r4, #12]
 8004740:	430b      	orrs	r3, r1
 8004742:	492e      	ldr	r1, [pc, #184]	; (80047fc <HAL_RCC_OscConfig+0x514>)
 8004744:	400a      	ands	r2, r1
 8004746:	4313      	orrs	r3, r2
 8004748:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800474a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474c:	4313      	orrs	r3, r2
 800474e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	045b      	lsls	r3, r3, #17
 8004756:	4313      	orrs	r3, r2
 8004758:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800475a:	f7ff f993 	bl	8003a84 <HAL_GetTick>
 800475e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004760:	04ad      	lsls	r5, r5, #18
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	422b      	tst	r3, r5
 8004766:	d000      	beq.n	800476a <HAL_RCC_OscConfig+0x482>
 8004768:	e612      	b.n	8004390 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476a:	f7ff f98b 	bl	8003a84 <HAL_GetTick>
 800476e:	1b80      	subs	r0, r0, r6
 8004770:	2802      	cmp	r0, #2
 8004772:	d9f6      	bls.n	8004762 <HAL_RCC_OscConfig+0x47a>
 8004774:	e62f      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004776:	f7ff f985 	bl	8003a84 <HAL_GetTick>
 800477a:	1bc0      	subs	r0, r0, r7
 800477c:	2802      	cmp	r0, #2
 800477e:	d9d9      	bls.n	8004734 <HAL_RCC_OscConfig+0x44c>
 8004780:	e629      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8004782:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004784:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004786:	4013      	ands	r3, r2
 8004788:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800478a:	f7ff f97b 	bl	8003a84 <HAL_GetTick>
 800478e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004790:	04ad      	lsls	r5, r5, #18
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	422b      	tst	r3, r5
 8004796:	d100      	bne.n	800479a <HAL_RCC_OscConfig+0x4b2>
 8004798:	e5fa      	b.n	8004390 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479a:	f7ff f973 	bl	8003a84 <HAL_GetTick>
 800479e:	1b80      	subs	r0, r0, r6
 80047a0:	2802      	cmp	r0, #2
 80047a2:	d9f6      	bls.n	8004792 <HAL_RCC_OscConfig+0x4aa>
 80047a4:	e617      	b.n	80043d6 <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 80047a6:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d100      	bne.n	80047ae <HAL_RCC_OscConfig+0x4c6>
 80047ac:	e5a2      	b.n	80042f4 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80047b0:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80047b4:	0252      	lsls	r2, r2, #9
 80047b6:	401a      	ands	r2, r3
        return HAL_ERROR;
 80047b8:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ba:	428a      	cmp	r2, r1
 80047bc:	d000      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4d8>
 80047be:	e599      	b.n	80042f4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80047c0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80047c4:	0392      	lsls	r2, r2, #14
 80047c6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c8:	428a      	cmp	r2, r1
 80047ca:	d000      	beq.n	80047ce <HAL_RCC_OscConfig+0x4e6>
 80047cc:	e592      	b.n	80042f4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80047ce:	20c0      	movs	r0, #192	; 0xc0
 80047d0:	0400      	lsls	r0, r0, #16
 80047d2:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80047d4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80047d6:	1a18      	subs	r0, r3, r0
 80047d8:	1e43      	subs	r3, r0, #1
 80047da:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80047dc:	b2c0      	uxtb	r0, r0
 80047de:	e589      	b.n	80042f4 <HAL_RCC_OscConfig+0xc>
 80047e0:	fffffeff 	.word	0xfffffeff
 80047e4:	fffffbff 	.word	0xfffffbff
 80047e8:	00001388 	.word	0x00001388
 80047ec:	efffffff 	.word	0xefffffff
 80047f0:	40010000 	.word	0x40010000
 80047f4:	ffffdfff 	.word	0xffffdfff
 80047f8:	feffffff 	.word	0xfeffffff
 80047fc:	ff02ffff 	.word	0xff02ffff

08004800 <HAL_RCC_ClockConfig>:
{
 8004800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004802:	1e06      	subs	r6, r0, #0
 8004804:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004808:	2001      	movs	r0, #1
}
 800480a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	2201      	movs	r2, #1
 800480e:	4c51      	ldr	r4, [pc, #324]	; (8004954 <HAL_RCC_ClockConfig+0x154>)
 8004810:	9901      	ldr	r1, [sp, #4]
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	4013      	ands	r3, r2
 8004816:	428b      	cmp	r3, r1
 8004818:	d327      	bcc.n	800486a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481a:	6832      	ldr	r2, [r6, #0]
 800481c:	0793      	lsls	r3, r2, #30
 800481e:	d42f      	bmi.n	8004880 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004820:	07d3      	lsls	r3, r2, #31
 8004822:	d435      	bmi.n	8004890 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004824:	2301      	movs	r3, #1
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	9901      	ldr	r1, [sp, #4]
 800482a:	401a      	ands	r2, r3
 800482c:	428a      	cmp	r2, r1
 800482e:	d900      	bls.n	8004832 <HAL_RCC_ClockConfig+0x32>
 8004830:	e081      	b.n	8004936 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004832:	6832      	ldr	r2, [r6, #0]
 8004834:	4c48      	ldr	r4, [pc, #288]	; (8004958 <HAL_RCC_ClockConfig+0x158>)
 8004836:	0753      	lsls	r3, r2, #29
 8004838:	d500      	bpl.n	800483c <HAL_RCC_ClockConfig+0x3c>
 800483a:	e084      	b.n	8004946 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483c:	0713      	lsls	r3, r2, #28
 800483e:	d506      	bpl.n	800484e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004840:	68e2      	ldr	r2, [r4, #12]
 8004842:	6933      	ldr	r3, [r6, #16]
 8004844:	4945      	ldr	r1, [pc, #276]	; (800495c <HAL_RCC_ClockConfig+0x15c>)
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	400a      	ands	r2, r1
 800484a:	4313      	orrs	r3, r2
 800484c:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800484e:	f7ff fd0b 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004852:	68e3      	ldr	r3, [r4, #12]
 8004854:	4a42      	ldr	r2, [pc, #264]	; (8004960 <HAL_RCC_ClockConfig+0x160>)
 8004856:	061b      	lsls	r3, r3, #24
 8004858:	0f1b      	lsrs	r3, r3, #28
 800485a:	5cd3      	ldrb	r3, [r2, r3]
 800485c:	40d8      	lsrs	r0, r3
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_ClockConfig+0x164>)
 8004860:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004862:	2003      	movs	r0, #3
 8004864:	f002 f978 	bl	8006b58 <HAL_InitTick>
 8004868:	e7cf      	b.n	800480a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	9901      	ldr	r1, [sp, #4]
 800486e:	4393      	bics	r3, r2
 8004870:	430b      	orrs	r3, r1
 8004872:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	4013      	ands	r3, r2
 8004878:	9a01      	ldr	r2, [sp, #4]
 800487a:	4293      	cmp	r3, r2
 800487c:	d1c4      	bne.n	8004808 <HAL_RCC_ClockConfig+0x8>
 800487e:	e7cc      	b.n	800481a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	20f0      	movs	r0, #240	; 0xf0
 8004882:	4935      	ldr	r1, [pc, #212]	; (8004958 <HAL_RCC_ClockConfig+0x158>)
 8004884:	68cb      	ldr	r3, [r1, #12]
 8004886:	4383      	bics	r3, r0
 8004888:	68b0      	ldr	r0, [r6, #8]
 800488a:	4303      	orrs	r3, r0
 800488c:	60cb      	str	r3, [r1, #12]
 800488e:	e7c7      	b.n	8004820 <HAL_RCC_ClockConfig+0x20>
 8004890:	4d31      	ldr	r5, [pc, #196]	; (8004958 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004892:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004894:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004896:	2a02      	cmp	r2, #2
 8004898:	d119      	bne.n	80048ce <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800489a:	039b      	lsls	r3, r3, #14
 800489c:	d5b4      	bpl.n	8004808 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489e:	2103      	movs	r1, #3
 80048a0:	68eb      	ldr	r3, [r5, #12]
 80048a2:	438b      	bics	r3, r1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80048a8:	f7ff f8ec 	bl	8003a84 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ac:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80048ae:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d119      	bne.n	80048e8 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048b4:	220c      	movs	r2, #12
 80048b6:	68eb      	ldr	r3, [r5, #12]
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d0b2      	beq.n	8004824 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048be:	f7ff f8e1 	bl	8003a84 <HAL_GetTick>
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <HAL_RCC_ClockConfig+0x168>)
 80048c4:	1bc0      	subs	r0, r0, r7
 80048c6:	4298      	cmp	r0, r3
 80048c8:	d9f4      	bls.n	80048b4 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80048ca:	2003      	movs	r0, #3
 80048cc:	e79d      	b.n	800480a <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ce:	2a03      	cmp	r2, #3
 80048d0:	d102      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048d2:	019b      	lsls	r3, r3, #6
 80048d4:	d4e3      	bmi.n	800489e <HAL_RCC_ClockConfig+0x9e>
 80048d6:	e797      	b.n	8004808 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048d8:	2a01      	cmp	r2, #1
 80048da:	d102      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048dc:	075b      	lsls	r3, r3, #29
 80048de:	d4de      	bmi.n	800489e <HAL_RCC_ClockConfig+0x9e>
 80048e0:	e792      	b.n	8004808 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048e2:	059b      	lsls	r3, r3, #22
 80048e4:	d4db      	bmi.n	800489e <HAL_RCC_ClockConfig+0x9e>
 80048e6:	e78f      	b.n	8004808 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d10b      	bne.n	8004904 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ec:	220c      	movs	r2, #12
 80048ee:	68eb      	ldr	r3, [r5, #12]
 80048f0:	4013      	ands	r3, r2
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d096      	beq.n	8004824 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f6:	f7ff f8c5 	bl	8003a84 <HAL_GetTick>
 80048fa:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <HAL_RCC_ClockConfig+0x168>)
 80048fc:	1bc0      	subs	r0, r0, r7
 80048fe:	4298      	cmp	r0, r3
 8004900:	d9f4      	bls.n	80048ec <HAL_RCC_ClockConfig+0xec>
 8004902:	e7e2      	b.n	80048ca <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004904:	2b01      	cmp	r3, #1
 8004906:	d010      	beq.n	800492a <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004908:	220c      	movs	r2, #12
 800490a:	68eb      	ldr	r3, [r5, #12]
 800490c:	4213      	tst	r3, r2
 800490e:	d089      	beq.n	8004824 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004910:	f7ff f8b8 	bl	8003a84 <HAL_GetTick>
 8004914:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_RCC_ClockConfig+0x168>)
 8004916:	1bc0      	subs	r0, r0, r7
 8004918:	4298      	cmp	r0, r3
 800491a:	d9f5      	bls.n	8004908 <HAL_RCC_ClockConfig+0x108>
 800491c:	e7d5      	b.n	80048ca <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491e:	f7ff f8b1 	bl	8003a84 <HAL_GetTick>
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_RCC_ClockConfig+0x168>)
 8004924:	1bc0      	subs	r0, r0, r7
 8004926:	4298      	cmp	r0, r3
 8004928:	d8cf      	bhi.n	80048ca <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800492a:	220c      	movs	r2, #12
 800492c:	68eb      	ldr	r3, [r5, #12]
 800492e:	4013      	ands	r3, r2
 8004930:	2b04      	cmp	r3, #4
 8004932:	d1f4      	bne.n	800491e <HAL_RCC_ClockConfig+0x11e>
 8004934:	e776      	b.n	8004824 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	439a      	bics	r2, r3
 800493a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493c:	6822      	ldr	r2, [r4, #0]
 800493e:	421a      	tst	r2, r3
 8004940:	d100      	bne.n	8004944 <HAL_RCC_ClockConfig+0x144>
 8004942:	e776      	b.n	8004832 <HAL_RCC_ClockConfig+0x32>
 8004944:	e760      	b.n	8004808 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	4908      	ldr	r1, [pc, #32]	; (800496c <HAL_RCC_ClockConfig+0x16c>)
 800494a:	400b      	ands	r3, r1
 800494c:	68f1      	ldr	r1, [r6, #12]
 800494e:	430b      	orrs	r3, r1
 8004950:	60e3      	str	r3, [r4, #12]
 8004952:	e773      	b.n	800483c <HAL_RCC_ClockConfig+0x3c>
 8004954:	40022000 	.word	0x40022000
 8004958:	40021000 	.word	0x40021000
 800495c:	ffffc7ff 	.word	0xffffc7ff
 8004960:	08007ddd 	.word	0x08007ddd
 8004964:	20000030 	.word	0x20000030
 8004968:	00001388 	.word	0x00001388
 800496c:	fffff8ff 	.word	0xfffff8ff

08004970 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004972:	4a05      	ldr	r2, [pc, #20]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	055b      	lsls	r3, r3, #21
 8004978:	0f5b      	lsrs	r3, r3, #29
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	4a03      	ldr	r2, [pc, #12]	; (800498c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800497e:	6810      	ldr	r0, [r2, #0]
 8004980:	40d8      	lsrs	r0, r3
}
 8004982:	4770      	bx	lr
 8004984:	40021000 	.word	0x40021000
 8004988:	08007ded 	.word	0x08007ded
 800498c:	20000030 	.word	0x20000030

08004990 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004990:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004992:	4a05      	ldr	r2, [pc, #20]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	049b      	lsls	r3, r3, #18
 8004998:	0f5b      	lsrs	r3, r3, #29
 800499a:	5cd3      	ldrb	r3, [r2, r3]
 800499c:	4a03      	ldr	r2, [pc, #12]	; (80049ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800499e:	6810      	ldr	r0, [r2, #0]
 80049a0:	40d8      	lsrs	r0, r3
}
 80049a2:	4770      	bx	lr
 80049a4:	40021000 	.word	0x40021000
 80049a8:	08007ded 	.word	0x08007ded
 80049ac:	20000030 	.word	0x20000030

080049b0 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80049b0:	2382      	movs	r3, #130	; 0x82
{
 80049b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b4:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80049b6:	011b      	lsls	r3, r3, #4
{
 80049b8:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049ba:	421a      	tst	r2, r3
 80049bc:	d048      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049be:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80049c0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4c65      	ldr	r4, [pc, #404]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049c4:	055b      	lsls	r3, r3, #21
 80049c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80049c8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ca:	421a      	tst	r2, r3
 80049cc:	d104      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049d0:	4313      	orrs	r3, r2
 80049d2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80049d4:	2301      	movs	r3, #1
 80049d6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d8:	2780      	movs	r7, #128	; 0x80
 80049da:	4e60      	ldr	r6, [pc, #384]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049dc:	007f      	lsls	r7, r7, #1
 80049de:	6833      	ldr	r3, [r6, #0]
 80049e0:	423b      	tst	r3, r7
 80049e2:	d077      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049e4:	6869      	ldr	r1, [r5, #4]
 80049e6:	23c0      	movs	r3, #192	; 0xc0
 80049e8:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80049ea:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049ec:	039b      	lsls	r3, r3, #14
 80049ee:	4018      	ands	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80049f0:	401a      	ands	r2, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049f2:	4290      	cmp	r0, r2
 80049f4:	d103      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80049f6:	68aa      	ldr	r2, [r5, #8]
 80049f8:	4013      	ands	r3, r2
 80049fa:	4298      	cmp	r0, r3
 80049fc:	d009      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80049fe:	23c0      	movs	r3, #192	; 0xc0
 8004a00:	000a      	movs	r2, r1
 8004a02:	029b      	lsls	r3, r3, #10
 8004a04:	401a      	ands	r2, r3
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d103      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a0a:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004a0c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a0e:	039b      	lsls	r3, r3, #14
 8004a10:	d471      	bmi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x146>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004a12:	22c0      	movs	r2, #192	; 0xc0
 8004a14:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a16:	0292      	lsls	r2, r2, #10
 8004a18:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a1a:	d000      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004a1c:	e06c      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a1e:	6869      	ldr	r1, [r5, #4]
 8004a20:	23c0      	movs	r3, #192	; 0xc0
 8004a22:	000a      	movs	r2, r1
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	401a      	ands	r2, r3
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	484c      	ldr	r0, [pc, #304]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a30:	4003      	ands	r3, r0
 8004a32:	20c0      	movs	r0, #192	; 0xc0
 8004a34:	0380      	lsls	r0, r0, #14
 8004a36:	4001      	ands	r1, r0
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a3e:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a40:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a42:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d103      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a4a:	4a46      	ldr	r2, [pc, #280]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	07da      	lsls	r2, r3, #31
 8004a54:	d506      	bpl.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a56:	2003      	movs	r0, #3
 8004a58:	493f      	ldr	r1, [pc, #252]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a5a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a5c:	4382      	bics	r2, r0
 8004a5e:	68e8      	ldr	r0, [r5, #12]
 8004a60:	4302      	orrs	r2, r0
 8004a62:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a64:	079a      	lsls	r2, r3, #30
 8004a66:	d506      	bpl.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a68:	200c      	movs	r0, #12
 8004a6a:	493b      	ldr	r1, [pc, #236]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a6c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a6e:	4382      	bics	r2, r0
 8004a70:	6928      	ldr	r0, [r5, #16]
 8004a72:	4302      	orrs	r2, r0
 8004a74:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a76:	075a      	lsls	r2, r3, #29
 8004a78:	d506      	bpl.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a7a:	4937      	ldr	r1, [pc, #220]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a7c:	483a      	ldr	r0, [pc, #232]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a80:	4002      	ands	r2, r0
 8004a82:	6968      	ldr	r0, [r5, #20]
 8004a84:	4302      	orrs	r2, r0
 8004a86:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a88:	071a      	lsls	r2, r3, #28
 8004a8a:	d506      	bpl.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8c:	4932      	ldr	r1, [pc, #200]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a8e:	4837      	ldr	r0, [pc, #220]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a90:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a92:	4002      	ands	r2, r0
 8004a94:	69a8      	ldr	r0, [r5, #24]
 8004a96:	4302      	orrs	r2, r0
 8004a98:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a9a:	05da      	lsls	r2, r3, #23
 8004a9c:	d506      	bpl.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a9e:	492e      	ldr	r1, [pc, #184]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004aa0:	4833      	ldr	r0, [pc, #204]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aa2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004aa4:	4002      	ands	r2, r0
 8004aa6:	69e8      	ldr	r0, [r5, #28]
 8004aa8:	4302      	orrs	r2, r0
 8004aaa:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aac:	065a      	lsls	r2, r3, #25
 8004aae:	d506      	bpl.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ab0:	4929      	ldr	r1, [pc, #164]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ab2:	4830      	ldr	r0, [pc, #192]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ab4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004ab6:	4002      	ands	r2, r0
 8004ab8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004aba:	4302      	orrs	r2, r0
 8004abc:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004abe:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	d518      	bpl.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004ac4:	4a24      	ldr	r2, [pc, #144]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ac6:	492c      	ldr	r1, [pc, #176]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004ac8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004aca:	400b      	ands	r3, r1
 8004acc:	6a29      	ldr	r1, [r5, #32]
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ad2:	e010      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	433b      	orrs	r3, r7
 8004ad8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004ada:	f7fe ffd3 	bl	8003a84 <HAL_GetTick>
 8004ade:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae0:	6833      	ldr	r3, [r6, #0]
 8004ae2:	423b      	tst	r3, r7
 8004ae4:	d000      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8004ae6:	e77d      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae8:	f7fe ffcc 	bl	8003a84 <HAL_GetTick>
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	1ac0      	subs	r0, r0, r3
 8004af0:	2864      	cmp	r0, #100	; 0x64
 8004af2:	d9f5      	bls.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 8004af4:	2003      	movs	r0, #3
}
 8004af6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004af8:	4011      	ands	r1, r2
 8004afa:	428b      	cmp	r3, r1
 8004afc:	d002      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004afe:	6829      	ldr	r1, [r5, #0]
 8004b00:	0689      	lsls	r1, r1, #26
 8004b02:	d408      	bmi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004b04:	68a9      	ldr	r1, [r5, #8]
 8004b06:	400a      	ands	r2, r1
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d100      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b0c:	e787      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004b0e:	682b      	ldr	r3, [r5, #0]
 8004b10:	051b      	lsls	r3, r3, #20
 8004b12:	d400      	bmi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004b14:	e783      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b16:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004b18:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b1a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004b1c:	0312      	lsls	r2, r2, #12
 8004b1e:	4302      	orrs	r2, r0
 8004b20:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b22:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004b24:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b26:	4815      	ldr	r0, [pc, #84]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004b28:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b2a:	4002      	ands	r2, r0
 8004b2c:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004b2e:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004b30:	05cb      	lsls	r3, r1, #23
 8004b32:	d400      	bmi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004b34:	e773      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 8004b36:	f7fe ffa5 	bl	8003a84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b3a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004b3c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b3e:	00bf      	lsls	r7, r7, #2
 8004b40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004b42:	423b      	tst	r3, r7
 8004b44:	d000      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004b46:	e76a      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fe ff9c 	bl	8003a84 <HAL_GetTick>
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4e:	1b80      	subs	r0, r0, r6
 8004b50:	4298      	cmp	r0, r3
 8004b52:	d9f5      	bls.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004b54:	e7ce      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40007000 	.word	0x40007000
 8004b60:	ffcfffff 	.word	0xffcfffff
 8004b64:	efffffff 	.word	0xefffffff
 8004b68:	fffff3ff 	.word	0xfffff3ff
 8004b6c:	ffffcfff 	.word	0xffffcfff
 8004b70:	fffcffff 	.word	0xfffcffff
 8004b74:	fbffffff 	.word	0xfbffffff
 8004b78:	fff3ffff 	.word	0xfff3ffff
 8004b7c:	fff7ffff 	.word	0xfff7ffff
 8004b80:	00001388 	.word	0x00001388

08004b84 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b86:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b88:	1c45      	adds	r5, r0, #1
 8004b8a:	7feb      	ldrb	r3, [r5, #31]
{
 8004b8c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004b8e:	0038      	movs	r0, r7
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d024      	beq.n	8004bde <HAL_RTC_DeactivateAlarm+0x5a>
 8004b94:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b96:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 8004b98:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b9a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b9c:	19e6      	adds	r6, r4, r7
 8004b9e:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ba2:	3a77      	subs	r2, #119	; 0x77
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004ba6:	32ad      	adds	r2, #173	; 0xad
 8004ba8:	4291      	cmp	r1, r2
 8004baa:	d128      	bne.n	8004bfe <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	4921      	ldr	r1, [pc, #132]	; (8004c34 <HAL_RTC_DeactivateAlarm+0xb0>)
 8004bb0:	400a      	ands	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	4920      	ldr	r1, [pc, #128]	; (8004c38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004bb8:	400a      	ands	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004bbc:	f7fe ff62 	bl	8003a84 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004bc0:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 8004bc2:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	68df      	ldr	r7, [r3, #12]
 8004bca:	9b01      	ldr	r3, [sp, #4]
 8004bcc:	401f      	ands	r7, r3
 8004bce:	d007      	beq.n	8004be0 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd0:	22ff      	movs	r2, #255	; 0xff
 8004bd2:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bd4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8004bdc:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8004bde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004be0:	f7fe ff50 	bl	8003a84 <HAL_GetTick>
 8004be4:	9b00      	ldr	r3, [sp, #0]
 8004be6:	1ac0      	subs	r0, r0, r3
 8004be8:	23fa      	movs	r3, #250	; 0xfa
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4298      	cmp	r0, r3
 8004bee:	d9ea      	bls.n	8004bc6 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf0:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bf2:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bf8:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004bfa:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 8004bfc:	e7ef      	b.n	8004bde <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	490e      	ldr	r1, [pc, #56]	; (8004c3c <HAL_RTC_DeactivateAlarm+0xb8>)
 8004c02:	400a      	ands	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	490d      	ldr	r1, [pc, #52]	; (8004c40 <HAL_RTC_DeactivateAlarm+0xbc>)
 8004c0a:	400a      	ands	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004c0e:	f7fe ff39 	bl	8003a84 <HAL_GetTick>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004c12:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 8004c14:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	68df      	ldr	r7, [r3, #12]
 8004c1a:	9b01      	ldr	r3, [sp, #4]
 8004c1c:	401f      	ands	r7, r3
 8004c1e:	d1d7      	bne.n	8004bd0 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c20:	f7fe ff30 	bl	8003a84 <HAL_GetTick>
 8004c24:	9b00      	ldr	r3, [sp, #0]
 8004c26:	1ac0      	subs	r0, r0, r3
 8004c28:	23fa      	movs	r3, #250	; 0xfa
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4298      	cmp	r0, r3
 8004c2e:	d9f2      	bls.n	8004c16 <HAL_RTC_DeactivateAlarm+0x92>
 8004c30:	e7de      	b.n	8004bf0 <HAL_RTC_DeactivateAlarm+0x6c>
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	fffffeff 	.word	0xfffffeff
 8004c38:	ffffefff 	.word	0xffffefff
 8004c3c:	fffffdff 	.word	0xfffffdff
 8004c40:	ffffdfff 	.word	0xffffdfff

08004c44 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c44:	21a0      	movs	r1, #160	; 0xa0
 8004c46:	6802      	ldr	r2, [r0, #0]
{
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c4a:	68d3      	ldr	r3, [r2, #12]
{
 8004c4c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c4e:	438b      	bics	r3, r1
 8004c50:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004c52:	f7fe ff17 	bl	8003a84 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c56:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004c58:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c5a:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c5c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	422b      	tst	r3, r5
 8004c64:	d001      	beq.n	8004c6a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004c66:	2000      	movs	r0, #0
}
 8004c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c6a:	f7fe ff0b 	bl	8003a84 <HAL_GetTick>
 8004c6e:	1b80      	subs	r0, r0, r6
 8004c70:	42b8      	cmp	r0, r7
 8004c72:	d9f4      	bls.n	8004c5e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004c74:	2003      	movs	r0, #3
 8004c76:	e7f7      	b.n	8004c68 <HAL_RTC_WaitForSynchro+0x24>

08004c78 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004c7a:	2440      	movs	r4, #64	; 0x40
 8004c7c:	6803      	ldr	r3, [r0, #0]
{
 8004c7e:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	4222      	tst	r2, r4
 8004c84:	d001      	beq.n	8004c8a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004c86:	2000      	movs	r0, #0
}
 8004c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	4252      	negs	r2, r2
 8004c8e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004c90:	f7fe fef8 	bl	8003a84 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004c94:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004c96:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004c98:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	4223      	tst	r3, r4
 8004ca0:	d1f1      	bne.n	8004c86 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ca2:	f7fe feef 	bl	8003a84 <HAL_GetTick>
 8004ca6:	1b80      	subs	r0, r0, r6
 8004ca8:	42b8      	cmp	r0, r7
 8004caa:	d9f6      	bls.n	8004c9a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8004cac:	2003      	movs	r0, #3
 8004cae:	e7eb      	b.n	8004c88 <RTC_EnterInitMode+0x10>

08004cb0 <HAL_RTC_Init>:
{
 8004cb0:	b570      	push	{r4, r5, r6, lr}
 8004cb2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004cb4:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d01a      	beq.n	8004cf0 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004cba:	1c86      	adds	r6, r0, #2
 8004cbc:	7ff3      	ldrb	r3, [r6, #31]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8004cc4:	1942      	adds	r2, r0, r5
 8004cc6:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8004cc8:	f001 ff66 	bl	8006b98 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ccc:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cce:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cd0:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cd2:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cd4:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24
 8004cd8:	3a77      	subs	r2, #119	; 0x77
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cdc:	f7ff ffcc 	bl	8004c78 <RTC_EnterInitMode>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	1e05      	subs	r5, r0, #0
 8004ce4:	d006      	beq.n	8004cf4 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ce6:	22ff      	movs	r2, #255	; 0xff
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cea:	2304      	movs	r3, #4
 8004cec:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8004cee:	2501      	movs	r5, #1
}
 8004cf0:	0028      	movs	r0, r5
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	491b      	ldr	r1, [pc, #108]	; (8004d64 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cf8:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cfe:	6862      	ldr	r2, [r4, #4]
 8004d00:	6899      	ldr	r1, [r3, #8]
 8004d02:	4302      	orrs	r2, r0
 8004d04:	69a0      	ldr	r0, [r4, #24]
 8004d06:	4302      	orrs	r2, r0
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d0c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004d0e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d10:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d12:	68a2      	ldr	r2, [r4, #8]
 8004d14:	6919      	ldr	r1, [r3, #16]
 8004d16:	0412      	lsls	r2, r2, #16
 8004d18:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d1a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d1c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	438a      	bics	r2, r1
 8004d22:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004d24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d26:	397d      	subs	r1, #125	; 0x7d
 8004d28:	438a      	bics	r2, r1
 8004d2a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004d2c:	69e2      	ldr	r2, [r4, #28]
 8004d2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004d30:	4302      	orrs	r2, r0
 8004d32:	430a      	orrs	r2, r1
 8004d34:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	069b      	lsls	r3, r3, #26
 8004d3a:	d40c      	bmi.n	8004d56 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d3c:	0020      	movs	r0, r4
 8004d3e:	f7ff ff81 	bl	8004c44 <HAL_RTC_WaitForSynchro>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d007      	beq.n	8004d56 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d46:	22ff      	movs	r2, #255	; 0xff
 8004d48:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8004d4a:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d4e:	2304      	movs	r3, #4
 8004d50:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004d52:	77e5      	strb	r5, [r4, #31]
 8004d54:	e7cb      	b.n	8004cee <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d56:	22ff      	movs	r2, #255	; 0xff
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8004d60:	e7c6      	b.n	8004cf0 <HAL_RTC_Init+0x40>
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	ff8fffbf 	.word	0xff8fffbf

08004d68 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004d68:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8004d6a:	2809      	cmp	r0, #9
 8004d6c:	d803      	bhi.n	8004d76 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	4318      	orrs	r0, r3
 8004d72:	b2c0      	uxtb	r0, r0
}
 8004d74:	4770      	bx	lr
    Param -= 10U;
 8004d76:	380a      	subs	r0, #10
    bcdhigh++;
 8004d78:	3301      	adds	r3, #1
    Param -= 10U;
 8004d7a:	b2c0      	uxtb	r0, r0
 8004d7c:	e7f5      	b.n	8004d6a <RTC_ByteToBcd2+0x2>
	...

08004d80 <HAL_RTC_SetTime>:
{
 8004d80:	2302      	movs	r3, #2
 8004d82:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004d84:	1c47      	adds	r7, r0, #1
{
 8004d86:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004d88:	7ff9      	ldrb	r1, [r7, #31]
{
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004d8e:	001e      	movs	r6, r3
 8004d90:	2901      	cmp	r1, #1
 8004d92:	d037      	beq.n	8004e04 <HAL_RTC_SetTime+0x84>
 8004d94:	2101      	movs	r1, #1
 8004d96:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d98:	18c1      	adds	r1, r0, r3
 8004d9a:	77cb      	strb	r3, [r1, #31]
 8004d9c:	9101      	str	r1, [sp, #4]
 8004d9e:	2140      	movs	r1, #64	; 0x40
 8004da0:	6806      	ldr	r6, [r0, #0]
 8004da2:	7863      	ldrb	r3, [r4, #1]
 8004da4:	7820      	ldrb	r0, [r4, #0]
 8004da6:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004da8:	68b3      	ldr	r3, [r6, #8]
 8004daa:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8004dac:	2a00      	cmp	r2, #0
 8004dae:	d12c      	bne.n	8004e0a <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d100      	bne.n	8004db6 <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 8004db4:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004db6:	f7ff ffd7 	bl	8004d68 <RTC_ByteToBcd2>
 8004dba:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004dbc:	9802      	ldr	r0, [sp, #8]
 8004dbe:	f7ff ffd3 	bl	8004d68 <RTC_ByteToBcd2>
 8004dc2:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004dc4:	78a0      	ldrb	r0, [r4, #2]
 8004dc6:	f7ff ffcf 	bl	8004d68 <RTC_ByteToBcd2>
 8004dca:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004dcc:	78e0      	ldrb	r0, [r4, #3]
 8004dce:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004dd0:	4318      	orrs	r0, r3
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004dd8:	9b02      	ldr	r3, [sp, #8]
 8004dda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ddc:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dde:	23ca      	movs	r3, #202	; 0xca
 8004de0:	6273      	str	r3, [r6, #36]	; 0x24
 8004de2:	3b77      	subs	r3, #119	; 0x77
 8004de4:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004de6:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004de8:	0028      	movs	r0, r5
 8004dea:	f7ff ff45 	bl	8004c78 <RTC_EnterInitMode>
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	1e06      	subs	r6, r0, #0
 8004df2:	d016      	beq.n	8004e22 <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df4:	22ff      	movs	r2, #255	; 0xff
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004df8:	2304      	movs	r3, #4
 8004dfa:	9a01      	ldr	r2, [sp, #4]
 8004dfc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004e02:	2601      	movs	r6, #1
}
 8004e04:	0030      	movs	r0, r6
 8004e06:	b005      	add	sp, #20
 8004e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d100      	bne.n	8004e10 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 8004e0e:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e10:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e12:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e16:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 8004e18:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e1a:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004e1c:	78e3      	ldrb	r3, [r4, #3]
 8004e1e:	041b      	lsls	r3, r3, #16
 8004e20:	e7dc      	b.n	8004ddc <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e22:	4815      	ldr	r0, [pc, #84]	; (8004e78 <HAL_RTC_SetTime+0xf8>)
 8004e24:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e26:	4915      	ldr	r1, [pc, #84]	; (8004e7c <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e28:	4002      	ands	r2, r0
 8004e2a:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e2c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e2e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e30:	400a      	ands	r2, r1
 8004e32:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e34:	68e2      	ldr	r2, [r4, #12]
 8004e36:	6899      	ldr	r1, [r3, #8]
 8004e38:	4302      	orrs	r2, r0
 8004e3a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e3c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e3e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	438a      	bics	r2, r1
 8004e44:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	069b      	lsls	r3, r3, #26
 8004e4a:	d40c      	bmi.n	8004e66 <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e4c:	0028      	movs	r0, r5
 8004e4e:	f7ff fef9 	bl	8004c44 <HAL_RTC_WaitForSynchro>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e56:	22ff      	movs	r2, #255	; 0xff
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	9a01      	ldr	r2, [sp, #4]
 8004e60:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004e62:	77fe      	strb	r6, [r7, #31]
 8004e64:	e7cd      	b.n	8004e02 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e66:	22ff      	movs	r2, #255	; 0xff
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	9a01      	ldr	r2, [sp, #4]
 8004e70:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004e72:	2300      	movs	r3, #0
 8004e74:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004e76:	e7c5      	b.n	8004e04 <HAL_RTC_SetTime+0x84>
 8004e78:	007f7f7f 	.word	0x007f7f7f
 8004e7c:	fffbffff 	.word	0xfffbffff

08004e80 <HAL_RTC_SetDate>:
{
 8004e80:	2302      	movs	r3, #2
 8004e82:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004e84:	1c47      	adds	r7, r0, #1
{
 8004e86:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8004e88:	7ff9      	ldrb	r1, [r7, #31]
{
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004e8e:	001d      	movs	r5, r3
 8004e90:	2901      	cmp	r1, #1
 8004e92:	d036      	beq.n	8004f02 <HAL_RTC_SetDate+0x82>
 8004e94:	2101      	movs	r1, #1
 8004e96:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e98:	18c1      	adds	r1, r0, r3
 8004e9a:	9101      	str	r1, [sp, #4]
 8004e9c:	77cb      	strb	r3, [r1, #31]
 8004e9e:	7831      	ldrb	r1, [r6, #0]
 8004ea0:	78f0      	ldrb	r0, [r6, #3]
 8004ea2:	0349      	lsls	r1, r1, #13
 8004ea4:	7873      	ldrb	r3, [r6, #1]
 8004ea6:	78b5      	ldrb	r5, [r6, #2]
 8004ea8:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004eaa:	2a00      	cmp	r2, #0
 8004eac:	d14c      	bne.n	8004f48 <HAL_RTC_SetDate+0xc8>
 8004eae:	3210      	adds	r2, #16
 8004eb0:	4213      	tst	r3, r2
 8004eb2:	d002      	beq.n	8004eba <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004eb4:	4393      	bics	r3, r2
 8004eb6:	330a      	adds	r3, #10
 8004eb8:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004eba:	f7ff ff55 	bl	8004d68 <RTC_ByteToBcd2>
 8004ebe:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ec0:	7870      	ldrb	r0, [r6, #1]
 8004ec2:	f7ff ff51 	bl	8004d68 <RTC_ByteToBcd2>
 8004ec6:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004ec8:	0028      	movs	r0, r5
 8004eca:	f7ff ff4d 	bl	8004d68 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ece:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ed0:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ed2:	041d      	lsls	r5, r3, #16
 8004ed4:	9b02      	ldr	r3, [sp, #8]
 8004ed6:	4318      	orrs	r0, r3
 8004ed8:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eda:	22ca      	movs	r2, #202	; 0xca
 8004edc:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ede:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ee2:	3a77      	subs	r2, #119	; 0x77
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ee6:	f7ff fec7 	bl	8004c78 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004eea:	432e      	orrs	r6, r5
 8004eec:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004eee:	1e05      	subs	r5, r0, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ef2:	22ff      	movs	r2, #255	; 0xff
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	9a01      	ldr	r2, [sp, #4]
 8004efa:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004efc:	2300      	movs	r3, #0
 8004efe:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004f00:	2501      	movs	r5, #1
}
 8004f02:	0028      	movs	r0, r5
 8004f04:	b005      	add	sp, #20
 8004f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004f08:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f0a:	4812      	ldr	r0, [pc, #72]	; (8004f54 <HAL_RTC_SetDate+0xd4>)
 8004f0c:	4006      	ands	r6, r0
 8004f0e:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	438a      	bics	r2, r1
 8004f14:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	069b      	lsls	r3, r3, #26
 8004f1a:	d40c      	bmi.n	8004f36 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f1c:	0020      	movs	r0, r4
 8004f1e:	f7ff fe91 	bl	8004c44 <HAL_RTC_WaitForSynchro>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d007      	beq.n	8004f36 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f26:	22ff      	movs	r2, #255	; 0xff
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	9a01      	ldr	r2, [sp, #4]
 8004f30:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004f32:	77fd      	strb	r5, [r7, #31]
 8004f34:	e7e4      	b.n	8004f00 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f36:	22ff      	movs	r2, #255	; 0xff
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	9a01      	ldr	r2, [sp, #4]
 8004f40:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004f42:	2300      	movs	r3, #0
 8004f44:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004f46:	e7dc      	b.n	8004f02 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f48:	9a02      	ldr	r2, [sp, #8]
 8004f4a:	0400      	lsls	r0, r0, #16
 8004f4c:	4310      	orrs	r0, r2
 8004f4e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f50:	021e      	lsls	r6, r3, #8
 8004f52:	e7c2      	b.n	8004eda <HAL_RTC_SetDate+0x5a>
 8004f54:	00ffff3f 	.word	0x00ffff3f

08004f58 <HAL_RTC_SetAlarm_IT>:
{
 8004f58:	2302      	movs	r3, #2
 8004f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f5c:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004f5e:	1c41      	adds	r1, r0, #1
 8004f60:	7fce      	ldrb	r6, [r1, #31]
{
 8004f62:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004f64:	0018      	movs	r0, r3
 8004f66:	2e01      	cmp	r6, #1
 8004f68:	d100      	bne.n	8004f6c <HAL_RTC_SetAlarm_IT+0x14>
 8004f6a:	e08c      	b.n	8005086 <HAL_RTC_SetAlarm_IT+0x12e>
 8004f6c:	3801      	subs	r0, #1
 8004f6e:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f70:	18e1      	adds	r1, r4, r3
 8004f72:	77cb      	strb	r3, [r1, #31]
 8004f74:	2140      	movs	r1, #64	; 0x40
 8004f76:	786b      	ldrb	r3, [r5, #1]
 8004f78:	6826      	ldr	r6, [r4, #0]
 8004f7a:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f7c:	68b3      	ldr	r3, [r6, #8]
 8004f7e:	7828      	ldrb	r0, [r5, #0]
 8004f80:	78af      	ldrb	r7, [r5, #2]
 8004f82:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	d15d      	bne.n	8005044 <HAL_RTC_SetAlarm_IT+0xec>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d100      	bne.n	8004f8e <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f8c:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f8e:	f7ff feeb 	bl	8004d68 <RTC_ByteToBcd2>
 8004f92:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004f94:	9800      	ldr	r0, [sp, #0]
 8004f96:	f7ff fee7 	bl	8004d68 <RTC_ByteToBcd2>
 8004f9a:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004f9c:	0038      	movs	r0, r7
 8004f9e:	f7ff fee3 	bl	8004d68 <RTC_ByteToBcd2>
 8004fa2:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004fa4:	1c6b      	adds	r3, r5, #1
 8004fa6:	7fd8      	ldrb	r0, [r3, #31]
 8004fa8:	f7ff fede 	bl	8004d68 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fac:	696a      	ldr	r2, [r5, #20]
 8004fae:	69eb      	ldr	r3, [r5, #28]
 8004fb0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004fb2:	78ea      	ldrb	r2, [r5, #3]
 8004fb4:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	431f      	orrs	r7, r3
 8004fba:	9b01      	ldr	r3, [sp, #4]
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004fc0:	9b00      	ldr	r3, [sp, #0]
 8004fc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fc4:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004fc6:	69aa      	ldr	r2, [r5, #24]
 8004fc8:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004fca:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd0:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004fd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd4:	6273      	str	r3, [r6, #36]	; 0x24
 8004fd6:	3b77      	subs	r3, #119	; 0x77
 8004fd8:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004fda:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fdc:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d152      	bne.n	8005088 <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004fe2:	68b3      	ldr	r3, [r6, #8]
 8004fe4:	4a3b      	ldr	r2, [pc, #236]	; (80050d4 <HAL_RTC_SetAlarm_IT+0x17c>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004fea:	68f2      	ldr	r2, [r6, #12]
 8004fec:	4b3a      	ldr	r3, [pc, #232]	; (80050d8 <HAL_RTC_SetAlarm_IT+0x180>)
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004ff4:	f7fe fd46 	bl	8003a84 <HAL_GetTick>
 8004ff8:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	68dd      	ldr	r5, [r3, #12]
 8005000:	4015      	ands	r5, r2
 8005002:	d031      	beq.n	8005068 <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005004:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005006:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005008:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800500a:	2280      	movs	r2, #128	; 0x80
 800500c:	6899      	ldr	r1, [r3, #8]
 800500e:	0052      	lsls	r2, r2, #1
 8005010:	430a      	orrs	r2, r1
 8005012:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005014:	2280      	movs	r2, #128	; 0x80
 8005016:	6899      	ldr	r1, [r3, #8]
 8005018:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800501a:	430a      	orrs	r2, r1
 800501c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800501e:	2280      	movs	r2, #128	; 0x80
 8005020:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <HAL_RTC_SetAlarm_IT+0x184>)
 8005022:	0292      	lsls	r2, r2, #10
 8005024:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8005026:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005028:	4311      	orrs	r1, r2
 800502a:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800502c:	6899      	ldr	r1, [r3, #8]
 800502e:	430a      	orrs	r2, r1
 8005030:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005032:	22ff      	movs	r2, #255	; 0xff
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005038:	3afe      	subs	r2, #254	; 0xfe
 800503a:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 800503c:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 800503e:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8005040:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8005042:	e020      	b.n	8005086 <HAL_RTC_SetAlarm_IT+0x12e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005044:	2b00      	cmp	r3, #0
 8005046:	d100      	bne.n	800504a <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005048:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800504a:	69eb      	ldr	r3, [r5, #28]
 800504c:	696a      	ldr	r2, [r5, #20]
 800504e:	0400      	lsls	r0, r0, #16
 8005050:	4313      	orrs	r3, r2
 8005052:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005054:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005056:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005058:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800505a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800505c:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800505e:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005060:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005062:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005064:	7fd8      	ldrb	r0, [r3, #31]
 8005066:	e7ae      	b.n	8004fc6 <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005068:	f7fe fd0c 	bl	8003a84 <HAL_GetTick>
 800506c:	23fa      	movs	r3, #250	; 0xfa
 800506e:	1b80      	subs	r0, r0, r6
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4298      	cmp	r0, r3
 8005074:	d9c1      	bls.n	8004ffa <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005076:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005078:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800507e:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 8005080:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005082:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8005084:	77e5      	strb	r5, [r4, #31]
}
 8005086:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005088:	68b3      	ldr	r3, [r6, #8]
 800508a:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <HAL_RTC_SetAlarm_IT+0x188>)
 800508c:	4013      	ands	r3, r2
 800508e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005090:	68f2      	ldr	r2, [r6, #12]
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	4313      	orrs	r3, r2
 8005098:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800509a:	f7fe fcf3 	bl	8003a84 <HAL_GetTick>
 800509e:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80050a0:	2202      	movs	r2, #2
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	68dd      	ldr	r5, [r3, #12]
 80050a6:	4015      	ands	r5, r2
 80050a8:	d00b      	beq.n	80050c2 <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80050aa:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80050ac:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80050ae:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80050b0:	2280      	movs	r2, #128	; 0x80
 80050b2:	6899      	ldr	r1, [r3, #8]
 80050b4:	0092      	lsls	r2, r2, #2
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	6899      	ldr	r1, [r3, #8]
 80050be:	0192      	lsls	r2, r2, #6
 80050c0:	e7ab      	b.n	800501a <HAL_RTC_SetAlarm_IT+0xc2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050c2:	f7fe fcdf 	bl	8003a84 <HAL_GetTick>
 80050c6:	23fa      	movs	r3, #250	; 0xfa
 80050c8:	1b80      	subs	r0, r0, r6
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4298      	cmp	r0, r3
 80050ce:	d9e7      	bls.n	80050a0 <HAL_RTC_SetAlarm_IT+0x148>
 80050d0:	e7d1      	b.n	8005076 <HAL_RTC_SetAlarm_IT+0x11e>
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	fffffeff 	.word	0xfffffeff
 80050d8:	fffffe7f 	.word	0xfffffe7f
 80050dc:	40010400 	.word	0x40010400
 80050e0:	fffffdff 	.word	0xfffffdff
 80050e4:	fffffd7f 	.word	0xfffffd7f

080050e8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80050e8:	230a      	movs	r3, #10
 80050ea:	0902      	lsrs	r2, r0, #4
 80050ec:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80050ee:	220f      	movs	r2, #15
 80050f0:	4010      	ands	r0, r2
 80050f2:	1818      	adds	r0, r3, r0
 80050f4:	b2c0      	uxtb	r0, r0
}
 80050f6:	4770      	bx	lr

080050f8 <HAL_RTC_GetTime>:
{
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80050fc:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80050fe:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005100:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005102:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005104:	690b      	ldr	r3, [r1, #16]
 8005106:	045b      	lsls	r3, r3, #17
 8005108:	0c5b      	lsrs	r3, r3, #17
 800510a:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800510c:	680b      	ldr	r3, [r1, #0]
 800510e:	490e      	ldr	r1, [pc, #56]	; (8005148 <HAL_RTC_GetTime+0x50>)
 8005110:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005112:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005114:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005116:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005118:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800511a:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800511c:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800511e:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005120:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005122:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005124:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005126:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8005128:	2a00      	cmp	r2, #0
 800512a:	d10a      	bne.n	8005142 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800512c:	f7ff ffdc 	bl	80050e8 <RTC_Bcd2ToByte>
 8005130:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005132:	0030      	movs	r0, r6
 8005134:	f7ff ffd8 	bl	80050e8 <RTC_Bcd2ToByte>
 8005138:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800513a:	0028      	movs	r0, r5
 800513c:	f7ff ffd4 	bl	80050e8 <RTC_Bcd2ToByte>
 8005140:	70a0      	strb	r0, [r4, #2]
}
 8005142:	2000      	movs	r0, #0
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	007f7f7f 	.word	0x007f7f7f

0800514c <HAL_RTC_GetDate>:
{
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005150:	6803      	ldr	r3, [r0, #0]
 8005152:	490e      	ldr	r1, [pc, #56]	; (800518c <HAL_RTC_GetDate+0x40>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005158:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800515a:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800515c:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800515e:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005160:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005162:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005164:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005166:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005168:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800516a:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 800516c:	2a00      	cmp	r2, #0
 800516e:	d10a      	bne.n	8005186 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005170:	f7ff ffba 	bl	80050e8 <RTC_Bcd2ToByte>
 8005174:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005176:	0028      	movs	r0, r5
 8005178:	f7ff ffb6 	bl	80050e8 <RTC_Bcd2ToByte>
 800517c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800517e:	0030      	movs	r0, r6
 8005180:	f7ff ffb2 	bl	80050e8 <RTC_Bcd2ToByte>
 8005184:	70a0      	strb	r0, [r4, #2]
}
 8005186:	2000      	movs	r0, #0
 8005188:	bd70      	pop	{r4, r5, r6, pc}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	00ffff3f 	.word	0x00ffff3f

08005190 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005190:	2202      	movs	r2, #2
 8005192:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005194:	1c41      	adds	r1, r0, #1
 8005196:	7fcc      	ldrb	r4, [r1, #31]
{
 8005198:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 800519a:	0010      	movs	r0, r2
 800519c:	2c01      	cmp	r4, #1
 800519e:	d010      	beq.n	80051c2 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051a0:	1898      	adds	r0, r3, r2

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051a2:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051a4:	77c2      	strb	r2, [r0, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051a6:	32c8      	adds	r2, #200	; 0xc8
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
 80051aa:	3a77      	subs	r2, #119	; 0x77
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80051ae:	689c      	ldr	r4, [r3, #8]
 80051b0:	3a33      	subs	r2, #51	; 0x33
 80051b2:	4322      	orrs	r2, r4
 80051b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051b6:	22ff      	movs	r2, #255	; 0xff
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80051ba:	2301      	movs	r3, #1
 80051bc:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051be:	2000      	movs	r0, #0
 80051c0:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 80051c2:	bd10      	pop	{r4, pc}

080051c4 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	0004      	movs	r4, r0
 80051c8:	000d      	movs	r5, r1
 80051ca:	0016      	movs	r6, r2
 80051cc:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	6893      	ldr	r3, [r2, #8]
 80051d2:	402b      	ands	r3, r5
 80051d4:	429d      	cmp	r5, r3
 80051d6:	d001      	beq.n	80051dc <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80051d8:	2000      	movs	r0, #0
 80051da:	e031      	b.n	8005240 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80051dc:	1c73      	adds	r3, r6, #1
 80051de:	d0f7      	beq.n	80051d0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80051e0:	f7fe fc50 	bl	8003a84 <HAL_GetTick>
 80051e4:	1bc0      	subs	r0, r0, r7
 80051e6:	4286      	cmp	r6, r0
 80051e8:	d8f1      	bhi.n	80051ce <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051ea:	21e0      	movs	r1, #224	; 0xe0
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	438a      	bics	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f4:	2282      	movs	r2, #130	; 0x82
 80051f6:	6861      	ldr	r1, [r4, #4]
 80051f8:	0052      	lsls	r2, r2, #1
 80051fa:	4291      	cmp	r1, r2
 80051fc:	d10c      	bne.n	8005218 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x54>
 80051fe:	2180      	movs	r1, #128	; 0x80
 8005200:	68a2      	ldr	r2, [r4, #8]
 8005202:	0209      	lsls	r1, r1, #8
 8005204:	428a      	cmp	r2, r1
 8005206:	d003      	beq.n	8005210 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005208:	2180      	movs	r1, #128	; 0x80
 800520a:	00c9      	lsls	r1, r1, #3
 800520c:	428a      	cmp	r2, r1
 800520e:	d103      	bne.n	8005218 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x54>
          __HAL_SPI_DISABLE(hspi);
 8005210:	2140      	movs	r1, #64	; 0x40
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	438a      	bics	r2, r1
 8005216:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005218:	2180      	movs	r1, #128	; 0x80
 800521a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800521c:	0189      	lsls	r1, r1, #6
 800521e:	428a      	cmp	r2, r1
 8005220:	d106      	bne.n	8005230 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6c>
          SPI_RESET_CRC(hspi);
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	4807      	ldr	r0, [pc, #28]	; (8005244 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x80>)
 8005226:	4001      	ands	r1, r0
 8005228:	6019      	str	r1, [r3, #0]
 800522a:	6819      	ldr	r1, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005230:	0023      	movs	r3, r4
 8005232:	2201      	movs	r2, #1
 8005234:	3351      	adds	r3, #81	; 0x51
 8005236:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8005238:	2300      	movs	r3, #0
 800523a:	2003      	movs	r0, #3
 800523c:	3450      	adds	r4, #80	; 0x50
 800523e:	7023      	strb	r3, [r4, #0]
}
 8005240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	ffffdfff 	.word	0xffffdfff

08005248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800524a:	2282      	movs	r2, #130	; 0x82
{
 800524c:	b510      	push	{r4, lr}
 800524e:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005250:	6840      	ldr	r0, [r0, #4]
 8005252:	0052      	lsls	r2, r2, #1
 8005254:	4290      	cmp	r0, r2
 8005256:	d108      	bne.n	800526a <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005258:	000a      	movs	r2, r1
 800525a:	2180      	movs	r1, #128	; 0x80
 800525c:	0020      	movs	r0, r4
 800525e:	f7ff ffb1 	bl	80051c4 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8005262:	2800      	cmp	r0, #0
 8005264:	d109      	bne.n	800527a <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005266:	2000      	movs	r0, #0
}
 8005268:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800526a:	0022      	movs	r2, r4
 800526c:	3251      	adds	r2, #81	; 0x51
 800526e:	7812      	ldrb	r2, [r2, #0]
 8005270:	2a05      	cmp	r2, #5
 8005272:	d1f8      	bne.n	8005266 <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005274:	000a      	movs	r2, r1
 8005276:	2101      	movs	r1, #1
 8005278:	e7f0      	b.n	800525c <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527a:	2320      	movs	r3, #32
 800527c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800527e:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005280:	4313      	orrs	r3, r2
 8005282:	6563      	str	r3, [r4, #84]	; 0x54
 8005284:	e7f0      	b.n	8005268 <SPI_EndRxTxTransaction+0x20>

08005286 <HAL_SPI_MspInit>:
}
 8005286:	4770      	bx	lr

08005288 <HAL_SPI_Init>:
{
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800528c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800528e:	2c00      	cmp	r4, #0
 8005290:	d037      	beq.n	8005302 <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005292:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005294:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005296:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005298:	3551      	adds	r5, #81	; 0x51
 800529a:	782b      	ldrb	r3, [r5, #0]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d105      	bne.n	80052ae <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 80052a2:	0022      	movs	r2, r4
 80052a4:	3250      	adds	r2, #80	; 0x50
 80052a6:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80052a8:	0020      	movs	r0, r4
 80052aa:	f7ff ffec 	bl	8005286 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80052ae:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80052b0:	2240      	movs	r2, #64	; 0x40
 80052b2:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80052b4:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80052b6:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80052b8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80052ba:	4393      	bics	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80052be:	6863      	ldr	r3, [r4, #4]
 80052c0:	69a2      	ldr	r2, [r4, #24]
 80052c2:	4303      	orrs	r3, r0
 80052c4:	68e0      	ldr	r0, [r4, #12]
 80052c6:	4303      	orrs	r3, r0
 80052c8:	6920      	ldr	r0, [r4, #16]
 80052ca:	4303      	orrs	r3, r0
 80052cc:	6960      	ldr	r0, [r4, #20]
 80052ce:	4303      	orrs	r3, r0
 80052d0:	69e0      	ldr	r0, [r4, #28]
 80052d2:	4303      	orrs	r3, r0
 80052d4:	6a20      	ldr	r0, [r4, #32]
 80052d6:	4303      	orrs	r3, r0
 80052d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80052da:	4303      	orrs	r3, r0
 80052dc:	2080      	movs	r0, #128	; 0x80
 80052de:	0080      	lsls	r0, r0, #2
 80052e0:	4010      	ands	r0, r2
 80052e2:	4303      	orrs	r3, r0
 80052e4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052e6:	2304      	movs	r3, #4
 80052e8:	0c12      	lsrs	r2, r2, #16
 80052ea:	401a      	ands	r2, r3
 80052ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ee:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052f0:	431a      	orrs	r2, r3
 80052f2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f4:	69cb      	ldr	r3, [r1, #28]
 80052f6:	4a03      	ldr	r2, [pc, #12]	; (8005304 <HAL_SPI_Init+0x7c>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80052fc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052fe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005300:	702b      	strb	r3, [r5, #0]
}
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	fffff7ff 	.word	0xfffff7ff

08005308 <HAL_SPI_TransmitReceive>:
{
 8005308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530a:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800530c:	0003      	movs	r3, r0
 800530e:	3350      	adds	r3, #80	; 0x50
{
 8005310:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8005312:	781a      	ldrb	r2, [r3, #0]
{
 8005314:	0004      	movs	r4, r0
 8005316:	b085      	sub	sp, #20
 8005318:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 800531a:	2002      	movs	r0, #2
 800531c:	2a01      	cmp	r2, #1
 800531e:	d100      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x1a>
 8005320:	e099      	b.n	8005456 <HAL_SPI_TransmitReceive+0x14e>
 8005322:	2201      	movs	r2, #1
 8005324:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005326:	f7fe fbad 	bl	8003a84 <HAL_GetTick>
  tmp_state           = hspi->State;
 800532a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800532c:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 800532e:	3351      	adds	r3, #81	; 0x51
 8005330:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005332:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8005334:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005336:	2b01      	cmp	r3, #1
 8005338:	d00c      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x4c>
 800533a:	2282      	movs	r2, #130	; 0x82
    errorcode = HAL_BUSY;
 800533c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800533e:	0052      	lsls	r2, r2, #1
 8005340:	4291      	cmp	r1, r2
 8005342:	d000      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x3e>
 8005344:	e080      	b.n	8005448 <HAL_SPI_TransmitReceive+0x140>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005346:	68a2      	ldr	r2, [r4, #8]
 8005348:	2a00      	cmp	r2, #0
 800534a:	d000      	beq.n	800534e <HAL_SPI_TransmitReceive+0x46>
 800534c:	e07c      	b.n	8005448 <HAL_SPI_TransmitReceive+0x140>
 800534e:	2b04      	cmp	r3, #4
 8005350:	d000      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x4c>
 8005352:	e079      	b.n	8005448 <HAL_SPI_TransmitReceive+0x140>
    errorcode = HAL_ERROR;
 8005354:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005356:	2d00      	cmp	r5, #0
 8005358:	d076      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x140>
 800535a:	2f00      	cmp	r7, #0
 800535c:	d074      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x140>
 800535e:	2e00      	cmp	r6, #0
 8005360:	d072      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005362:	0023      	movs	r3, r4
 8005364:	3351      	adds	r3, #81	; 0x51
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	2a04      	cmp	r2, #4
 800536a:	d001      	beq.n	8005370 <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800536c:	2205      	movs	r2, #5
 800536e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005370:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005372:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005374:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8005376:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005378:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800537a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800537c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800537e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005380:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005382:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005384:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005386:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005388:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800538a:	4210      	tst	r0, r2
 800538c:	d102      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	4302      	orrs	r2, r0
 8005392:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005394:	2280      	movs	r2, #128	; 0x80
 8005396:	68e0      	ldr	r0, [r4, #12]
 8005398:	0112      	lsls	r2, r2, #4
 800539a:	4290      	cmp	r0, r2
 800539c:	d15d      	bne.n	800545a <HAL_SPI_TransmitReceive+0x152>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800539e:	2900      	cmp	r1, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_SPI_TransmitReceive+0x9e>
 80053a2:	2e01      	cmp	r6, #1
 80053a4:	d107      	bne.n	80053b6 <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053aa:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80053ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ae:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80053b6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053b8:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053ba:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d115      	bne.n	80053ee <HAL_SPI_TransmitReceive+0xe6>
 80053c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d112      	bne.n	80053ee <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053c8:	9a01      	ldr	r2, [sp, #4]
 80053ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053cc:	0020      	movs	r0, r4
 80053ce:	f7ff ff3b 	bl	8005248 <SPI_EndRxTxTransaction>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d000      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0xd0>
 80053d6:	e086      	b.n	80054e6 <HAL_SPI_TransmitReceive+0x1de>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053d8:	68a3      	ldr	r3, [r4, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d134      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	9003      	str	r0, [sp, #12]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	9203      	str	r2, [sp, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	9303      	str	r3, [sp, #12]
 80053ea:	9b03      	ldr	r3, [sp, #12]
 80053ec:	e02c      	b.n	8005448 <HAL_SPI_TransmitReceive+0x140>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	6893      	ldr	r3, [r2, #8]
 80053f2:	423b      	tst	r3, r7
 80053f4:	d00e      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x10c>
 80053f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x10c>
 80053fc:	2d01      	cmp	r5, #1
 80053fe:	d109      	bne.n	8005414 <HAL_SPI_TransmitReceive+0x10c>
        txallowed = 0U;
 8005400:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005402:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005404:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005406:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005408:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800540a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800540c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800540e:	3b01      	subs	r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005414:	6893      	ldr	r3, [r2, #8]
 8005416:	4233      	tst	r3, r6
 8005418:	d00c      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x12c>
 800541a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 1U;
 8005420:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005422:	68d2      	ldr	r2, [r2, #12]
 8005424:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005426:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005428:	3302      	adds	r3, #2
 800542a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800542c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800542e:	3b01      	subs	r3, #1
 8005430:	b29b      	uxth	r3, r3
 8005432:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005434:	f7fe fb26 	bl	8003a84 <HAL_GetTick>
 8005438:	9b01      	ldr	r3, [sp, #4]
 800543a:	1ac0      	subs	r0, r0, r3
 800543c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800543e:	4283      	cmp	r3, r0
 8005440:	d8bc      	bhi.n	80053bc <HAL_SPI_TransmitReceive+0xb4>
 8005442:	3301      	adds	r3, #1
 8005444:	d0ba      	beq.n	80053bc <HAL_SPI_TransmitReceive+0xb4>
        errorcode = HAL_TIMEOUT;
 8005446:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005448:	0023      	movs	r3, r4
 800544a:	2201      	movs	r2, #1
 800544c:	3351      	adds	r3, #81	; 0x51
 800544e:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8005450:	2300      	movs	r3, #0
 8005452:	3450      	adds	r4, #80	; 0x50
 8005454:	7023      	strb	r3, [r4, #0]
}
 8005456:	b005      	add	sp, #20
 8005458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800545a:	2900      	cmp	r1, #0
 800545c:	d001      	beq.n	8005462 <HAL_SPI_TransmitReceive+0x15a>
 800545e:	2e01      	cmp	r6, #1
 8005460:	d108      	bne.n	8005474 <HAL_SPI_TransmitReceive+0x16c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005462:	782a      	ldrb	r2, [r5, #0]
 8005464:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005468:	3301      	adds	r3, #1
 800546a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800546c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800546e:	3b01      	subs	r3, #1
 8005470:	b29b      	uxth	r3, r3
 8005472:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005474:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005476:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005478:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800547a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800547c:	2b00      	cmp	r3, #0
 800547e:	d102      	bne.n	8005486 <HAL_SPI_TransmitReceive+0x17e>
 8005480:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0a0      	beq.n	80053c8 <HAL_SPI_TransmitReceive+0xc0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	423a      	tst	r2, r7
 800548c:	d00f      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x1a6>
 800548e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005490:	2a00      	cmp	r2, #0
 8005492:	d00c      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x1a6>
 8005494:	2d01      	cmp	r5, #1
 8005496:	d10a      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 8005498:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800549a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800549c:	7812      	ldrb	r2, [r2, #0]
 800549e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80054a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054a2:	3301      	adds	r3, #1
 80054a4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80054a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	4232      	tst	r2, r6
 80054b4:	d00d      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x1ca>
 80054b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80054b8:	2a00      	cmp	r2, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 80054bc:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054c2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 80054c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054c6:	3301      	adds	r3, #1
 80054c8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80054ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054d2:	f7fe fad7 	bl	8003a84 <HAL_GetTick>
 80054d6:	9b01      	ldr	r3, [sp, #4]
 80054d8:	1ac0      	subs	r0, r0, r3
 80054da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054dc:	4283      	cmp	r3, r0
 80054de:	d8cc      	bhi.n	800547a <HAL_SPI_TransmitReceive+0x172>
 80054e0:	3301      	adds	r3, #1
 80054e2:	d0ca      	beq.n	800547a <HAL_SPI_TransmitReceive+0x172>
 80054e4:	e7af      	b.n	8005446 <HAL_SPI_TransmitReceive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054e6:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80054e8:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ea:	6563      	str	r3, [r4, #84]	; 0x54
 80054ec:	e7ac      	b.n	8005448 <HAL_SPI_TransmitReceive+0x140>
	...

080054f0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f0:	6803      	ldr	r3, [r0, #0]
 80054f2:	4907      	ldr	r1, [pc, #28]	; (8005510 <UART_EndRxTransfer+0x20>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	400a      	ands	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	3123      	adds	r1, #35	; 0x23
 80054fe:	31ff      	adds	r1, #255	; 0xff
 8005500:	438a      	bics	r2, r1
 8005502:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005504:	2320      	movs	r3, #32
 8005506:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	6603      	str	r3, [r0, #96]	; 0x60
}
 800550c:	4770      	bx	lr
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	fffffedf 	.word	0xfffffedf

08005514 <HAL_UART_Transmit_DMA>:
{
 8005514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005516:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005518:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800551a:	0004      	movs	r4, r0
    return HAL_BUSY;
 800551c:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800551e:	2a20      	cmp	r2, #32
 8005520:	d137      	bne.n	8005592 <HAL_UART_Transmit_DMA+0x7e>
      return HAL_ERROR;
 8005522:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005524:	2900      	cmp	r1, #0
 8005526:	d034      	beq.n	8005592 <HAL_UART_Transmit_DMA+0x7e>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d032      	beq.n	8005592 <HAL_UART_Transmit_DMA+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552c:	2280      	movs	r2, #128	; 0x80
 800552e:	68a5      	ldr	r5, [r4, #8]
 8005530:	0152      	lsls	r2, r2, #5
 8005532:	4295      	cmp	r5, r2
 8005534:	d104      	bne.n	8005540 <HAL_UART_Transmit_DMA+0x2c>
 8005536:	6922      	ldr	r2, [r4, #16]
 8005538:	2a00      	cmp	r2, #0
 800553a:	d101      	bne.n	8005540 <HAL_UART_Transmit_DMA+0x2c>
      if ((((uint32_t)pData) & 1) != 0)
 800553c:	4201      	tst	r1, r0
 800553e:	d128      	bne.n	8005592 <HAL_UART_Transmit_DMA+0x7e>
    __HAL_LOCK(huart);
 8005540:	0026      	movs	r6, r4
 8005542:	3670      	adds	r6, #112	; 0x70
 8005544:	7832      	ldrb	r2, [r6, #0]
    return HAL_BUSY;
 8005546:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005548:	2a01      	cmp	r2, #1
 800554a:	d022      	beq.n	8005592 <HAL_UART_Transmit_DMA+0x7e>
    huart->TxXferSize  = Size;
 800554c:	0022      	movs	r2, r4
    __HAL_LOCK(huart);
 800554e:	2501      	movs	r5, #1
    huart->TxXferSize  = Size;
 8005550:	3250      	adds	r2, #80	; 0x50
    __HAL_LOCK(huart);
 8005552:	7035      	strb	r5, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	2700      	movs	r7, #0
    huart->pTxBuffPtr  = pData;
 8005556:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005558:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 800555a:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800555c:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800555e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005562:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8005564:	42b8      	cmp	r0, r7
 8005566:	d015      	beq.n	8005594 <HAL_UART_Transmit_DMA+0x80>
 8005568:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 800556a:	6387      	str	r7, [r0, #56]	; 0x38
 800556c:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800556e:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <HAL_UART_Transmit_DMA+0x94>)
 8005570:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005572:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <HAL_UART_Transmit_DMA+0x98>)
 8005574:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005576:	4a0e      	ldr	r2, [pc, #56]	; (80055b0 <HAL_UART_Transmit_DMA+0x9c>)
 8005578:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800557a:	9a01      	ldr	r2, [sp, #4]
 800557c:	3228      	adds	r2, #40	; 0x28
 800557e:	f7fe fca5 	bl	8003ecc <HAL_DMA_Start_IT>
 8005582:	42b8      	cmp	r0, r7
 8005584:	d006      	beq.n	8005594 <HAL_UART_Transmit_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005586:	2310      	movs	r3, #16
        return HAL_ERROR;
 8005588:	0028      	movs	r0, r5
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800558a:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800558c:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 800558e:	7037      	strb	r7, [r6, #0]
        huart->gState = HAL_UART_STATE_READY;
 8005590:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005594:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8005596:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800559c:	6899      	ldr	r1, [r3, #8]
 800559e:	1892      	adds	r2, r2, r2
 80055a0:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 80055a2:	7030      	strb	r0, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055a4:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80055a6:	e7f4      	b.n	8005592 <HAL_UART_Transmit_DMA+0x7e>
 80055a8:	080055b5 	.word	0x080055b5
 80055ac:	080055e7 	.word	0x080055e7
 80055b0:	080055f3 	.word	0x080055f3

080055b4 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80055b4:	2120      	movs	r1, #32
 80055b6:	6803      	ldr	r3, [r0, #0]
{
 80055b8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80055ba:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80055be:	400b      	ands	r3, r1
 80055c0:	d10c      	bne.n	80055dc <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 80055c2:	0011      	movs	r1, r2
 80055c4:	3152      	adds	r1, #82	; 0x52
 80055c6:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055c8:	2180      	movs	r1, #128	; 0x80
 80055ca:	6813      	ldr	r3, [r2, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	438a      	bics	r2, r1
 80055d0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055d2:	2240      	movs	r2, #64	; 0x40
 80055d4:	6819      	ldr	r1, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055da:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80055dc:	0010      	movs	r0, r2
 80055de:	f001 fc95 	bl	8006f0c <HAL_UART_TxCpltCallback>
}
 80055e2:	e7fa      	b.n	80055da <UART_DMATransmitCplt+0x26>

080055e4 <HAL_UART_TxHalfCpltCallback>:
 80055e4:	4770      	bx	lr

080055e6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055e6:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80055e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80055ea:	f7ff fffb 	bl	80055e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ee:	bd10      	pop	{r4, pc}

080055f0 <HAL_UART_ErrorCallback>:
 80055f0:	4770      	bx	lr

080055f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055f2:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055f4:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80055f6:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80055f8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80055fa:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80055fc:	6898      	ldr	r0, [r3, #8]
 80055fe:	0600      	lsls	r0, r0, #24
 8005600:	d50b      	bpl.n	800561a <UART_DMAError+0x28>
 8005602:	2a21      	cmp	r2, #33	; 0x21
 8005604:	d109      	bne.n	800561a <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005606:	0022      	movs	r2, r4
 8005608:	2000      	movs	r0, #0
 800560a:	3252      	adds	r2, #82	; 0x52
 800560c:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	30c0      	adds	r0, #192	; 0xc0
 8005612:	4382      	bics	r2, r0
 8005614:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005616:	2220      	movs	r2, #32
 8005618:	6762      	str	r2, [r4, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	065b      	lsls	r3, r3, #25
 800561e:	d508      	bpl.n	8005632 <UART_DMAError+0x40>
 8005620:	2922      	cmp	r1, #34	; 0x22
 8005622:	d106      	bne.n	8005632 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005624:	0023      	movs	r3, r4
 8005626:	2200      	movs	r2, #0
 8005628:	335a      	adds	r3, #90	; 0x5a
 800562a:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800562c:	0020      	movs	r0, r4
 800562e:	f7ff ff5f 	bl	80054f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005632:	2310      	movs	r3, #16
 8005634:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005636:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005638:	4313      	orrs	r3, r2
 800563a:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800563c:	f7ff ffd8 	bl	80055f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005640:	bd10      	pop	{r4, pc}
	...

08005644 <HAL_UART_IRQHandler>:
{
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005646:	6803      	ldr	r3, [r0, #0]
{
 8005648:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800564a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800564c:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800564e:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8005650:	0711      	lsls	r1, r2, #28
 8005652:	d10a      	bne.n	800566a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005654:	2120      	movs	r1, #32
 8005656:	420a      	tst	r2, r1
 8005658:	d100      	bne.n	800565c <HAL_UART_IRQHandler+0x18>
 800565a:	e06a      	b.n	8005732 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800565c:	4208      	tst	r0, r1
 800565e:	d068      	beq.n	8005732 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8005660:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8005662:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8005664:	2b00      	cmp	r3, #0
 8005666:	d15a      	bne.n	800571e <HAL_UART_IRQHandler+0xda>
 8005668:	e05a      	b.n	8005720 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800566a:	2101      	movs	r1, #1
 800566c:	0035      	movs	r5, r6
 800566e:	400d      	ands	r5, r1
 8005670:	d103      	bne.n	800567a <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005672:	2790      	movs	r7, #144	; 0x90
 8005674:	007f      	lsls	r7, r7, #1
 8005676:	4238      	tst	r0, r7
 8005678:	d05b      	beq.n	8005732 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800567a:	420a      	tst	r2, r1
 800567c:	d005      	beq.n	800568a <HAL_UART_IRQHandler+0x46>
 800567e:	05c6      	lsls	r6, r0, #23
 8005680:	d503      	bpl.n	800568a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005682:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005684:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005686:	4331      	orrs	r1, r6
 8005688:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800568a:	2102      	movs	r1, #2
 800568c:	420a      	tst	r2, r1
 800568e:	d006      	beq.n	800569e <HAL_UART_IRQHandler+0x5a>
 8005690:	2d00      	cmp	r5, #0
 8005692:	d004      	beq.n	800569e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005694:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005696:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005698:	1849      	adds	r1, r1, r1
 800569a:	4331      	orrs	r1, r6
 800569c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800569e:	2104      	movs	r1, #4
 80056a0:	420a      	tst	r2, r1
 80056a2:	d006      	beq.n	80056b2 <HAL_UART_IRQHandler+0x6e>
 80056a4:	2d00      	cmp	r5, #0
 80056a6:	d004      	beq.n	80056b2 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056a8:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056aa:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80056ac:	3902      	subs	r1, #2
 80056ae:	4331      	orrs	r1, r6
 80056b0:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056b2:	0711      	lsls	r1, r2, #28
 80056b4:	d508      	bpl.n	80056c8 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056b6:	0681      	lsls	r1, r0, #26
 80056b8:	d401      	bmi.n	80056be <HAL_UART_IRQHandler+0x7a>
 80056ba:	2d00      	cmp	r5, #0
 80056bc:	d004      	beq.n	80056c8 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056be:	2108      	movs	r1, #8
 80056c0:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80056c4:	4319      	orrs	r1, r3
 80056c6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d028      	beq.n	8005720 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056ce:	2320      	movs	r3, #32
 80056d0:	421a      	tst	r2, r3
 80056d2:	d006      	beq.n	80056e2 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056d4:	4218      	tst	r0, r3
 80056d6:	d004      	beq.n	80056e2 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 80056d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 80056de:	0020      	movs	r0, r4
 80056e0:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056e2:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80056e4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056e6:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 80056e8:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ea:	065b      	lsls	r3, r3, #25
 80056ec:	d402      	bmi.n	80056f4 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80056ee:	2308      	movs	r3, #8
 80056f0:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056f2:	d01a      	beq.n	800572a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80056f4:	f7ff fefc 	bl	80054f0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	2140      	movs	r1, #64	; 0x40
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	420a      	tst	r2, r1
 8005700:	d00f      	beq.n	8005722 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005702:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005704:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005706:	438a      	bics	r2, r1
 8005708:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800570a:	2800      	cmp	r0, #0
 800570c:	d009      	beq.n	8005722 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800570e:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <HAL_UART_IRQHandler+0x134>)
 8005710:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005712:	f7fe fc1b 	bl	8003f4c <HAL_DMA_Abort_IT>
 8005716:	2800      	cmp	r0, #0
 8005718:	d002      	beq.n	8005720 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800571a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800571c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800571e:	4798      	blx	r3
}
 8005720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8005722:	0020      	movs	r0, r4
 8005724:	f7ff ff64 	bl	80055f0 <HAL_UART_ErrorCallback>
 8005728:	e7fa      	b.n	8005720 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 800572a:	f7ff ff61 	bl	80055f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8005730:	e7f6      	b.n	8005720 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005732:	2180      	movs	r1, #128	; 0x80
 8005734:	0349      	lsls	r1, r1, #13
 8005736:	420a      	tst	r2, r1
 8005738:	d006      	beq.n	8005748 <HAL_UART_IRQHandler+0x104>
 800573a:	0275      	lsls	r5, r6, #9
 800573c:	d504      	bpl.n	8005748 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800573e:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005740:	0020      	movs	r0, r4
 8005742:	f000 fa51 	bl	8005be8 <HAL_UARTEx_WakeupCallback>
    return;
 8005746:	e7eb      	b.n	8005720 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	420a      	tst	r2, r1
 800574c:	d003      	beq.n	8005756 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800574e:	4208      	tst	r0, r1
 8005750:	d001      	beq.n	8005756 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8005752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005754:	e785      	b.n	8005662 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005756:	2140      	movs	r1, #64	; 0x40
 8005758:	420a      	tst	r2, r1
 800575a:	d0e1      	beq.n	8005720 <HAL_UART_IRQHandler+0xdc>
 800575c:	4208      	tst	r0, r1
 800575e:	d0df      	beq.n	8005720 <HAL_UART_IRQHandler+0xdc>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005760:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005762:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005764:	438a      	bics	r2, r1
 8005766:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005768:	2320      	movs	r3, #32
 800576a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8005770:	f001 fbcc 	bl	8006f0c <HAL_UART_TxCpltCallback>
 8005774:	e7d4      	b.n	8005720 <HAL_UART_IRQHandler+0xdc>
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	0800577d 	.word	0x0800577d

0800577c <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800577c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	0002      	movs	r2, r0
{
 8005782:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005784:	325a      	adds	r2, #90	; 0x5a
 8005786:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005788:	3a08      	subs	r2, #8
 800578a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800578c:	f7ff ff30 	bl	80055f0 <HAL_UART_ErrorCallback>
}
 8005790:	bd10      	pop	{r4, pc}
	...

08005794 <UART_SetConfig>:
{
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005798:	6925      	ldr	r5, [r4, #16]
 800579a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800579c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800579e:	432a      	orrs	r2, r5
 80057a0:	6965      	ldr	r5, [r4, #20]
 80057a2:	69c1      	ldr	r1, [r0, #28]
 80057a4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	4d81      	ldr	r5, [pc, #516]	; (80059b0 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057aa:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057ac:	4028      	ands	r0, r5
 80057ae:	4302      	orrs	r2, r0
 80057b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	487f      	ldr	r0, [pc, #508]	; (80059b4 <UART_SetConfig+0x220>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057b6:	4d80      	ldr	r5, [pc, #512]	; (80059b8 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b8:	4002      	ands	r2, r0
 80057ba:	68e0      	ldr	r0, [r4, #12]
 80057bc:	4302      	orrs	r2, r0
 80057be:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057c0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057c2:	42ab      	cmp	r3, r5
 80057c4:	d001      	beq.n	80057ca <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80057c6:	6a22      	ldr	r2, [r4, #32]
 80057c8:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	4e7b      	ldr	r6, [pc, #492]	; (80059bc <UART_SetConfig+0x228>)
 80057ce:	4032      	ands	r2, r6
 80057d0:	4302      	orrs	r2, r0
 80057d2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057d4:	4a7a      	ldr	r2, [pc, #488]	; (80059c0 <UART_SetConfig+0x22c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d114      	bne.n	8005804 <UART_SetConfig+0x70>
 80057da:	2203      	movs	r2, #3
 80057dc:	4b79      	ldr	r3, [pc, #484]	; (80059c4 <UART_SetConfig+0x230>)
 80057de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e0:	4013      	ands	r3, r2
 80057e2:	4a79      	ldr	r2, [pc, #484]	; (80059c8 <UART_SetConfig+0x234>)
 80057e4:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e6:	2380      	movs	r3, #128	; 0x80
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	4299      	cmp	r1, r3
 80057ec:	d000      	beq.n	80057f0 <UART_SetConfig+0x5c>
 80057ee:	e09e      	b.n	800592e <UART_SetConfig+0x19a>
    switch (clocksource)
 80057f0:	2808      	cmp	r0, #8
 80057f2:	d900      	bls.n	80057f6 <UART_SetConfig+0x62>
 80057f4:	e098      	b.n	8005928 <UART_SetConfig+0x194>
 80057f6:	f7fa fc87 	bl	8000108 <__gnu_thumb1_case_uqi>
 80057fa:	6b63      	.short	0x6b63
 80057fc:	978f976e 	.word	0x978f976e
 8005800:	9797      	.short	0x9797
 8005802:	92          	.byte	0x92
 8005803:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005804:	4a71      	ldr	r2, [pc, #452]	; (80059cc <UART_SetConfig+0x238>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d107      	bne.n	800581a <UART_SetConfig+0x86>
 800580a:	220c      	movs	r2, #12
 800580c:	4b6d      	ldr	r3, [pc, #436]	; (80059c4 <UART_SetConfig+0x230>)
 800580e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005810:	401a      	ands	r2, r3
 8005812:	4b6d      	ldr	r3, [pc, #436]	; (80059c8 <UART_SetConfig+0x234>)
 8005814:	189b      	adds	r3, r3, r2
 8005816:	7918      	ldrb	r0, [r3, #4]
 8005818:	e7e5      	b.n	80057e6 <UART_SetConfig+0x52>
 800581a:	4a6d      	ldr	r2, [pc, #436]	; (80059d0 <UART_SetConfig+0x23c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d100      	bne.n	8005822 <UART_SetConfig+0x8e>
 8005820:	e0b4      	b.n	800598c <UART_SetConfig+0x1f8>
 8005822:	4a6c      	ldr	r2, [pc, #432]	; (80059d4 <UART_SetConfig+0x240>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d100      	bne.n	800582a <UART_SetConfig+0x96>
 8005828:	e0b0      	b.n	800598c <UART_SetConfig+0x1f8>
 800582a:	42ab      	cmp	r3, r5
 800582c:	d000      	beq.n	8005830 <UART_SetConfig+0x9c>
 800582e:	e0b8      	b.n	80059a2 <UART_SetConfig+0x20e>
 8005830:	21c0      	movs	r1, #192	; 0xc0
 8005832:	2080      	movs	r0, #128	; 0x80
 8005834:	4a63      	ldr	r2, [pc, #396]	; (80059c4 <UART_SetConfig+0x230>)
 8005836:	0109      	lsls	r1, r1, #4
 8005838:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800583a:	00c0      	lsls	r0, r0, #3
 800583c:	400b      	ands	r3, r1
 800583e:	4283      	cmp	r3, r0
 8005840:	d03b      	beq.n	80058ba <UART_SetConfig+0x126>
 8005842:	d803      	bhi.n	800584c <UART_SetConfig+0xb8>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8005848:	2501      	movs	r5, #1
 800584a:	e00d      	b.n	8005868 <UART_SetConfig+0xd4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800584c:	2080      	movs	r0, #128	; 0x80
 800584e:	0100      	lsls	r0, r0, #4
 8005850:	4283      	cmp	r3, r0
 8005852:	d00e      	beq.n	8005872 <UART_SetConfig+0xde>
 8005854:	428b      	cmp	r3, r1
 8005856:	d1f7      	bne.n	8005848 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005858:	2080      	movs	r0, #128	; 0x80
 800585a:	0200      	lsls	r0, r0, #8
 800585c:	e010      	b.n	8005880 <UART_SetConfig+0xec>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800585e:	f7ff f887 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 8005862:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8005864:	42a8      	cmp	r0, r5
 8005866:	d10b      	bne.n	8005880 <UART_SetConfig+0xec>
  huart->RxISR = NULL;
 8005868:	2300      	movs	r3, #0
}
 800586a:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 800586c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800586e:	6663      	str	r3, [r4, #100]	; 0x64
}
 8005870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005872:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005874:	4b58      	ldr	r3, [pc, #352]	; (80059d8 <UART_SetConfig+0x244>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005876:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005878:	17c0      	asrs	r0, r0, #31
 800587a:	4018      	ands	r0, r3
 800587c:	4b57      	ldr	r3, [pc, #348]	; (80059dc <UART_SetConfig+0x248>)
 800587e:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005880:	2203      	movs	r2, #3
 8005882:	6863      	ldr	r3, [r4, #4]
 8005884:	435a      	muls	r2, r3
 8005886:	4282      	cmp	r2, r0
 8005888:	d8de      	bhi.n	8005848 <UART_SetConfig+0xb4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800588a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800588c:	4282      	cmp	r2, r0
 800588e:	d3db      	bcc.n	8005848 <UART_SetConfig+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8005890:	2700      	movs	r7, #0
 8005892:	0e02      	lsrs	r2, r0, #24
 8005894:	0201      	lsls	r1, r0, #8
 8005896:	085e      	lsrs	r6, r3, #1
 8005898:	1989      	adds	r1, r1, r6
 800589a:	417a      	adcs	r2, r7
 800589c:	0008      	movs	r0, r1
 800589e:	0011      	movs	r1, r2
 80058a0:	001a      	movs	r2, r3
 80058a2:	003b      	movs	r3, r7
 80058a4:	f7fa fdee 	bl	8000484 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058a8:	4b4d      	ldr	r3, [pc, #308]	; (80059e0 <UART_SetConfig+0x24c>)
 80058aa:	18c2      	adds	r2, r0, r3
 80058ac:	4b4d      	ldr	r3, [pc, #308]	; (80059e4 <UART_SetConfig+0x250>)
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d8ca      	bhi.n	8005848 <UART_SetConfig+0xb4>
          huart->Instance->BRR = usartdiv;
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	003d      	movs	r5, r7
 80058b6:	60d8      	str	r0, [r3, #12]
 80058b8:	e7d6      	b.n	8005868 <UART_SetConfig+0xd4>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fe fcd5 	bl	8004268 <HAL_RCC_GetSysClockFreq>
        break;
 80058be:	e7d0      	b.n	8005862 <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80058c0:	f7ff f856 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80058c4:	6863      	ldr	r3, [r4, #4]
 80058c6:	0040      	lsls	r0, r0, #1
 80058c8:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80058ca:	18c0      	adds	r0, r0, r3
 80058cc:	6861      	ldr	r1, [r4, #4]
 80058ce:	e00b      	b.n	80058e8 <UART_SetConfig+0x154>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80058d0:	f7ff f85e 	bl	8004990 <HAL_RCC_GetPCLK2Freq>
 80058d4:	e7f6      	b.n	80058c4 <UART_SetConfig+0x130>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d6:	2510      	movs	r5, #16
 80058d8:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <UART_SetConfig+0x230>)
 80058da:	6861      	ldr	r1, [r4, #4]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	0848      	lsrs	r0, r1, #1
 80058e0:	4015      	ands	r5, r2
 80058e2:	d006      	beq.n	80058f2 <UART_SetConfig+0x15e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80058e4:	4b40      	ldr	r3, [pc, #256]	; (80059e8 <UART_SetConfig+0x254>)
 80058e6:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80058e8:	f7fa fc18 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ec:	2500      	movs	r5, #0
 80058ee:	b283      	uxth	r3, r0
        break;
 80058f0:	e004      	b.n	80058fc <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80058f2:	4b3e      	ldr	r3, [pc, #248]	; (80059ec <UART_SetConfig+0x258>)
 80058f4:	18c0      	adds	r0, r0, r3
 80058f6:	f7fa fc11 	bl	800011c <__udivsi3>
 80058fa:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058fc:	0019      	movs	r1, r3
 80058fe:	483c      	ldr	r0, [pc, #240]	; (80059f0 <UART_SetConfig+0x25c>)
 8005900:	3910      	subs	r1, #16
 8005902:	4281      	cmp	r1, r0
 8005904:	d8a0      	bhi.n	8005848 <UART_SetConfig+0xb4>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005906:	210f      	movs	r1, #15
 8005908:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590a:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800590c:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590e:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8005910:	6821      	ldr	r1, [r4, #0]
 8005912:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8005914:	60cb      	str	r3, [r1, #12]
 8005916:	e7a7      	b.n	8005868 <UART_SetConfig+0xd4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005918:	f7fe fca6 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 800591c:	e7d2      	b.n	80058c4 <UART_SetConfig+0x130>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	0858      	lsrs	r0, r3, #1
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	025b      	lsls	r3, r3, #9
 8005926:	e7d0      	b.n	80058ca <UART_SetConfig+0x136>
        ret = HAL_ERROR;
 8005928:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800592a:	2300      	movs	r3, #0
 800592c:	e7e6      	b.n	80058fc <UART_SetConfig+0x168>
    switch (clocksource)
 800592e:	2808      	cmp	r0, #8
 8005930:	d83b      	bhi.n	80059aa <UART_SetConfig+0x216>
 8005932:	f7fa fbe9 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005936:	052f      	.short	0x052f
 8005938:	3a233a08 	.word	0x3a233a08
 800593c:	3a3a      	.short	0x3a3a
 800593e:	26          	.byte	0x26
 800593f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005940:	f7ff f826 	bl	8004990 <HAL_RCC_GetPCLK2Freq>
 8005944:	e028      	b.n	8005998 <UART_SetConfig+0x204>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005946:	2510      	movs	r5, #16
 8005948:	4b1e      	ldr	r3, [pc, #120]	; (80059c4 <UART_SetConfig+0x230>)
 800594a:	6861      	ldr	r1, [r4, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	0848      	lsrs	r0, r1, #1
 8005950:	4015      	ands	r5, r2
 8005952:	d00d      	beq.n	8005970 <UART_SetConfig+0x1dc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <UART_SetConfig+0x260>)
 8005956:	18c0      	adds	r0, r0, r3
 8005958:	f7fa fbe0 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800595c:	2500      	movs	r5, #0
 800595e:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005960:	0019      	movs	r1, r3
 8005962:	4823      	ldr	r0, [pc, #140]	; (80059f0 <UART_SetConfig+0x25c>)
 8005964:	3910      	subs	r1, #16
 8005966:	4281      	cmp	r1, r0
 8005968:	d900      	bls.n	800596c <UART_SetConfig+0x1d8>
 800596a:	e76d      	b.n	8005848 <UART_SetConfig+0xb4>
      huart->Instance->BRR = usartdiv;
 800596c:	6821      	ldr	r1, [r4, #0]
 800596e:	e7d1      	b.n	8005914 <UART_SetConfig+0x180>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005970:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <UART_SetConfig+0x248>)
 8005972:	18c0      	adds	r0, r0, r3
 8005974:	f7fa fbd2 	bl	800011c <__udivsi3>
 8005978:	b283      	uxth	r3, r0
 800597a:	e7f1      	b.n	8005960 <UART_SetConfig+0x1cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800597c:	f7fe fc74 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8005980:	e00a      	b.n	8005998 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005982:	6863      	ldr	r3, [r4, #4]
 8005984:	0858      	lsrs	r0, r3, #1
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	e007      	b.n	800599c <UART_SetConfig+0x208>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	4299      	cmp	r1, r3
 8005992:	d095      	beq.n	80058c0 <UART_SetConfig+0x12c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005994:	f7fe ffec 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005998:	6863      	ldr	r3, [r4, #4]
 800599a:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800599c:	18c0      	adds	r0, r0, r3
 800599e:	6861      	ldr	r1, [r4, #4]
 80059a0:	e7da      	b.n	8005958 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a2:	2380      	movs	r3, #128	; 0x80
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	4299      	cmp	r1, r3
 80059a8:	d0be      	beq.n	8005928 <UART_SetConfig+0x194>
        ret = HAL_ERROR;
 80059aa:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e7d7      	b.n	8005960 <UART_SetConfig+0x1cc>
 80059b0:	efff69f3 	.word	0xefff69f3
 80059b4:	ffffcfff 	.word	0xffffcfff
 80059b8:	40004800 	.word	0x40004800
 80059bc:	fffff4ff 	.word	0xfffff4ff
 80059c0:	40013800 	.word	0x40013800
 80059c4:	40021000 	.word	0x40021000
 80059c8:	08007df5 	.word	0x08007df5
 80059cc:	40004400 	.word	0x40004400
 80059d0:	40004c00 	.word	0x40004c00
 80059d4:	40005000 	.word	0x40005000
 80059d8:	ff48e500 	.word	0xff48e500
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	fffffd00 	.word	0xfffffd00
 80059e4:	000ffcff 	.word	0x000ffcff
 80059e8:	007a1200 	.word	0x007a1200
 80059ec:	01e84800 	.word	0x01e84800
 80059f0:	0000ffef 	.word	0x0000ffef
 80059f4:	003d0900 	.word	0x003d0900

080059f8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80059fa:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059fc:	07da      	lsls	r2, r3, #31
 80059fe:	d506      	bpl.n	8005a0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a00:	6801      	ldr	r1, [r0, #0]
 8005a02:	4c28      	ldr	r4, [pc, #160]	; (8005aa4 <UART_AdvFeatureConfig+0xac>)
 8005a04:	684a      	ldr	r2, [r1, #4]
 8005a06:	4022      	ands	r2, r4
 8005a08:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005a0a:	4322      	orrs	r2, r4
 8005a0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a0e:	079a      	lsls	r2, r3, #30
 8005a10:	d506      	bpl.n	8005a20 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a12:	6801      	ldr	r1, [r0, #0]
 8005a14:	4c24      	ldr	r4, [pc, #144]	; (8005aa8 <UART_AdvFeatureConfig+0xb0>)
 8005a16:	684a      	ldr	r2, [r1, #4]
 8005a18:	4022      	ands	r2, r4
 8005a1a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005a1c:	4322      	orrs	r2, r4
 8005a1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a20:	075a      	lsls	r2, r3, #29
 8005a22:	d506      	bpl.n	8005a32 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a24:	6801      	ldr	r1, [r0, #0]
 8005a26:	4c21      	ldr	r4, [pc, #132]	; (8005aac <UART_AdvFeatureConfig+0xb4>)
 8005a28:	684a      	ldr	r2, [r1, #4]
 8005a2a:	4022      	ands	r2, r4
 8005a2c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005a2e:	4322      	orrs	r2, r4
 8005a30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a32:	071a      	lsls	r2, r3, #28
 8005a34:	d506      	bpl.n	8005a44 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a36:	6801      	ldr	r1, [r0, #0]
 8005a38:	4c1d      	ldr	r4, [pc, #116]	; (8005ab0 <UART_AdvFeatureConfig+0xb8>)
 8005a3a:	684a      	ldr	r2, [r1, #4]
 8005a3c:	4022      	ands	r2, r4
 8005a3e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005a40:	4322      	orrs	r2, r4
 8005a42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a44:	06da      	lsls	r2, r3, #27
 8005a46:	d506      	bpl.n	8005a56 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a48:	6801      	ldr	r1, [r0, #0]
 8005a4a:	4c1a      	ldr	r4, [pc, #104]	; (8005ab4 <UART_AdvFeatureConfig+0xbc>)
 8005a4c:	688a      	ldr	r2, [r1, #8]
 8005a4e:	4022      	ands	r2, r4
 8005a50:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005a52:	4322      	orrs	r2, r4
 8005a54:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a56:	069a      	lsls	r2, r3, #26
 8005a58:	d506      	bpl.n	8005a68 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a5a:	6801      	ldr	r1, [r0, #0]
 8005a5c:	4c16      	ldr	r4, [pc, #88]	; (8005ab8 <UART_AdvFeatureConfig+0xc0>)
 8005a5e:	688a      	ldr	r2, [r1, #8]
 8005a60:	4022      	ands	r2, r4
 8005a62:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005a64:	4322      	orrs	r2, r4
 8005a66:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a68:	065a      	lsls	r2, r3, #25
 8005a6a:	d510      	bpl.n	8005a8e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a6c:	6801      	ldr	r1, [r0, #0]
 8005a6e:	4d13      	ldr	r5, [pc, #76]	; (8005abc <UART_AdvFeatureConfig+0xc4>)
 8005a70:	684a      	ldr	r2, [r1, #4]
 8005a72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005a74:	402a      	ands	r2, r5
 8005a76:	4322      	orrs	r2, r4
 8005a78:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a7a:	2280      	movs	r2, #128	; 0x80
 8005a7c:	0352      	lsls	r2, r2, #13
 8005a7e:	4294      	cmp	r4, r2
 8005a80:	d105      	bne.n	8005a8e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a82:	684a      	ldr	r2, [r1, #4]
 8005a84:	4c0e      	ldr	r4, [pc, #56]	; (8005ac0 <UART_AdvFeatureConfig+0xc8>)
 8005a86:	4022      	ands	r2, r4
 8005a88:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005a8a:	4322      	orrs	r2, r4
 8005a8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8e:	061b      	lsls	r3, r3, #24
 8005a90:	d506      	bpl.n	8005aa0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a92:	6802      	ldr	r2, [r0, #0]
 8005a94:	490b      	ldr	r1, [pc, #44]	; (8005ac4 <UART_AdvFeatureConfig+0xcc>)
 8005a96:	6853      	ldr	r3, [r2, #4]
 8005a98:	400b      	ands	r3, r1
 8005a9a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6053      	str	r3, [r2, #4]
}
 8005aa0:	bd30      	pop	{r4, r5, pc}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	fffdffff 	.word	0xfffdffff
 8005aa8:	fffeffff 	.word	0xfffeffff
 8005aac:	fffbffff 	.word	0xfffbffff
 8005ab0:	ffff7fff 	.word	0xffff7fff
 8005ab4:	ffffefff 	.word	0xffffefff
 8005ab8:	ffffdfff 	.word	0xffffdfff
 8005abc:	ffefffff 	.word	0xffefffff
 8005ac0:	ff9fffff 	.word	0xff9fffff
 8005ac4:	fff7ffff 	.word	0xfff7ffff

08005ac8 <UART_WaitOnFlagUntilTimeout>:
{
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	0004      	movs	r4, r0
 8005acc:	000e      	movs	r6, r1
 8005ace:	0015      	movs	r5, r2
 8005ad0:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	69d3      	ldr	r3, [r2, #28]
 8005ad6:	4033      	ands	r3, r6
 8005ad8:	1b9b      	subs	r3, r3, r6
 8005ada:	4259      	negs	r1, r3
 8005adc:	414b      	adcs	r3, r1
 8005ade:	42ab      	cmp	r3, r5
 8005ae0:	d001      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	e01b      	b.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8005ae6:	9b06      	ldr	r3, [sp, #24]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	d0f3      	beq.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aec:	f7fd ffca 	bl	8003a84 <HAL_GetTick>
 8005af0:	9b06      	ldr	r3, [sp, #24]
 8005af2:	1bc0      	subs	r0, r0, r7
 8005af4:	4298      	cmp	r0, r3
 8005af6:	d801      	bhi.n	8005afc <UART_WaitOnFlagUntilTimeout+0x34>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1ea      	bne.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	4908      	ldr	r1, [pc, #32]	; (8005b20 <UART_WaitOnFlagUntilTimeout+0x58>)
 8005b00:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8005b02:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b04:	400a      	ands	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	31a3      	adds	r1, #163	; 0xa3
 8005b0c:	31ff      	adds	r1, #255	; 0xff
 8005b0e:	438a      	bics	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005b12:	2320      	movs	r3, #32
 8005b14:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b16:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005b18:	2300      	movs	r3, #0
 8005b1a:	3470      	adds	r4, #112	; 0x70
 8005b1c:	7023      	strb	r3, [r4, #0]
}
 8005b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b20:	fffffe5f 	.word	0xfffffe5f

08005b24 <UART_CheckIdleState>:
{
 8005b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b26:	2600      	movs	r6, #0
{
 8005b28:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005b2c:	f7fd ffaa 	bl	8003a84 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b30:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005b32:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	071b      	lsls	r3, r3, #28
 8005b38:	d415      	bmi.n	8005b66 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	075b      	lsls	r3, r3, #29
 8005b40:	d50a      	bpl.n	8005b58 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b42:	2180      	movs	r1, #128	; 0x80
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <UART_CheckIdleState+0x5c>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	03c9      	lsls	r1, r1, #15
 8005b4c:	002b      	movs	r3, r5
 8005b4e:	0020      	movs	r0, r4
 8005b50:	f7ff ffba 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d111      	bne.n	8005b7c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005b58:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005b5a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b5c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005b60:	3470      	adds	r4, #112	; 0x70
 8005b62:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005b64:	e00b      	b.n	8005b7e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <UART_CheckIdleState+0x5c>)
 8005b6a:	0032      	movs	r2, r6
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	0389      	lsls	r1, r1, #14
 8005b70:	0003      	movs	r3, r0
 8005b72:	0020      	movs	r0, r4
 8005b74:	f7ff ffa8 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d0de      	beq.n	8005b3a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005b7c:	2003      	movs	r0, #3
}
 8005b7e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005b80:	01ffffff 	.word	0x01ffffff

08005b84 <HAL_UART_Init>:
{
 8005b84:	b510      	push	{r4, lr}
 8005b86:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005b8a:	2001      	movs	r0, #1
}
 8005b8c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005b94:	0002      	movs	r2, r0
 8005b96:	3270      	adds	r2, #112	; 0x70
 8005b98:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005b9a:	f001 f9fb 	bl	8006f94 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005b9e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005ba4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005ba6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005baa:	438b      	bics	r3, r1
 8005bac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bae:	f7ff fdf1 	bl	8005794 <UART_SetConfig>
 8005bb2:	2801      	cmp	r0, #1
 8005bb4:	d0e9      	beq.n	8005b8a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005bbc:	0020      	movs	r0, r4
 8005bbe:	f7ff ff1b 	bl	80059f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	4907      	ldr	r1, [pc, #28]	; (8005be4 <HAL_UART_Init+0x60>)
 8005bc6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005bc8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bca:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bcc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	438a      	bics	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	6819      	ldr	r1, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005bde:	f7ff ffa1 	bl	8005b24 <UART_CheckIdleState>
 8005be2:	e7d3      	b.n	8005b8c <HAL_UART_Init+0x8>
 8005be4:	ffffb7ff 	.word	0xffffb7ff

08005be8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005be8:	4770      	bx	lr
	...

08005bec <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8005bec:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005bf2:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d008      	beq.n	8005c0a <LPM_SetOffMode+0x1e>
 8005bf8:	2901      	cmp	r1, #1
 8005bfa:	d103      	bne.n	8005c04 <LPM_SetOffMode+0x18>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <LPM_SetOffMode+0x28>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4310      	orrs	r0, r2
 8005c02:	6018      	str	r0, [r3, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c04:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 8005c08:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 8005c0a:	4a02      	ldr	r2, [pc, #8]	; (8005c14 <LPM_SetOffMode+0x28>)
 8005c0c:	6813      	ldr	r3, [r2, #0]
 8005c0e:	4383      	bics	r3, r0
 8005c10:	6013      	str	r3, [r2, #0]
      break;
 8005c12:	e7f7      	b.n	8005c04 <LPM_SetOffMode+0x18>
 8005c14:	200001c4 	.word	0x200001c4

08005c18 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8005c18:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c1e:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8005c20:	2900      	cmp	r1, #0
 8005c22:	d008      	beq.n	8005c36 <LPM_SetStopMode+0x1e>
 8005c24:	2901      	cmp	r1, #1
 8005c26:	d103      	bne.n	8005c30 <LPM_SetStopMode+0x18>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <LPM_SetStopMode+0x28>)
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4310      	orrs	r0, r2
 8005c2e:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c30:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 8005c34:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 8005c36:	4a02      	ldr	r2, [pc, #8]	; (8005c40 <LPM_SetStopMode+0x28>)
 8005c38:	6853      	ldr	r3, [r2, #4]
 8005c3a:	4383      	bics	r3, r0
 8005c3c:	6053      	str	r3, [r2, #4]
      break;
 8005c3e:	e7f7      	b.n	8005c30 <LPM_SetStopMode+0x18>
 8005c40:	200001c4 	.word	0x200001c4

08005c44 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c44:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c48:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
  {
    mode_selected = LPM_SleepMode;
 8005c4a:	2000      	movs	r0, #0
  if(StopModeDisable )
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <LPM_GetMode+0x20>)
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	4281      	cmp	r1, r0
 8005c52:	d103      	bne.n	8005c5c <LPM_GetMode+0x18>
  }
  else
  {
    if(OffModeDisable)
 8005c54:	6818      	ldr	r0, [r3, #0]
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 8005c56:	4243      	negs	r3, r0
 8005c58:	4158      	adcs	r0, r3
 8005c5a:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5c:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 8005c60:	4770      	bx	lr
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	200001c4 	.word	0x200001c4

08005c68 <LPM_ExitSleepMode>:
 8005c68:	4770      	bx	lr

08005c6a <LPM_EnterOffMode>:
 8005c6a:	4770      	bx	lr

08005c6c <LPM_ExitOffMode>:
 8005c6c:	4770      	bx	lr
	...

08005c70 <LPM_EnterLowPower>:
  if( StopModeDisable )
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <LPM_EnterLowPower+0x30>)
{
 8005c72:	b510      	push	{r4, lr}
  if( StopModeDisable )
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	2a00      	cmp	r2, #0
 8005c78:	d004      	beq.n	8005c84 <LPM_EnterLowPower+0x14>
    LPM_EnterSleepMode();
 8005c7a:	f001 f8c5 	bl	8006e08 <LPM_EnterSleepMode>
    LPM_ExitSleepMode();
 8005c7e:	f7ff fff3 	bl	8005c68 <LPM_ExitSleepMode>
}
 8005c82:	bd10      	pop	{r4, pc}
    if( OffModeDisable )
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <LPM_EnterLowPower+0x24>
      LPM_EnterStopMode();
 8005c8a:	f001 f86f 	bl	8006d6c <LPM_EnterStopMode>
      LPM_ExitStopMode();
 8005c8e:	f001 f88b 	bl	8006da8 <LPM_ExitStopMode>
 8005c92:	e7f6      	b.n	8005c82 <LPM_EnterLowPower+0x12>
      LPM_EnterOffMode();
 8005c94:	f7ff ffe9 	bl	8005c6a <LPM_EnterOffMode>
      LPM_ExitOffMode();
 8005c98:	f7ff ffe8 	bl	8005c6c <LPM_ExitOffMode>
  return;
 8005c9c:	e7f1      	b.n	8005c82 <LPM_EnterLowPower+0x12>
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	200001c4 	.word	0x200001c4

08005ca4 <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 8005ca4:	8843      	ldrh	r3, [r0, #2]
{
 8005ca6:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	6884      	ldr	r4, [r0, #8]
 8005cac:	8042      	strh	r2, [r0, #2]
 8005cae:	0a0a      	lsrs	r2, r1, #8
 8005cb0:	54e2      	strb	r2, [r4, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8005cb2:	8842      	ldrh	r2, [r0, #2]
 8005cb4:	88c3      	ldrh	r3, [r0, #6]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d101      	bne.n	8005cbe <add_elementSize_and_inc_writeIdx+0x1a>
  {
    queue->queue_write_idx=0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	8043      	strh	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 8005cbe:	8843      	ldrh	r3, [r0, #2]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	8042      	strh	r2, [r0, #2]
 8005cc4:	6882      	ldr	r2, [r0, #8]
 8005cc6:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8005cc8:	8842      	ldrh	r2, [r0, #2]
 8005cca:	88c3      	ldrh	r3, [r0, #6]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d101      	bne.n	8005cd4 <add_elementSize_and_inc_writeIdx+0x30>
  {
    queue->queue_write_idx=0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	8043      	strh	r3, [r0, #2]
  }
}
 8005cd4:	bd10      	pop	{r4, pc}

08005cd6 <circular_queue_init>:
  queue->queue_read_idx=0;
 8005cd6:	2300      	movs	r3, #0
  queue->queue_buff=queue_buff;
 8005cd8:	6081      	str	r1, [r0, #8]
  queue->queue_read_idx=0;
 8005cda:	6003      	str	r3, [r0, #0]
  queue->queue_write_idx=0;
 8005cdc:	8083      	strh	r3, [r0, #4]
  queue->queue_size=queue_size;
 8005cde:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 8005ce0:	7303      	strb	r3, [r0, #12]
}
 8005ce2:	4770      	bx	lr

08005ce4 <circular_queue_add>:
{
 8005ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8005ce6:	8803      	ldrh	r3, [r0, #0]
{
 8005ce8:	0015      	movs	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8005cea:	8842      	ldrh	r2, [r0, #2]
{
 8005cec:	0004      	movs	r4, r0
 8005cee:	000f      	movs	r7, r1
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d301      	bcc.n	8005cf8 <circular_queue_add+0x14>
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 8005cf4:	88c1      	ldrh	r1, [r0, #6]
 8005cf6:	185b      	adds	r3, r3, r1
  if ( queue->queue_full==1)
 8005cf8:	7b21      	ldrb	r1, [r4, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	b21b      	sxth	r3, r3
  if ( queue->queue_full==1)
 8005cfe:	2901      	cmp	r1, #1
 8005d00:	d100      	bne.n	8005d04 <circular_queue_add+0x20>
    free_size=0;
 8005d02:	2300      	movs	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 8005d04:	1c69      	adds	r1, r5, #1
 8005d06:	4299      	cmp	r1, r3
 8005d08:	da27      	bge.n	8005d5a <circular_queue_add+0x76>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 8005d0a:	18a8      	adds	r0, r5, r2
 8005d0c:	88e1      	ldrh	r1, [r4, #6]
 8005d0e:	3001      	adds	r0, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 8005d10:	4288      	cmp	r0, r1
 8005d12:	db02      	blt.n	8005d1a <circular_queue_add+0x36>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 8005d14:	3902      	subs	r1, #2
 8005d16:	428a      	cmp	r2, r1
 8005d18:	db1f      	blt.n	8005d5a <circular_queue_add+0x76>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 8005d1a:	0029      	movs	r1, r5
 8005d1c:	0020      	movs	r0, r4
 8005d1e:	f7ff ffc1 	bl	8005ca4 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 8005d22:	68a3      	ldr	r3, [r4, #8]
 8005d24:	8862      	ldrh	r2, [r4, #2]
 8005d26:	189a      	adds	r2, r3, r2
 8005d28:	2300      	movs	r3, #0
  while(size--)
 8005d2a:	429d      	cmp	r5, r3
 8005d2c:	d111      	bne.n	8005d52 <circular_queue_add+0x6e>
    queue->queue_write_idx+=buff_size;
 8005d2e:	8863      	ldrh	r3, [r4, #2]
 8005d30:	18ed      	adds	r5, r5, r3
    if (queue->queue_write_idx==queue->queue_size)
 8005d32:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 8005d34:	b2ad      	uxth	r5, r5
 8005d36:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 8005d38:	42ab      	cmp	r3, r5
 8005d3a:	d101      	bne.n	8005d40 <circular_queue_add+0x5c>
        queue->queue_write_idx=0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	8063      	strh	r3, [r4, #2]
    queue->queue_nb_element++; 
 8005d40:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 8005d42:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 8005d44:	3301      	adds	r3, #1
 8005d46:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 8005d48:	8823      	ldrh	r3, [r4, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d031      	beq.n	8005db2 <circular_queue_add+0xce>
    status=0;
 8005d4e:	2000      	movs	r0, #0
}
 8005d50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 8005d52:	5cf9      	ldrb	r1, [r7, r3]
 8005d54:	54d1      	strb	r1, [r2, r3]
 8005d56:	3301      	adds	r3, #1
 8005d58:	e7e7      	b.n	8005d2a <circular_queue_add+0x46>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 8005d5a:	1ce9      	adds	r1, r5, #3
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	dd33      	ble.n	8005dc8 <circular_queue_add+0xe4>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 8005d60:	2600      	movs	r6, #0
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 8005d62:	88e3      	ldrh	r3, [r4, #6]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 8005d64:	0020      	movs	r0, r4
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 8005d66:	3b02      	subs	r3, #2
 8005d68:	1a9a      	subs	r2, r3, r2
 8005d6a:	b293      	uxth	r3, r2
    add_elementSize_and_inc_writeIdx(queue,top_size);
 8005d6c:	0019      	movs	r1, r3
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 8005d6e:	9301      	str	r3, [sp, #4]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 8005d70:	f7ff ff98 	bl	8005ca4 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 8005d74:	8863      	ldrh	r3, [r4, #2]
 8005d76:	68a2      	ldr	r2, [r4, #8]
 8005d78:	18d3      	adds	r3, r2, r3
  while(size--)
 8005d7a:	9a01      	ldr	r2, [sp, #4]
 8005d7c:	4296      	cmp	r6, r2
 8005d7e:	d11b      	bne.n	8005db8 <circular_queue_add+0xd4>
    queue->queue_write_idx=0;
 8005d80:	2300      	movs	r3, #0
    buff_size-=top_size;
 8005d82:	1bad      	subs	r5, r5, r6
 8005d84:	b2ad      	uxth	r5, r5
    queue->queue_write_idx=0;
 8005d86:	8063      	strh	r3, [r4, #2]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 8005d88:	0029      	movs	r1, r5
 8005d8a:	0020      	movs	r0, r4
 8005d8c:	f7ff ff8a 	bl	8005ca4 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 8005d90:	68a3      	ldr	r3, [r4, #8]
 8005d92:	8862      	ldrh	r2, [r4, #2]
 8005d94:	19be      	adds	r6, r7, r6
 8005d96:	189a      	adds	r2, r3, r2
 8005d98:	2300      	movs	r3, #0
  while(size--)
 8005d9a:	429d      	cmp	r5, r3
 8005d9c:	d110      	bne.n	8005dc0 <circular_queue_add+0xdc>
    queue->queue_write_idx+=buff_size;
 8005d9e:	8863      	ldrh	r3, [r4, #2]
 8005da0:	18ed      	adds	r5, r5, r3
    queue->queue_nb_element+=2;
 8005da2:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 8005da4:	b2ad      	uxth	r5, r5
    queue->queue_nb_element+=2;
 8005da6:	3302      	adds	r3, #2
 8005da8:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 8005daa:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 8005dac:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 8005dae:	42ab      	cmp	r3, r5
 8005db0:	d1cd      	bne.n	8005d4e <circular_queue_add+0x6a>
      queue->queue_full=1;
 8005db2:	2301      	movs	r3, #1
 8005db4:	7323      	strb	r3, [r4, #12]
 8005db6:	e7ca      	b.n	8005d4e <circular_queue_add+0x6a>
    *out++= *in++;
 8005db8:	5dba      	ldrb	r2, [r7, r6]
 8005dba:	559a      	strb	r2, [r3, r6]
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7dc      	b.n	8005d7a <circular_queue_add+0x96>
 8005dc0:	5cf1      	ldrb	r1, [r6, r3]
 8005dc2:	54d1      	strb	r1, [r2, r3]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	e7e8      	b.n	8005d9a <circular_queue_add+0xb6>
    status=-1;
 8005dc8:	2001      	movs	r0, #1
 8005dca:	4240      	negs	r0, r0
  return status;
 8005dcc:	e7c0      	b.n	8005d50 <circular_queue_add+0x6c>

08005dce <circular_queue_get>:
{
 8005dce:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 8005dd0:	8883      	ldrh	r3, [r0, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d015      	beq.n	8005e02 <circular_queue_get+0x34>
    uint16_t read_idx=queue->queue_read_idx;
 8005dd6:	8804      	ldrh	r4, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 8005dd8:	6885      	ldr	r5, [r0, #8]
 8005dda:	1c63      	adds	r3, r4, #1
    if (read_idx==queue->queue_size)
 8005ddc:	88c6      	ldrh	r6, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 8005dde:	5d2c      	ldrb	r4, [r5, r4]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	0224      	lsls	r4, r4, #8
    if (read_idx==queue->queue_size)
 8005de4:	429e      	cmp	r6, r3
 8005de6:	d100      	bne.n	8005dea <circular_queue_get+0x1c>
      read_idx=0;
 8005de8:	2300      	movs	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 8005dea:	1c58      	adds	r0, r3, #1
 8005dec:	5ceb      	ldrb	r3, [r5, r3]
 8005dee:	b280      	uxth	r0, r0
 8005df0:	431c      	orrs	r4, r3
    if (read_idx==queue->queue_size)
 8005df2:	4286      	cmp	r6, r0
 8005df4:	d100      	bne.n	8005df8 <circular_queue_get+0x2a>
      read_idx=0;
 8005df6:	2000      	movs	r0, #0
    *buff= queue->queue_buff+read_idx;
 8005df8:	1828      	adds	r0, r5, r0
 8005dfa:	6008      	str	r0, [r1, #0]
    status=0;
 8005dfc:	2000      	movs	r0, #0
    * buff_size=size;
 8005dfe:	8014      	strh	r4, [r2, #0]
}
 8005e00:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 8005e02:	2001      	movs	r0, #1
 8005e04:	4240      	negs	r0, r0
  return status;
 8005e06:	e7fb      	b.n	8005e00 <circular_queue_get+0x32>

08005e08 <circular_queue_remove>:
{
 8005e08:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 8005e0a:	8882      	ldrh	r2, [r0, #4]
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	d023      	beq.n	8005e58 <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 8005e10:	8803      	ldrh	r3, [r0, #0]
 8005e12:	6885      	ldr	r5, [r0, #8]
 8005e14:	1c59      	adds	r1, r3, #1
 8005e16:	b289      	uxth	r1, r1
 8005e18:	8001      	strh	r1, [r0, #0]
 8005e1a:	5ceb      	ldrb	r3, [r5, r3]
    if (queue->queue_read_idx==queue->queue_size)
 8005e1c:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 8005e1e:	021b      	lsls	r3, r3, #8
    if (queue->queue_read_idx==queue->queue_size)
 8005e20:	42a1      	cmp	r1, r4
 8005e22:	d101      	bne.n	8005e28 <circular_queue_remove+0x20>
      queue->queue_read_idx=0;
 8005e24:	2100      	movs	r1, #0
 8005e26:	8001      	strh	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 8005e28:	8806      	ldrh	r6, [r0, #0]
 8005e2a:	1c71      	adds	r1, r6, #1
 8005e2c:	b289      	uxth	r1, r1
 8005e2e:	8001      	strh	r1, [r0, #0]
 8005e30:	5dad      	ldrb	r5, [r5, r6]
 8005e32:	432b      	orrs	r3, r5
    if (queue->queue_read_idx==queue->queue_size)
 8005e34:	428c      	cmp	r4, r1
 8005e36:	d101      	bne.n	8005e3c <circular_queue_remove+0x34>
      queue->queue_read_idx=0;
 8005e38:	2100      	movs	r1, #0
 8005e3a:	8001      	strh	r1, [r0, #0]
    queue->queue_read_idx+=size;
 8005e3c:	8801      	ldrh	r1, [r0, #0]
 8005e3e:	185b      	adds	r3, r3, r1
 8005e40:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d006      	beq.n	8005e54 <circular_queue_remove+0x4c>
        queue->queue_read_idx=0;
 8005e46:	8003      	strh	r3, [r0, #0]
    queue->queue_full=0;
 8005e48:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 8005e4a:	3a01      	subs	r2, #1
 8005e4c:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 8005e4e:	7303      	strb	r3, [r0, #12]
    status=0;
 8005e50:	0018      	movs	r0, r3
}
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
        queue->queue_read_idx=0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e7f6      	b.n	8005e46 <circular_queue_remove+0x3e>
      status=-1;
 8005e58:	2001      	movs	r0, #1
 8005e5a:	4240      	negs	r0, r0
  return status;
 8005e5c:	e7f9      	b.n	8005e52 <circular_queue_remove+0x4a>

08005e5e <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 8005e5e:	8880      	ldrh	r0, [r0, #4]
 8005e60:	4243      	negs	r3, r0
 8005e62:	4158      	adcs	r0, r3
 8005e64:	4240      	negs	r0, r0
}
 8005e66:	4770      	bx	lr

08005e68 <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8005e6c:	f000 faaa 	bl	80063c4 <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 8005e70:	2301      	movs	r3, #1
 8005e72:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8005e74:	0005      	movs	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8005e76:	6826      	ldr	r6, [r4, #0]
 8005e78:	f000 fab8 	bl	80063ec <HW_RTC_GetTimerElapsedTime>
 8005e7c:	1828      	adds	r0, r5, r0
 8005e7e:	4286      	cmp	r6, r0
 8005e80:	d203      	bcs.n	8005e8a <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8005e82:	f000 fab3 	bl	80063ec <HW_RTC_GetTimerElapsedTime>
 8005e86:	182d      	adds	r5, r5, r0
 8005e88:	6025      	str	r5, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 8005e8a:	6820      	ldr	r0, [r4, #0]
 8005e8c:	f000 fada 	bl	8006444 <HW_RTC_SetAlarm>
}
 8005e90:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e94 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 8005e94:	4a05      	ldr	r2, [pc, #20]	; (8005eac <TimerInsertNewHeadTimer+0x18>)
{
 8005e96:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 8005e98:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsNext2Expire = false;
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	7259      	strb	r1, [r3, #9]
  }

  obj->Next = cur;
 8005ea2:	6143      	str	r3, [r0, #20]
  TimerListHead = obj;
 8005ea4:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8005ea6:	f7ff ffdf 	bl	8005e68 <TimerSetTimeout>
}
 8005eaa:	bd10      	pop	{r4, pc}
 8005eac:	200001cc 	.word	0x200001cc

08005eb0 <TimerInit>:
  obj->Timestamp = 0;
 8005eb0:	2300      	movs	r3, #0
  obj->Callback = callback;
 8005eb2:	60c1      	str	r1, [r0, #12]
  obj->Timestamp = 0;
 8005eb4:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 8005eb6:	6043      	str	r3, [r0, #4]
  obj->IsStarted = false;
 8005eb8:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 8005eba:	7243      	strb	r3, [r0, #9]
  obj->Context = NULL;
 8005ebc:	6103      	str	r3, [r0, #16]
  obj->Next = NULL;
 8005ebe:	6143      	str	r3, [r0, #20]
}
 8005ec0:	4770      	bx	lr
	...

08005ec4 <TimerStart>:
{
 8005ec4:	b570      	push	{r4, r5, r6, lr}
 8005ec6:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005ecc:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d010      	beq.n	8005ef4 <TimerStart+0x30>
  TimerEvent_t* cur = TimerListHead;
 8005ed2:	4e18      	ldr	r6, [pc, #96]	; (8005f34 <TimerStart+0x70>)
 8005ed4:	6832      	ldr	r2, [r6, #0]
 8005ed6:	0013      	movs	r3, r2
  while( cur != NULL )
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10e      	bne.n	8005efa <TimerStart+0x36>
  obj->Timestamp = obj->ReloadValue;
 8005edc:	6861      	ldr	r1, [r4, #4]
  obj->IsNext2Expire = false;
 8005ede:	7263      	strb	r3, [r4, #9]
  obj->Timestamp = obj->ReloadValue;
 8005ee0:	6021      	str	r1, [r4, #0]
  obj->IsStarted = true;
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	7221      	strb	r1, [r4, #8]
  if( TimerListHead == NULL )
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	d10b      	bne.n	8005f02 <TimerStart+0x3e>
    HW_RTC_SetTimerContext( );
 8005eea:	f000 fb87 	bl	80065fc <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 8005eee:	0020      	movs	r0, r4
 8005ef0:	f7ff ffd0 	bl	8005e94 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef4:	f385 8810 	msr	PRIMASK, r5
}
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d0fa      	beq.n	8005ef4 <TimerStart+0x30>
    cur = cur->Next;
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	e7ea      	b.n	8005ed8 <TimerStart+0x14>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 8005f02:	f000 fa73 	bl	80063ec <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	18c0      	adds	r0, r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 8005f0a:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 8005f0c:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4290      	cmp	r0, r2
 8005f12:	d3ec      	bcc.n	8005eee <TimerStart+0x2a>
  TimerEvent_t* next = TimerListHead->Next;
 8005f14:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 8005f16:	6959      	ldr	r1, [r3, #20]
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	d102      	bne.n	8005f22 <TimerStart+0x5e>
  cur->Next = obj;
 8005f1c:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 8005f1e:	6161      	str	r1, [r4, #20]
 8005f20:	e7e8      	b.n	8005ef4 <TimerStart+0x30>
    if( obj->Timestamp  > next->Timestamp )
 8005f22:	6811      	ldr	r1, [r2, #0]
 8005f24:	4288      	cmp	r0, r1
 8005f26:	d902      	bls.n	8005f2e <TimerStart+0x6a>
        next = next->Next;
 8005f28:	0013      	movs	r3, r2
 8005f2a:	6952      	ldr	r2, [r2, #20]
 8005f2c:	e7f3      	b.n	8005f16 <TimerStart+0x52>
        cur->Next = obj;
 8005f2e:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 8005f30:	6162      	str	r2, [r4, #20]
 8005f32:	e7df      	b.n	8005ef4 <TimerStart+0x30>
 8005f34:	200001cc 	.word	0x200001cc

08005f38 <TimerIrqHandler>:
{
 8005f38:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 8005f3a:	f000 fba7 	bl	800668c <HW_RTC_GetTimerContext>
 8005f3e:	0005      	movs	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 8005f40:	f000 fb5c 	bl	80065fc <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 8005f44:	4c1c      	ldr	r4, [pc, #112]	; (8005fb8 <TimerIrqHandler+0x80>)
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	2a00      	cmp	r2, #0
 8005f4a:	d016      	beq.n	8005f7a <TimerIrqHandler+0x42>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 8005f4c:	1b40      	subs	r0, r0, r5
 8005f4e:	0013      	movs	r3, r2
        next->Timestamp = 0 ;
 8005f50:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <TimerIrqHandler+0x2e>
    TimerListHead = TimerListHead->Next;
 8005f58:	6951      	ldr	r1, [r2, #20]
    cur->IsStarted = false;
 8005f5a:	7213      	strb	r3, [r2, #8]
    exec_cb( cur->Callback, cur->Context );
 8005f5c:	68d3      	ldr	r3, [r2, #12]
    TimerListHead = TimerListHead->Next;
 8005f5e:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d108      	bne.n	8005f76 <TimerIrqHandler+0x3e>
 8005f64:	e7fe      	b.n	8005f64 <TimerIrqHandler+0x2c>
      if (next->Timestamp > DeltaContext)
 8005f66:	6819      	ldr	r1, [r3, #0]
 8005f68:	4281      	cmp	r1, r0
 8005f6a:	d902      	bls.n	8005f72 <TimerIrqHandler+0x3a>
        next->Timestamp -= DeltaContext;
 8005f6c:	1a09      	subs	r1, r1, r0
 8005f6e:	6019      	str	r1, [r3, #0]
 8005f70:	e7ef      	b.n	8005f52 <TimerIrqHandler+0x1a>
        next->Timestamp = 0 ;
 8005f72:	601d      	str	r5, [r3, #0]
 8005f74:	e7ed      	b.n	8005f52 <TimerIrqHandler+0x1a>
    exec_cb( cur->Callback, cur->Context );
 8005f76:	6910      	ldr	r0, [r2, #16]
 8005f78:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <TimerIrqHandler+0x56>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d111      	bne.n	8005faa <TimerIrqHandler+0x72>
}
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
   exec_cb( cur->Callback, cur->Context );
 8005f88:	6918      	ldr	r0, [r3, #16]
 8005f8a:	4790      	blx	r2
 8005f8c:	e7f5      	b.n	8005f7a <TimerIrqHandler+0x42>
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8005f8e:	681d      	ldr	r5, [r3, #0]
 8005f90:	f000 fa2c 	bl	80063ec <HW_RTC_GetTimerElapsedTime>
 8005f94:	4285      	cmp	r5, r0
 8005f96:	d2f3      	bcs.n	8005f80 <TimerIrqHandler+0x48>
   cur = TimerListHead;
 8005f98:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 8005f9a:	695a      	ldr	r2, [r3, #20]
 8005f9c:	6022      	str	r2, [r4, #0]
   cur->IsStarted = false;
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d1ef      	bne.n	8005f88 <TimerIrqHandler+0x50>
 8005fa8:	e7fe      	b.n	8005fa8 <TimerIrqHandler+0x70>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8005faa:	7a43      	ldrb	r3, [r0, #9]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1ea      	bne.n	8005f86 <TimerIrqHandler+0x4e>
    TimerSetTimeout( TimerListHead );
 8005fb0:	f7ff ff5a 	bl	8005e68 <TimerSetTimeout>
}
 8005fb4:	e7e7      	b.n	8005f86 <TimerIrqHandler+0x4e>
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	200001cc 	.word	0x200001cc

08005fbc <TimerStop>:
{
 8005fbc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fbe:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005fc2:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 8005fc4:	4c12      	ldr	r4, [pc, #72]	; (8006010 <TimerStop+0x54>)
 8005fc6:	6823      	ldr	r3, [r4, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <TimerStop+0x14>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d102      	bne.n	8005fd6 <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd0:	f385 8810 	msr	PRIMASK, r5
}  
 8005fd4:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 8005fda:	4283      	cmp	r3, r0
 8005fdc:	d110      	bne.n	8006000 <TimerStop+0x44>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 8005fde:	7a59      	ldrb	r1, [r3, #9]
 8005fe0:	695e      	ldr	r6, [r3, #20]
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	d009      	beq.n	8005ffa <TimerStop+0x3e>
      TimerListHead->IsNext2Expire = false;
 8005fe6:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 8005fe8:	4296      	cmp	r6, r2
 8005fea:	d004      	beq.n	8005ff6 <TimerStop+0x3a>
        TimerSetTimeout( TimerListHead );
 8005fec:	0030      	movs	r0, r6
        TimerListHead = TimerListHead->Next;
 8005fee:	6026      	str	r6, [r4, #0]
        TimerSetTimeout( TimerListHead );
 8005ff0:	f7ff ff3a 	bl	8005e68 <TimerSetTimeout>
 8005ff4:	e7ec      	b.n	8005fd0 <TimerStop+0x14>
        HW_RTC_StopAlarm( );
 8005ff6:	f000 fa0d 	bl	8006414 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8005ffa:	6026      	str	r6, [r4, #0]
 8005ffc:	e7e8      	b.n	8005fd0 <TimerStop+0x14>
 8005ffe:	0013      	movs	r3, r2
        cur = cur->Next;
 8006000:	695a      	ldr	r2, [r3, #20]
    while( cur != NULL )
 8006002:	2a00      	cmp	r2, #0
 8006004:	d0e4      	beq.n	8005fd0 <TimerStop+0x14>
      if( cur == obj )
 8006006:	4290      	cmp	r0, r2
 8006008:	d1f9      	bne.n	8005ffe <TimerStop+0x42>
        if( cur->Next != NULL )
 800600a:	6942      	ldr	r2, [r0, #20]
 800600c:	615a      	str	r2, [r3, #20]
 800600e:	e7df      	b.n	8005fd0 <TimerStop+0x14>
 8006010:	200001cc 	.word	0x200001cc

08006014 <TimerSetValue>:
{
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	0005      	movs	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8006018:	0008      	movs	r0, r1
 800601a:	f000 f9d5 	bl	80063c8 <HW_RTC_ms2Tick>
 800601e:	0004      	movs	r4, r0
  TimerStop( obj );
 8006020:	0028      	movs	r0, r5
 8006022:	f7ff ffcb 	bl	8005fbc <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 8006026:	f000 f9cd 	bl	80063c4 <HW_RTC_GetMinimumTimeout>
 800602a:	4284      	cmp	r4, r0
 800602c:	d200      	bcs.n	8006030 <TimerSetValue+0x1c>
 800602e:	0004      	movs	r4, r0
  obj->Timestamp = ticks;
 8006030:	602c      	str	r4, [r5, #0]
  obj->ReloadValue = ticks;
 8006032:	606c      	str	r4, [r5, #4]
}
 8006034:	bd70      	pop	{r4, r5, r6, pc}

08006036 <TimerGetCurrentTime>:
{
 8006036:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 8006038:	f000 f9e4 	bl	8006404 <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 800603c:	f000 f9cc 	bl	80063d8 <HW_RTC_Tick2ms>
}
 8006040:	bd10      	pop	{r4, pc}

08006042 <TimerGetElapsedTime>:
{
 8006042:	b570      	push	{r4, r5, r6, lr}
 8006044:	1e04      	subs	r4, r0, #0
  if ( past == 0 )
 8006046:	d009      	beq.n	800605c <TimerGetElapsedTime+0x1a>
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 8006048:	f000 f9dc 	bl	8006404 <HW_RTC_GetTimerValue>
 800604c:	0005      	movs	r5, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 800604e:	0020      	movs	r0, r4
 8006050:	f000 f9ba 	bl	80063c8 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 8006054:	1a28      	subs	r0, r5, r0
 8006056:	f000 f9bf 	bl	80063d8 <HW_RTC_Tick2ms>
 800605a:	0004      	movs	r4, r0
}
 800605c:	0020      	movs	r0, r4
 800605e:	bd70      	pop	{r4, r5, r6, pc}

08006060 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 8006060:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006062:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006066:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 8006068:	4c10      	ldr	r4, [pc, #64]	; (80060ac <Trace_TxCpltCallback+0x4c>)
 800606a:	0020      	movs	r0, r4
 800606c:	f7ff fecc 	bl	8005e08 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 8006070:	0020      	movs	r0, r4
 8006072:	f7ff fef4 	bl	8005e5e <circular_queue_sense>

  if ( status == 0) 
 8006076:	2800      	cmp	r0, #0
 8006078:	d10d      	bne.n	8006096 <Trace_TxCpltCallback+0x36>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 800607a:	466b      	mov	r3, sp
 800607c:	1c9e      	adds	r6, r3, #2
 800607e:	0032      	movs	r2, r6
 8006080:	a901      	add	r1, sp, #4
 8006082:	0020      	movs	r0, r4
 8006084:	f7ff fea3 	bl	8005dce <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006088:	f385 8810 	msr	PRIMASK, r5
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 800608c:	8831      	ldrh	r1, [r6, #0]
 800608e:	9801      	ldr	r0, [sp, #4]
 8006090:	f000 ff32 	bl	8006ef8 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 8006094:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 8006096:	2100      	movs	r1, #0
 8006098:	2020      	movs	r0, #32
 800609a:	f7ff fdbd 	bl	8005c18 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 800609e:	2201      	movs	r2, #1
 80060a0:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <Trace_TxCpltCallback+0x50>)
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	f385 8810 	msr	PRIMASK, r5
}
 80060a8:	e7f4      	b.n	8006094 <Trace_TxCpltCallback+0x34>
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	200001d0 	.word	0x200001d0
 80060b0:	20000034 	.word	0x20000034

080060b4 <TraceInit>:
{
 80060b4:	b510      	push	{r4, lr}
  OutputInit(Trace_TxCpltCallback);
 80060b6:	4805      	ldr	r0, [pc, #20]	; (80060cc <TraceInit+0x18>)
 80060b8:	f000 ff00 	bl	8006ebc <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	4904      	ldr	r1, [pc, #16]	; (80060d0 <TraceInit+0x1c>)
 80060c0:	0052      	lsls	r2, r2, #1
 80060c2:	4804      	ldr	r0, [pc, #16]	; (80060d4 <TraceInit+0x20>)
 80060c4:	f7ff fe07 	bl	8005cd6 <circular_queue_init>
}
 80060c8:	bd10      	pop	{r4, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	08006061 	.word	0x08006061
 80060d0:	200001e0 	.word	0x200001e0
 80060d4:	200001d0 	.word	0x200001d0

080060d8 <TraceSend>:
{
 80060d8:	b40f      	push	{r0, r1, r2, r3}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 80060da:	2180      	movs	r1, #128	; 0x80
{
 80060dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060de:	b0c5      	sub	sp, #276	; 0x114
 80060e0:	ab4a      	add	r3, sp, #296	; 0x128
 80060e2:	cb04      	ldmia	r3!, {r2}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 80060e4:	0049      	lsls	r1, r1, #1
 80060e6:	a804      	add	r0, sp, #16
  va_start( vaArgs, strFormat);
 80060e8:	9302      	str	r3, [sp, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 80060ea:	f001 f869 	bl	80071c0 <vsniprintf>
 80060ee:	466b      	mov	r3, sp
 80060f0:	1d9c      	adds	r4, r3, #6
 80060f2:	8020      	strh	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80060f8:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 80060fa:	4813      	ldr	r0, [pc, #76]	; (8006148 <TraceSend+0x70>)
 80060fc:	8822      	ldrh	r2, [r4, #0]
 80060fe:	a904      	add	r1, sp, #16
 8006100:	f7ff fdf0 	bl	8005ce4 <circular_queue_add>
 8006104:	1e06      	subs	r6, r0, #0
  if ((status==0 ) && (TracePeripheralReady==SET))
 8006106:	d11b      	bne.n	8006140 <TraceSend+0x68>
 8006108:	4b10      	ldr	r3, [pc, #64]	; (800614c <TraceSend+0x74>)
 800610a:	781d      	ldrb	r5, [r3, #0]
 800610c:	b2ed      	uxtb	r5, r5
 800610e:	2d01      	cmp	r5, #1
 8006110:	d116      	bne.n	8006140 <TraceSend+0x68>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 8006112:	0022      	movs	r2, r4
 8006114:	a903      	add	r1, sp, #12
 8006116:	480c      	ldr	r0, [pc, #48]	; (8006148 <TraceSend+0x70>)
 8006118:	f7ff fe59 	bl	8005dce <circular_queue_get>
    TracePeripheralReady = RESET;
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <TraceSend+0x74>)
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 800611e:	0029      	movs	r1, r5
 8006120:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 8006122:	701e      	strb	r6, [r3, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 8006124:	f7ff fd78 	bl	8005c18 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006128:	f387 8810 	msr	PRIMASK, r7
    OutputTrace(buffer, bufSize);
 800612c:	8821      	ldrh	r1, [r4, #0]
 800612e:	9803      	ldr	r0, [sp, #12]
 8006130:	f000 fee2 	bl	8006ef8 <vcom_Trace>
}
 8006134:	0030      	movs	r0, r6
 8006136:	b045      	add	sp, #276	; 0x114
 8006138:	bcf0      	pop	{r4, r5, r6, r7}
 800613a:	bc08      	pop	{r3}
 800613c:	b004      	add	sp, #16
 800613e:	4718      	bx	r3
 8006140:	f387 8810 	msr	PRIMASK, r7
  return status;
 8006144:	e7f6      	b.n	8006134 <TraceSend+0x5c>
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	200001d0 	.word	0x200001d0
 800614c:	20000034 	.word	0x20000034

08006150 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8006150:	2300      	movs	r3, #0
{
 8006152:	b510      	push	{r4, lr}
    while( size-- )
 8006154:	4293      	cmp	r3, r2
 8006156:	d100      	bne.n	800615a <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 8006158:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800615a:	5ccc      	ldrb	r4, [r1, r3]
 800615c:	54c4      	strb	r4, [r0, r3]
 800615e:	3301      	adds	r3, #1
 8006160:	e7f8      	b.n	8006154 <memcpy1+0x4>
	...

08006164 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 8006164:	b530      	push	{r4, r5, lr}
 8006166:	b087      	sub	sp, #28
  HAL_DBGMCU_EnableDBGStopMode();
  HAL_DBGMCU_EnableDBGStandbyMode();

#else /* DEBUG */
  /* sw interface off*/
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8006168:	220c      	movs	r2, #12
 800616a:	2100      	movs	r1, #0
 800616c:	a803      	add	r0, sp, #12
 800616e:	f000 ffe2 	bl	8007136 <memset>

  GPIO_InitStructure.Mode   = GPIO_MODE_ANALOG;
 8006172:	2303      	movs	r3, #3
 8006174:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull   = GPIO_NOPULL;
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8006176:	23c0      	movs	r3, #192	; 0xc0
  __GPIOA_CLK_ENABLE() ;
 8006178:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800617a:	20a0      	movs	r0, #160	; 0xa0
  __GPIOA_CLK_ENABLE() ;
 800617c:	4c10      	ldr	r4, [pc, #64]	; (80061c0 <DBG_Init+0x5c>)
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	9301      	str	r3, [sp, #4]
  __GPIOA_CLK_ENABLE() ;
 8006182:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006184:	a901      	add	r1, sp, #4
  __GPIOA_CLK_ENABLE() ;
 8006186:	432b      	orrs	r3, r5
 8006188:	62e3      	str	r3, [r4, #44]	; 0x2c
 800618a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800618c:	05c0      	lsls	r0, r0, #23
  __GPIOA_CLK_ENABLE() ;
 800618e:	402b      	ands	r3, r5
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006194:	f7fd ff4a 	bl	800402c <HAL_GPIO_Init>
  __GPIOA_CLK_DISABLE() ;
 8006198:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800619a:	43ab      	bics	r3, r5
 800619c:	62e3      	str	r3, [r4, #44]	; 0x2c

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80061a2:	03db      	lsls	r3, r3, #15
 80061a4:	4313      	orrs	r3, r2
 80061a6:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode();
 80061a8:	f7fd fc72 	bl	8003a90 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80061ac:	f7fd fc78 	bl	8003aa0 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80061b0:	f7fd fc7e 	bl	8003ab0 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 80061b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061b6:	4a03      	ldr	r2, [pc, #12]	; (80061c4 <DBG_Init+0x60>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	6363      	str	r3, [r4, #52]	; 0x34
#endif
}
 80061bc:	b007      	add	sp, #28
 80061be:	bd30      	pop	{r4, r5, pc}
 80061c0:	40021000 	.word	0x40021000
 80061c4:	ffbfffff 	.word	0xffbfffff

080061c8 <Error_Handler>:

void Error_Handler(void)
{
 80061c8:	b510      	push	{r4, lr}
  PRINTF("Error_Handler\n\r");
 80061ca:	4802      	ldr	r0, [pc, #8]	; (80061d4 <Error_Handler+0xc>)
 80061cc:	f7ff ff84 	bl	80060d8 <TraceSend>
 80061d0:	e7fe      	b.n	80061d0 <Error_Handler+0x8>
 80061d2:	46c0      	nop			; (mov r8, r8)
 80061d4:	08007ea9 	.word	0x08007ea9

080061d8 <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos = 0;

  if ((GPIO_Pin & 0xFF00) != 0)
 80061d8:	0001      	movs	r1, r0
 80061da:	23ff      	movs	r3, #255	; 0xff
 80061dc:	4399      	bics	r1, r3
 80061de:	000b      	movs	r3, r1
{
 80061e0:	0002      	movs	r2, r0
  {
    PinPos |= 0x8;
 80061e2:	1e58      	subs	r0, r3, #1
 80061e4:	4183      	sbcs	r3, r0
 80061e6:	00d8      	lsls	r0, r3, #3
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 80061e8:	4b07      	ldr	r3, [pc, #28]	; (8006208 <HW_GPIO_GetBitPos+0x30>)
 80061ea:	421a      	tst	r2, r3
 80061ec:	d001      	beq.n	80061f2 <HW_GPIO_GetBitPos+0x1a>
  {
    PinPos |= 0x4;
 80061ee:	2304      	movs	r3, #4
 80061f0:	4318      	orrs	r0, r3
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <HW_GPIO_GetBitPos+0x34>)
 80061f4:	421a      	tst	r2, r3
 80061f6:	d001      	beq.n	80061fc <HW_GPIO_GetBitPos+0x24>
  {
    PinPos |= 0x2;
 80061f8:	2302      	movs	r3, #2
 80061fa:	4318      	orrs	r0, r3
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 80061fc:	4b04      	ldr	r3, [pc, #16]	; (8006210 <HW_GPIO_GetBitPos+0x38>)
 80061fe:	421a      	tst	r2, r3
 8006200:	d001      	beq.n	8006206 <HW_GPIO_GetBitPos+0x2e>
  {
    PinPos |= 0x1;
 8006202:	2301      	movs	r3, #1
 8006204:	4318      	orrs	r0, r3
  }

  return PinPos;
}
 8006206:	4770      	bx	lr
 8006208:	fffff0f0 	.word	0xfffff0f0
 800620c:	ffffcccc 	.word	0xffffcccc
 8006210:	ffffaaaa 	.word	0xffffaaaa

08006214 <HW_GPIO_Init>:
{
 8006214:	b530      	push	{r4, r5, lr}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 8006216:	4c21      	ldr	r4, [pc, #132]	; (800629c <HW_GPIO_Init+0x88>)
{
 8006218:	b087      	sub	sp, #28
 800621a:	4b21      	ldr	r3, [pc, #132]	; (80062a0 <HW_GPIO_Init+0x8c>)
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800621c:	42a0      	cmp	r0, r4
 800621e:	d02a      	beq.n	8006276 <HW_GPIO_Init+0x62>
 8006220:	d80c      	bhi.n	800623c <HW_GPIO_Init+0x28>
 8006222:	24a0      	movs	r4, #160	; 0xa0
 8006224:	05e4      	lsls	r4, r4, #23
 8006226:	42a0      	cmp	r0, r4
 8006228:	d017      	beq.n	800625a <HW_GPIO_Init+0x46>
 800622a:	2580      	movs	r5, #128	; 0x80
 800622c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800622e:	432c      	orrs	r4, r5
 8006230:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	402b      	ands	r3, r5
 8006236:	9305      	str	r3, [sp, #20]
 8006238:	9b05      	ldr	r3, [sp, #20]
 800623a:	e016      	b.n	800626a <HW_GPIO_Init+0x56>
 800623c:	4c19      	ldr	r4, [pc, #100]	; (80062a4 <HW_GPIO_Init+0x90>)
 800623e:	42a0      	cmp	r0, r4
 8006240:	d022      	beq.n	8006288 <HW_GPIO_Init+0x74>
 8006242:	4c19      	ldr	r4, [pc, #100]	; (80062a8 <HW_GPIO_Init+0x94>)
 8006244:	42a0      	cmp	r0, r4
 8006246:	d1f0      	bne.n	800622a <HW_GPIO_Init+0x16>
 8006248:	2508      	movs	r5, #8
 800624a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800624c:	432c      	orrs	r4, r5
 800624e:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	402b      	ands	r3, r5
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	e007      	b.n	800626a <HW_GPIO_Init+0x56>
 800625a:	2501      	movs	r5, #1
 800625c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800625e:	432c      	orrs	r4, r5
 8006260:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	402b      	ands	r3, r5
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 800626a:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init(port, initStruct);
 800626c:	0011      	movs	r1, r2
 800626e:	f7fd fedd 	bl	800402c <HAL_GPIO_Init>
}
 8006272:	b007      	add	sp, #28
 8006274:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 8006276:	2502      	movs	r5, #2
 8006278:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800627a:	432c      	orrs	r4, r5
 800627c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	402b      	ands	r3, r5
 8006282:	9302      	str	r3, [sp, #8]
 8006284:	9b02      	ldr	r3, [sp, #8]
 8006286:	e7f0      	b.n	800626a <HW_GPIO_Init+0x56>
 8006288:	2504      	movs	r5, #4
 800628a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800628c:	432c      	orrs	r4, r5
 800628e:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	402b      	ands	r3, r5
 8006294:	9303      	str	r3, [sp, #12]
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	e7e7      	b.n	800626a <HW_GPIO_Init+0x56>
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	50000400 	.word	0x50000400
 80062a0:	40021000 	.word	0x40021000
 80062a4:	50000800 	.word	0x50000800
 80062a8:	50000c00 	.word	0x50000c00

080062ac <HW_GPIO_SetIrq>:
{
 80062ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 80062ae:	0008      	movs	r0, r1
{
 80062b0:	001c      	movs	r4, r3
 80062b2:	000d      	movs	r5, r1
 80062b4:	0016      	movs	r6, r2
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 80062b6:	f7ff ff8f 	bl	80061d8 <HW_GPIO_GetBitPos>
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <HW_GPIO_SetIrq+0x30>)
 80062bc:	0080      	lsls	r0, r0, #2
    GpioIrq[ BitPos ] = irqHandler;
 80062be:	501c      	str	r4, [r3, r0]
  if (irqHandler != NULL)
 80062c0:	2c00      	cmp	r4, #0
 80062c2:	d00a      	beq.n	80062da <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 80062c4:	0028      	movs	r0, r5
 80062c6:	f000 fca5 	bl	8006c14 <MSP_GetIRQn>
 80062ca:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 80062cc:	2200      	movs	r2, #0
 80062ce:	0031      	movs	r1, r6
 80062d0:	f7fd fd82 	bl	8003dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 80062d4:	0020      	movs	r0, r4
 80062d6:	f7fd fda9 	bl	8003e2c <HAL_NVIC_EnableIRQ>
}
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	200002e0 	.word	0x200002e0

080062e0 <HW_GPIO_IrqHandler>:
{
 80062e0:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 80062e2:	f7ff ff79 	bl	80061d8 <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 80062e6:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <HW_GPIO_IrqHandler+0x18>)
 80062e8:	0080      	lsls	r0, r0, #2
 80062ea:	58c3      	ldr	r3, [r0, r3]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HW_GPIO_IrqHandler+0x14>
    GpioIrq[ BitPos ](NULL);
 80062f0:	2000      	movs	r0, #0
 80062f2:	4798      	blx	r3
}
 80062f4:	bd10      	pop	{r4, pc}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	200002e0 	.word	0x200002e0

080062fc <HW_GPIO_Write>:
{
 80062fc:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	f7fd ff4e 	bl	80041a0 <HAL_GPIO_WritePin>
}
 8006304:	bd10      	pop	{r4, pc}
	...

08006308 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8006308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800630a:	4e27      	ldr	r6, [pc, #156]	; (80063a8 <HW_RTC_GetCalendarValue+0xa0>)
{
 800630c:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800630e:	2200      	movs	r2, #0
 8006310:	0030      	movs	r0, r6
{
 8006312:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8006314:	f7fe fef0 	bl	80050f8 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8006318:	4f24      	ldr	r7, [pc, #144]	; (80063ac <HW_RTC_GetCalendarValue+0xa4>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 800631a:	2200      	movs	r2, #0
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	0029      	movs	r1, r5
 8006320:	0030      	movs	r0, r6
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	f7fe ff12 	bl	800514c <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8006328:	2200      	movs	r2, #0
 800632a:	0021      	movs	r1, r4
 800632c:	0030      	movs	r0, r6
 800632e:	f7fe fee3 	bl	80050f8 <HAL_RTC_GetTime>
 8006332:	466b      	mov	r3, sp
 8006334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006336:	889b      	ldrh	r3, [r3, #4]
 8006338:	b292      	uxth	r2, r2

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800633a:	429a      	cmp	r2, r3
 800633c:	d1ec      	bne.n	8006318 <HW_RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800633e:	2103      	movs	r1, #3
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006340:	78ea      	ldrb	r2, [r5, #3]
 8006342:	481b      	ldr	r0, [pc, #108]	; (80063b0 <HW_RTC_GetCalendarValue+0xa8>)

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8006344:	786e      	ldrb	r6, [r5, #1]
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006346:	4350      	muls	r0, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8006348:	400a      	ands	r2, r1
 800634a:	4253      	negs	r3, r2
 800634c:	4153      	adcs	r3, r2
 800634e:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <HW_RTC_GetCalendarValue+0xac>)
 8006350:	425b      	negs	r3, r3
 8006352:	4013      	ands	r3, r2
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <HW_RTC_GetCalendarValue+0xb0>)
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8006356:	3e01      	subs	r6, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8006358:	189b      	adds	r3, r3, r2
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800635a:	223d      	movs	r2, #61	; 0x3d
 800635c:	4372      	muls	r2, r6
 800635e:	0076      	lsls	r6, r6, #1
 8006360:	40f3      	lsrs	r3, r6
 8006362:	3201      	adds	r2, #1

  seconds += (RTC_DateStruct->Date - 1);
 8006364:	78ad      	ldrb	r5, [r5, #2]
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8006366:	0fd7      	lsrs	r7, r2, #31
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8006368:	3003      	adds	r0, #3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800636a:	18ba      	adds	r2, r7, r2
 800636c:	3d01      	subs	r5, #1
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800636e:	0880      	lsrs	r0, r0, #2
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8006370:	1052      	asrs	r2, r2, #1
 8006372:	1828      	adds	r0, r5, r0
 8006374:	1810      	adds	r0, r2, r0
 8006376:	400b      	ands	r3, r1
  seconds += (RTC_DateStruct->Date - 1);
 8006378:	1ac3      	subs	r3, r0, r3

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 800637a:	4810      	ldr	r0, [pc, #64]	; (80063bc <HW_RTC_GetCalendarValue+0xb4>)

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800637c:	7822      	ldrb	r2, [r4, #0]
  seconds *= SECONDS_IN_1DAY;
 800637e:	4358      	muls	r0, r3
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8006380:	23e1      	movs	r3, #225	; 0xe1
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	4353      	muls	r3, r2
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8006386:	223c      	movs	r2, #60	; 0x3c
 8006388:	7861      	ldrb	r1, [r4, #1]



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800638a:	4d0d      	ldr	r5, [pc, #52]	; (80063c0 <HW_RTC_GetCalendarValue+0xb8>)
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800638c:	434a      	muls	r2, r1
 800638e:	189b      	adds	r3, r3, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 8006390:	78a2      	ldrb	r2, [r4, #2]
  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 8006392:	6864      	ldr	r4, [r4, #4]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8006394:	189b      	adds	r3, r3, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 8006396:	181b      	adds	r3, r3, r0
  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 8006398:	0d99      	lsrs	r1, r3, #22
 800639a:	0298      	lsls	r0, r3, #10
 800639c:	2300      	movs	r3, #0
 800639e:	1b2a      	subs	r2, r5, r4
 80063a0:	1880      	adds	r0, r0, r2
 80063a2:	4159      	adcs	r1, r3

  return (calendarValue);
}
 80063a4:	b003      	add	sp, #12
 80063a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a8:	20000320 	.word	0x20000320
 80063ac:	40002800 	.word	0x40002800
 80063b0:	000005b5 	.word	0x000005b5
 80063b4:	ffaaaab0 	.word	0xffaaaab0
 80063b8:	0099aaa0 	.word	0x0099aaa0
 80063bc:	00015180 	.word	0x00015180
 80063c0:	000003ff 	.word	0x000003ff

080063c4 <HW_RTC_GetMinimumTimeout>:
}
 80063c4:	2003      	movs	r0, #3
 80063c6:	4770      	bx	lr

080063c8 <HW_RTC_ms2Tick>:
{
 80063c8:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80063ca:	0e41      	lsrs	r1, r0, #25
 80063cc:	227d      	movs	r2, #125	; 0x7d
 80063ce:	01c0      	lsls	r0, r0, #7
 80063d0:	2300      	movs	r3, #0
 80063d2:	f7fa f857 	bl	8000484 <__aeabi_uldivmod>
}
 80063d6:	bd10      	pop	{r4, pc}

080063d8 <HW_RTC_Tick2ms>:
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 80063d8:	22fa      	movs	r2, #250	; 0xfa
  tick = tick & PREDIV_S;
 80063da:	0583      	lsls	r3, r0, #22
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 80063dc:	0092      	lsls	r2, r2, #2
  tick = tick & PREDIV_S;
 80063de:	0d9b      	lsrs	r3, r3, #22
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 80063e0:	4353      	muls	r3, r2
  uint32_t seconds = tick >> N_PREDIV_S;
 80063e2:	0a80      	lsrs	r0, r0, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 80063e4:	4350      	muls	r0, r2
 80063e6:	0a9b      	lsrs	r3, r3, #10
 80063e8:	1818      	adds	r0, r3, r0
}
 80063ea:	4770      	bx	lr

080063ec <HW_RTC_GetTimerElapsedTime>:
{
 80063ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80063ee:	a901      	add	r1, sp, #4
 80063f0:	4668      	mov	r0, sp
 80063f2:	f7ff ff89 	bl	8006308 <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80063f6:	4b02      	ldr	r3, [pc, #8]	; (8006400 <HW_RTC_GetTimerElapsedTime+0x14>)
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	1ac0      	subs	r0, r0, r3
}
 80063fc:	b007      	add	sp, #28
 80063fe:	bd00      	pop	{pc}
 8006400:	20000320 	.word	0x20000320

08006404 <HW_RTC_GetTimerValue>:
{
 8006404:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8006406:	a901      	add	r1, sp, #4
 8006408:	4668      	mov	r0, sp
 800640a:	f7ff ff7d 	bl	8006308 <HW_RTC_GetCalendarValue>
}
 800640e:	b007      	add	sp, #28
 8006410:	bd00      	pop	{pc}
	...

08006414 <HW_RTC_StopAlarm>:
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8006414:	2180      	movs	r1, #128	; 0x80
{
 8006416:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8006418:	4c07      	ldr	r4, [pc, #28]	; (8006438 <HW_RTC_StopAlarm+0x24>)
 800641a:	0049      	lsls	r1, r1, #1
 800641c:	0020      	movs	r0, r4
 800641e:	f7fe fbb1 	bl	8004b84 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 8006422:	6821      	ldr	r1, [r4, #0]
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <HW_RTC_StopAlarm+0x28>)
 8006426:	68ca      	ldr	r2, [r1, #12]
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	4313      	orrs	r3, r2
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800642c:	2280      	movs	r2, #128	; 0x80
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800642e:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006430:	4b03      	ldr	r3, [pc, #12]	; (8006440 <HW_RTC_StopAlarm+0x2c>)
 8006432:	0292      	lsls	r2, r2, #10
 8006434:	615a      	str	r2, [r3, #20]
}
 8006436:	bd10      	pop	{r4, pc}
 8006438:	20000320 	.word	0x20000320
 800643c:	fffffe7f 	.word	0xfffffe7f
 8006440:	40010400 	.word	0x40010400

08006444 <HW_RTC_SetAlarm>:
{
 8006444:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 8006446:	4c4c      	ldr	r4, [pc, #304]	; (8006578 <HW_RTC_SetAlarm+0x134>)
{
 8006448:	b087      	sub	sp, #28
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800644a:	0023      	movs	r3, r4
 800644c:	3350      	adds	r3, #80	; 0x50
{
 800644e:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 8006450:	2500      	movs	r5, #0
 8006452:	5f5d      	ldrsh	r5, [r3, r5]
 8006454:	f7ff ffca 	bl	80063ec <HW_RTC_GetTimerElapsedTime>
 8006458:	3503      	adds	r5, #3
 800645a:	1a30      	subs	r0, r6, r0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800645c:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800645e:	4285      	cmp	r5, r0
 8006460:	d300      	bcc.n	8006464 <HW_RTC_SetAlarm+0x20>
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 8006462:	2101      	movs	r1, #1
 8006464:	2004      	movs	r0, #4
 8006466:	f7ff fbd7 	bl	8005c18 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 800646a:	f7ff fbeb 	bl	8005c44 <LPM_GetMode>
 800646e:	2801      	cmp	r0, #1
 8006470:	d104      	bne.n	800647c <HW_RTC_SetAlarm+0x38>
    timeout = timeout -  McuWakeUpTimeCal;
 8006472:	0023      	movs	r3, r4
 8006474:	3350      	adds	r3, #80	; 0x50
 8006476:	2200      	movs	r2, #0
 8006478:	5e9b      	ldrsh	r3, [r3, r2]
 800647a:	1af6      	subs	r6, r6, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800647c:	0023      	movs	r3, r4
 800647e:	3354      	adds	r3, #84	; 0x54
 8006480:	795a      	ldrb	r2, [r3, #5]
 8006482:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8006484:	9200      	str	r2, [sp, #0]
 8006486:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8006488:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800648a:	9201      	str	r2, [sp, #4]
 800648c:	79da      	ldrb	r2, [r3, #7]
 800648e:	791d      	ldrb	r5, [r3, #4]
 8006490:	9202      	str	r2, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8006492:	7e5a      	ldrb	r2, [r3, #25]
 8006494:	7edb      	ldrb	r3, [r3, #27]
 8006496:	9203      	str	r2, [sp, #12]
 8006498:	9304      	str	r3, [sp, #16]
  HW_RTC_StopAlarm();
 800649a:	f7ff ffbb 	bl	8006414 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800649e:	4a37      	ldr	r2, [pc, #220]	; (800657c <HW_RTC_SetAlarm+0x138>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 80064a0:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 80064a2:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 80064a4:	0d9b      	lsrs	r3, r3, #22
 80064a6:	18fb      	adds	r3, r7, r3
 80064a8:	9205      	str	r2, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80064aa:	4a35      	ldr	r2, [pc, #212]	; (8006580 <HW_RTC_SetAlarm+0x13c>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 80064ac:	b29b      	uxth	r3, r3
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 80064ae:	0ab6      	lsrs	r6, r6, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 80064b0:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 80064b2:	4296      	cmp	r6, r2
 80064b4:	d83f      	bhi.n	8006536 <HW_RTC_SetAlarm+0xf2>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80064b6:	4a33      	ldr	r2, [pc, #204]	; (8006584 <HW_RTC_SetAlarm+0x140>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80064b8:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80064ba:	4296      	cmp	r6, r2
 80064bc:	d840      	bhi.n	8006540 <HW_RTC_SetAlarm+0xfc>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 80064be:	466a      	mov	r2, sp
 80064c0:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80064c2:	2e3b      	cmp	r6, #59	; 0x3b
 80064c4:	d841      	bhi.n	800654a <HW_RTC_SetAlarm+0x106>
 80064c6:	0a9a      	lsrs	r2, r3, #10
 80064c8:	0294      	lsls	r4, r2, #10
 80064ca:	1b1c      	subs	r4, r3, r4
 80064cc:	9b01      	ldr	r3, [sp, #4]
 80064ce:	b2a4      	uxth	r4, r4
 80064d0:	18d2      	adds	r2, r2, r3
 80064d2:	1996      	adds	r6, r2, r6
 80064d4:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80064d6:	2e3b      	cmp	r6, #59	; 0x3b
 80064d8:	d83b      	bhi.n	8006552 <HW_RTC_SetAlarm+0x10e>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80064da:	2f3b      	cmp	r7, #59	; 0x3b
 80064dc:	d83e      	bhi.n	800655c <HW_RTC_SetAlarm+0x118>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80064de:	2d17      	cmp	r5, #23
 80064e0:	d841      	bhi.n	8006566 <HW_RTC_SetAlarm+0x122>
 80064e2:	9a03      	ldr	r2, [sp, #12]
  if (RTC_DateStruct.Year % 4 == 0)
 80064e4:	9904      	ldr	r1, [sp, #16]
 80064e6:	3a01      	subs	r2, #1
 80064e8:	4b27      	ldr	r3, [pc, #156]	; (8006588 <HW_RTC_SetAlarm+0x144>)
 80064ea:	0789      	lsls	r1, r1, #30
 80064ec:	d140      	bne.n	8006570 <HW_RTC_SetAlarm+0x12c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80064ee:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80064f0:	4288      	cmp	r0, r1
 80064f2:	d902      	bls.n	80064fa <HW_RTC_SetAlarm+0xb6>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80064f4:	f7f9 ff82 	bl	80003fc <__aeabi_idivmod>
 80064f8:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 80064fa:	9a05      	ldr	r2, [sp, #20]
 80064fc:	4b1e      	ldr	r3, [pc, #120]	; (8006578 <HW_RTC_SetAlarm+0x134>)
 80064fe:	1b14      	subs	r4, r2, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 8006500:	22a0      	movs	r2, #160	; 0xa0
 8006502:	0512      	lsls	r2, r2, #20
 8006504:	641a      	str	r2, [r3, #64]	; 0x40
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8006506:	001a      	movs	r2, r3
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8006508:	0019      	movs	r1, r3
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800650a:	3229      	adds	r2, #41	; 0x29
 800650c:	77d0      	strb	r0, [r2, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800650e:	9a02      	ldr	r2, [sp, #8]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006510:	2080      	movs	r0, #128	; 0x80
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8006512:	3128      	adds	r1, #40	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8006514:	70ca      	strb	r2, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006516:	2200      	movs	r2, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006518:	0040      	lsls	r0, r0, #1
 800651a:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800651c:	0018      	movs	r0, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 800651e:	62dc      	str	r4, [r3, #44]	; 0x2c
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8006520:	708e      	strb	r6, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8006522:	704f      	strb	r7, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8006524:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006526:	645a      	str	r2, [r3, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8006528:	63da      	str	r2, [r3, #60]	; 0x3c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800652a:	635a      	str	r2, [r3, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800652e:	f7fe fd13 	bl	8004f58 <HAL_RTC_SetAlarm_IT>
}
 8006532:	b007      	add	sp, #28
 8006534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8006536:	4915      	ldr	r1, [pc, #84]	; (800658c <HW_RTC_SetAlarm+0x148>)
    rtcAlarmDays++;
 8006538:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 800653a:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 800653c:	b280      	uxth	r0, r0
 800653e:	e7b8      	b.n	80064b2 <HW_RTC_SetAlarm+0x6e>
    timeoutValue -= SECONDS_IN_1HOUR;
 8006540:	4913      	ldr	r1, [pc, #76]	; (8006590 <HW_RTC_SetAlarm+0x14c>)
    rtcAlarmHours++;
 8006542:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8006544:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 8006546:	b2ad      	uxth	r5, r5
 8006548:	e7b7      	b.n	80064ba <HW_RTC_SetAlarm+0x76>
    rtcAlarmMinutes++;
 800654a:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800654c:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 800654e:	b2bf      	uxth	r7, r7
 8006550:	e7b7      	b.n	80064c2 <HW_RTC_SetAlarm+0x7e>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006552:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8006554:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006556:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 8006558:	b2bf      	uxth	r7, r7
 800655a:	e7bc      	b.n	80064d6 <HW_RTC_SetAlarm+0x92>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800655c:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 800655e:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006560:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8006562:	b2ad      	uxth	r5, r5
 8006564:	e7b9      	b.n	80064da <HW_RTC_SetAlarm+0x96>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8006566:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 8006568:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 800656a:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 800656c:	b280      	uxth	r0, r0
 800656e:	e7b6      	b.n	80064de <HW_RTC_SetAlarm+0x9a>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8006570:	189b      	adds	r3, r3, r2
 8006572:	7b19      	ldrb	r1, [r3, #12]
 8006574:	e7bc      	b.n	80064f0 <HW_RTC_SetAlarm+0xac>
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	20000320 	.word	0x20000320
 800657c:	000003ff 	.word	0x000003ff
 8006580:	0001517f 	.word	0x0001517f
 8006584:	00000e0f 	.word	0x00000e0f
 8006588:	08007e06 	.word	0x08007e06
 800658c:	fffeae80 	.word	0xfffeae80
 8006590:	fffff1f0 	.word	0xfffff1f0

08006594 <HW_RTC_IrqHandler>:
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8006594:	2004      	movs	r0, #4
{
 8006596:	b510      	push	{r4, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8006598:	2100      	movs	r1, #0
 800659a:	f7ff fb3d 	bl	8005c18 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800659e:	2280      	movs	r2, #128	; 0x80
 80065a0:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <HW_RTC_IrqHandler+0x34>)
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80065a2:	480a      	ldr	r0, [pc, #40]	; (80065cc <HW_RTC_IrqHandler+0x38>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80065a4:	0292      	lsls	r2, r2, #10
 80065a6:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80065a8:	6803      	ldr	r3, [r0, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	04d2      	lsls	r2, r2, #19
 80065ae:	d509      	bpl.n	80065c4 <HW_RTC_IrqHandler+0x30>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	05d2      	lsls	r2, r2, #23
 80065b4:	d506      	bpl.n	80065c4 <HW_RTC_IrqHandler+0x30>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80065b6:	68d9      	ldr	r1, [r3, #12]
 80065b8:	4a05      	ldr	r2, [pc, #20]	; (80065d0 <HW_RTC_IrqHandler+0x3c>)
 80065ba:	b2c9      	uxtb	r1, r1
 80065bc:	430a      	orrs	r2, r1
 80065be:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 80065c0:	f000 fb20 	bl	8006c04 <HAL_RTC_AlarmAEventCallback>
}
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	40010400 	.word	0x40010400
 80065cc:	20000320 	.word	0x20000320
 80065d0:	fffffe7f 	.word	0xfffffe7f

080065d4 <HW_RTC_DelayMs>:
{
 80065d4:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80065d6:	0e41      	lsrs	r1, r0, #25
 80065d8:	227d      	movs	r2, #125	; 0x7d
 80065da:	2300      	movs	r3, #0
 80065dc:	01c0      	lsls	r0, r0, #7
 80065de:	f7f9 ff51 	bl	8000484 <__aeabi_uldivmod>
 80065e2:	0004      	movs	r4, r0
  timeout = HW_RTC_GetTimerValue();
 80065e4:	f7ff ff0e 	bl	8006404 <HW_RTC_GetTimerValue>
 80065e8:	0005      	movs	r5, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 80065ea:	f7ff ff0b 	bl	8006404 <HW_RTC_GetTimerValue>
 80065ee:	1b40      	subs	r0, r0, r5
 80065f0:	42a0      	cmp	r0, r4
 80065f2:	d300      	bcc.n	80065f6 <HW_RTC_DelayMs+0x22>
}
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	e7f7      	b.n	80065ea <HW_RTC_DelayMs+0x16>
	...

080065fc <HW_RTC_SetTimerContext>:
{
 80065fc:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80065fe:	4c04      	ldr	r4, [pc, #16]	; (8006610 <HW_RTC_SetTimerContext+0x14>)
 8006600:	0021      	movs	r1, r4
 8006602:	0020      	movs	r0, r4
 8006604:	3158      	adds	r1, #88	; 0x58
 8006606:	306c      	adds	r0, #108	; 0x6c
 8006608:	f7ff fe7e 	bl	8006308 <HW_RTC_GetCalendarValue>
 800660c:	6560      	str	r0, [r4, #84]	; 0x54
}
 800660e:	bd10      	pop	{r4, pc}
 8006610:	20000320 	.word	0x20000320

08006614 <HW_RTC_Init>:
{
 8006614:	b570      	push	{r4, r5, r6, lr}
  if (HW_RTC_Initalized == false)
 8006616:	4c19      	ldr	r4, [pc, #100]	; (800667c <HW_RTC_Init+0x68>)
{
 8006618:	b086      	sub	sp, #24
  if (HW_RTC_Initalized == false)
 800661a:	0026      	movs	r6, r4
 800661c:	3670      	adds	r6, #112	; 0x70
 800661e:	7835      	ldrb	r5, [r6, #0]
 8006620:	2d00      	cmp	r5, #0
 8006622:	d128      	bne.n	8006676 <HW_RTC_Init+0x62>
  RtcHandle.Instance = RTC;
 8006624:	4b16      	ldr	r3, [pc, #88]	; (8006680 <HW_RTC_Init+0x6c>)
  HAL_RTC_Init(&RtcHandle);
 8006626:	0020      	movs	r0, r4
  RtcHandle.Instance = RTC;
 8006628:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 800662a:	231f      	movs	r3, #31
 800662c:	60a3      	str	r3, [r4, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800662e:	4b15      	ldr	r3, [pc, #84]	; (8006684 <HW_RTC_Init+0x70>)
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8006630:	6065      	str	r5, [r4, #4]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8006632:	60e3      	str	r3, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8006634:	6125      	str	r5, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006636:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006638:	61e5      	str	r5, [r4, #28]
  HAL_RTC_Init(&RtcHandle);
 800663a:	f7fe fb39 	bl	8004cb0 <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800663e:	4b12      	ldr	r3, [pc, #72]	; (8006688 <HW_RTC_Init+0x74>)
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 8006640:	002a      	movs	r2, r5
 8006642:	4669      	mov	r1, sp
 8006644:	0020      	movs	r0, r4
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8006646:	9300      	str	r3, [sp, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 8006648:	f7fe fc1a 	bl	8004e80 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800664c:	002a      	movs	r2, r5
 800664e:	a901      	add	r1, sp, #4
 8006650:	0020      	movs	r0, r4
  RTC_TimeStruct.Hours = 0;
 8006652:	9501      	str	r5, [sp, #4]
  RTC_TimeStruct.TimeFormat = 0;
 8006654:	9502      	str	r5, [sp, #8]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8006656:	9505      	str	r5, [sp, #20]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8006658:	9504      	str	r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800665a:	f7fe fb91 	bl	8004d80 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 800665e:	0020      	movs	r0, r4
 8006660:	f7fe fd96 	bl	8005190 <HAL_RTCEx_EnableBypassShadow>
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8006664:	2180      	movs	r1, #128	; 0x80
 8006666:	0020      	movs	r0, r4
 8006668:	0049      	lsls	r1, r1, #1
 800666a:	f7fe fa8b 	bl	8004b84 <HAL_RTC_DeactivateAlarm>
    HW_RTC_SetTimerContext();
 800666e:	f7ff ffc5 	bl	80065fc <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 8006672:	2301      	movs	r3, #1
 8006674:	7033      	strb	r3, [r6, #0]
}
 8006676:	b006      	add	sp, #24
 8006678:	bd70      	pop	{r4, r5, r6, pc}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	20000320 	.word	0x20000320
 8006680:	40002800 	.word	0x40002800
 8006684:	000003ff 	.word	0x000003ff
 8006688:	00010101 	.word	0x00010101

0800668c <HW_RTC_GetTimerContext>:
  return RtcTimerContext.Rtc_Time;
 800668c:	4b01      	ldr	r3, [pc, #4]	; (8006694 <HW_RTC_GetTimerContext+0x8>)
 800668e:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
 8006690:	4770      	bx	lr
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	20000320 	.word	0x20000320

08006698 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 8006698:	b530      	push	{r4, r5, lr}
 800669a:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = {0};
 800669c:	2214      	movs	r2, #20
 800669e:	2100      	movs	r1, #0
 80066a0:	a801      	add	r0, sp, #4
  initStruct.Mode = GPIO_MODE_AF_PP;
  initStruct.Pull = GPIO_NOPULL  ;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Alternate = SPI1_AF ;

  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80066a2:	24a0      	movs	r4, #160	; 0xa0
  GPIO_InitTypeDef initStruct = {0};
 80066a4:	f000 fd47 	bl	8007136 <memset>
  initStruct.Mode = GPIO_MODE_AF_PP;
 80066a8:	2302      	movs	r3, #2
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80066aa:	05e4      	lsls	r4, r4, #23
  initStruct.Mode = GPIO_MODE_AF_PP;
 80066ac:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80066ae:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 80066b0:	3301      	adds	r3, #1
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80066b2:	0020      	movs	r0, r4
 80066b4:	2120      	movs	r1, #32
  initStruct.Speed = GPIO_SPEED_HIGH;
 80066b6:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80066b8:	f7ff fdac 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 80066bc:	aa01      	add	r2, sp, #4
 80066be:	0020      	movs	r0, r4
 80066c0:	2140      	movs	r1, #64	; 0x40
 80066c2:	f7ff fda7 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 80066c6:	aa01      	add	r2, sp, #4
 80066c8:	0020      	movs	r0, r4
 80066ca:	2180      	movs	r1, #128	; 0x80
 80066cc:	f7ff fda2 	bl	8006214 <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066d0:	2501      	movs	r5, #1
  initStruct.Pull = GPIO_NOPULL;
 80066d2:	2300      	movs	r3, #0

  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 80066d4:	4c07      	ldr	r4, [pc, #28]	; (80066f4 <HW_SPI_IoInit+0x5c>)
 80066d6:	aa01      	add	r2, sp, #4
 80066d8:	0020      	movs	r0, r4
 80066da:	2140      	movs	r1, #64	; 0x40
  initStruct.Pull = GPIO_NOPULL;
 80066dc:	9303      	str	r3, [sp, #12]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066de:	9502      	str	r5, [sp, #8]
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 80066e0:	f7ff fd98 	bl	8006214 <HW_GPIO_Init>

  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 80066e4:	002a      	movs	r2, r5
 80066e6:	2140      	movs	r1, #64	; 0x40
 80066e8:	0020      	movs	r0, r4
 80066ea:	f7ff fe07 	bl	80062fc <HW_GPIO_Write>
}
 80066ee:	b007      	add	sp, #28
 80066f0:	bd30      	pop	{r4, r5, pc}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	50000400 	.word	0x50000400

080066f8 <HW_SPI_Init>:
  hspi.Instance = SPI1;
 80066f8:	4b1c      	ldr	r3, [pc, #112]	; (800676c <HW_SPI_Init+0x74>)
 80066fa:	481d      	ldr	r0, [pc, #116]	; (8006770 <HW_SPI_Init+0x78>)
{
 80066fc:	b510      	push	{r4, lr}
  hspi.Instance = SPI1;
 80066fe:	6003      	str	r3, [r0, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 8006700:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <HW_SPI_Init+0x7c>)
  uint32_t baudRate;

  while (SysClkTmp > hz)
 8006702:	491d      	ldr	r1, [pc, #116]	; (8006778 <HW_SPI_Init+0x80>)
  uint32_t SysClkTmp = SystemCoreClock;
 8006704:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 8006706:	2300      	movs	r3, #0
  while (SysClkTmp > hz)
 8006708:	428a      	cmp	r2, r1
 800670a:	d903      	bls.n	8006714 <HW_SPI_Init+0x1c>
  {
    divisor++;
 800670c:	3301      	adds	r3, #1
    SysClkTmp = (SysClkTmp >> 1);
 800670e:	0852      	lsrs	r2, r2, #1

    if (divisor >= 7)
 8006710:	2b07      	cmp	r3, #7
 8006712:	d1f9      	bne.n	8006708 <HW_SPI_Init+0x10>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 8006714:	2204      	movs	r2, #4
 8006716:	401a      	ands	r2, r3
 8006718:	d000      	beq.n	800671c <HW_SPI_Init+0x24>
 800671a:	2220      	movs	r2, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 800671c:	2102      	movs	r1, #2
 800671e:	4019      	ands	r1, r3
 8006720:	d000      	beq.n	8006724 <HW_SPI_Init+0x2c>
 8006722:	2110      	movs	r1, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 8006724:	430a      	orrs	r2, r1
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 8006726:	2101      	movs	r1, #1
 8006728:	400b      	ands	r3, r1
 800672a:	d000      	beq.n	800672e <HW_SPI_Init+0x36>
 800672c:	2308      	movs	r3, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800672e:	4313      	orrs	r3, r2
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 8006730:	61c3      	str	r3, [r0, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8006732:	2300      	movs	r3, #0
  hspi.Init.Mode           = SPI_MODE_MASTER;
 8006734:	2282      	movs	r2, #130	; 0x82
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8006736:	6083      	str	r3, [r0, #8]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8006738:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800673a:	6143      	str	r3, [r0, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800673c:	60c3      	str	r3, [r0, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800673e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8006740:	6203      	str	r3, [r0, #32]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 8006742:	6243      	str	r3, [r0, #36]	; 0x24
  SPI_CLK_ENABLE();
 8006744:	2380      	movs	r3, #128	; 0x80
  hspi.Init.Mode           = SPI_MODE_MASTER;
 8006746:	0052      	lsls	r2, r2, #1
 8006748:	6042      	str	r2, [r0, #4]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 800674a:	32fc      	adds	r2, #252	; 0xfc
 800674c:	6182      	str	r2, [r0, #24]
  SPI_CLK_ENABLE();
 800674e:	4a0b      	ldr	r2, [pc, #44]	; (800677c <HW_SPI_Init+0x84>)
 8006750:	015b      	lsls	r3, r3, #5
 8006752:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006754:	430b      	orrs	r3, r1
 8006756:	6353      	str	r3, [r2, #52]	; 0x34
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 8006758:	f7fe fd96 	bl	8005288 <HAL_SPI_Init>
 800675c:	2800      	cmp	r0, #0
 800675e:	d001      	beq.n	8006764 <HW_SPI_Init+0x6c>
    Error_Handler();
 8006760:	f7ff fd32 	bl	80061c8 <Error_Handler>
  HW_SPI_IoInit();
 8006764:	f7ff ff98 	bl	8006698 <HW_SPI_IoInit>
}
 8006768:	bd10      	pop	{r4, pc}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	40013000 	.word	0x40013000
 8006770:	20000394 	.word	0x20000394
 8006774:	20000030 	.word	0x20000030
 8006778:	00989680 	.word	0x00989680
 800677c:	40021000 	.word	0x40021000

08006780 <HW_SPI_IoDeInit>:
{
 8006780:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8006782:	24a0      	movs	r4, #160	; 0xa0
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006784:	2601      	movs	r6, #1
{
 8006786:	b086      	sub	sp, #24
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8006788:	05e4      	lsls	r4, r4, #23
  GPIO_InitTypeDef initStruct = {0};
 800678a:	2214      	movs	r2, #20
 800678c:	2100      	movs	r1, #0
 800678e:	a801      	add	r0, sp, #4
 8006790:	f000 fcd1 	bl	8007136 <memset>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8006794:	aa01      	add	r2, sp, #4
 8006796:	0020      	movs	r0, r4
 8006798:	2180      	movs	r1, #128	; 0x80
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800679a:	9602      	str	r6, [sp, #8]
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800679c:	f7ff fd3a 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_MOSI_PORT, RADIO_MOSI_PIN, 0);
 80067a0:	0020      	movs	r0, r4
 80067a2:	2200      	movs	r2, #0
 80067a4:	2180      	movs	r1, #128	; 0x80
 80067a6:	f7ff fda9 	bl	80062fc <HW_GPIO_Write>
  initStruct.Pull = GPIO_PULLDOWN;
 80067aa:	2302      	movs	r3, #2
  initStruct.Pull = GPIO_NOPULL  ;
 80067ac:	2500      	movs	r5, #0
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 80067ae:	aa01      	add	r2, sp, #4
 80067b0:	0020      	movs	r0, r4
 80067b2:	2140      	movs	r1, #64	; 0x40
  initStruct.Pull = GPIO_PULLDOWN;
 80067b4:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 80067b6:	f7ff fd2d 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_MISO_PORT, RADIO_MISO_PIN, 0);
 80067ba:	0020      	movs	r0, r4
 80067bc:	2200      	movs	r2, #0
 80067be:	2140      	movs	r1, #64	; 0x40
 80067c0:	f7ff fd9c 	bl	80062fc <HW_GPIO_Write>
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80067c4:	aa01      	add	r2, sp, #4
 80067c6:	0020      	movs	r0, r4
 80067c8:	2120      	movs	r1, #32
  initStruct.Pull = GPIO_NOPULL  ;
 80067ca:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80067cc:	f7ff fd22 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0);
 80067d0:	0020      	movs	r0, r4
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 80067d2:	4c09      	ldr	r4, [pc, #36]	; (80067f8 <HW_SPI_IoDeInit+0x78>)
  HW_GPIO_Write(RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0);
 80067d4:	002a      	movs	r2, r5
 80067d6:	2120      	movs	r1, #32
 80067d8:	f7ff fd90 	bl	80062fc <HW_GPIO_Write>
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 80067dc:	aa01      	add	r2, sp, #4
 80067de:	0020      	movs	r0, r4
 80067e0:	2140      	movs	r1, #64	; 0x40
  initStruct.Pull = GPIO_NOPULL  ;
 80067e2:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 80067e4:	f7ff fd16 	bl	8006214 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 80067e8:	0032      	movs	r2, r6
 80067ea:	2140      	movs	r1, #64	; 0x40
 80067ec:	0020      	movs	r0, r4
 80067ee:	f7ff fd85 	bl	80062fc <HW_GPIO_Write>
}
 80067f2:	b006      	add	sp, #24
 80067f4:	bd70      	pop	{r4, r5, r6, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	50000400 	.word	0x50000400

080067fc <HW_SPI_InOut>:
{
 80067fc:	b510      	push	{r4, lr}
 80067fe:	210e      	movs	r1, #14
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 8006800:	2416      	movs	r4, #22
 8006802:	2301      	movs	r3, #1
{
 8006804:	b086      	sub	sp, #24
 8006806:	4469      	add	r1, sp
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 8006808:	446c      	add	r4, sp
 800680a:	425b      	negs	r3, r3
{
 800680c:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800680e:	0022      	movs	r2, r4
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	4803      	ldr	r0, [pc, #12]	; (8006820 <HW_SPI_InOut+0x24>)
 8006814:	3302      	adds	r3, #2
 8006816:	f7fe fd77 	bl	8005308 <HAL_SPI_TransmitReceive>
  return rxData;
 800681a:	8820      	ldrh	r0, [r4, #0]
}
 800681c:	b006      	add	sp, #24
 800681e:	bd10      	pop	{r4, pc}
 8006820:	20000394 	.word	0x20000394

08006824 <OnledEvent>:
  State = RX_ERROR;
  PRINTF("OnRxError\n\r");
}

static void OnledEvent(void *context)
{
 8006824:	b510      	push	{r4, lr}
  LED_Toggle(LED_BLUE) ;
  LED_Toggle(LED_RED1) ;
  LED_Toggle(LED_RED2) ;
  LED_Toggle(LED_GREEN) ;

  TimerStart(&timerLed);
 8006826:	4802      	ldr	r0, [pc, #8]	; (8006830 <OnledEvent+0xc>)
 8006828:	f7ff fb4c 	bl	8005ec4 <TimerStart>
}
 800682c:	bd10      	pop	{r4, pc}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	200003ec 	.word	0x200003ec

08006834 <OnTxDone>:
  Radio.Sleep();
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <OnTxDone+0x18>)
{
 8006836:	b510      	push	{r4, lr}
  Radio.Sleep();
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	4798      	blx	r3
  State = TX;
 800683c:	2204      	movs	r2, #4
 800683e:	4b04      	ldr	r3, [pc, #16]	; (8006850 <OnTxDone+0x1c>)
  PRINTF("OnTxDone\n\r");
 8006840:	4804      	ldr	r0, [pc, #16]	; (8006854 <OnTxDone+0x20>)
  State = TX;
 8006842:	761a      	strb	r2, [r3, #24]
  PRINTF("OnTxDone\n\r");
 8006844:	f7ff fc48 	bl	80060d8 <TraceSend>
}
 8006848:	bd10      	pop	{r4, pc}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	08007d60 	.word	0x08007d60
 8006850:	200003ec 	.word	0x200003ec
 8006854:	08007eb9 	.word	0x08007eb9

08006858 <OnTxTimeout>:
  Radio.Sleep();
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <OnTxTimeout+0x18>)
{
 800685a:	b510      	push	{r4, lr}
  Radio.Sleep();
 800685c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685e:	4798      	blx	r3
  State = TX_TIMEOUT;
 8006860:	2205      	movs	r2, #5
 8006862:	4b04      	ldr	r3, [pc, #16]	; (8006874 <OnTxTimeout+0x1c>)
  PRINTF("OnTxTimeout\n\r");
 8006864:	4804      	ldr	r0, [pc, #16]	; (8006878 <OnTxTimeout+0x20>)
  State = TX_TIMEOUT;
 8006866:	761a      	strb	r2, [r3, #24]
  PRINTF("OnTxTimeout\n\r");
 8006868:	f7ff fc36 	bl	80060d8 <TraceSend>
}
 800686c:	bd10      	pop	{r4, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	08007d60 	.word	0x08007d60
 8006874:	200003ec 	.word	0x200003ec
 8006878:	08007ec4 	.word	0x08007ec4

0800687c <OnRxTimeout>:
  Radio.Sleep();
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <OnRxTimeout+0x18>)
{
 800687e:	b510      	push	{r4, lr}
  Radio.Sleep();
 8006880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006882:	4798      	blx	r3
  State = RX_TIMEOUT;
 8006884:	2202      	movs	r2, #2
 8006886:	4b04      	ldr	r3, [pc, #16]	; (8006898 <OnRxTimeout+0x1c>)
  PRINTF("OnRxTimeout\n\r");
 8006888:	4804      	ldr	r0, [pc, #16]	; (800689c <OnRxTimeout+0x20>)
  State = RX_TIMEOUT;
 800688a:	761a      	strb	r2, [r3, #24]
  PRINTF("OnRxTimeout\n\r");
 800688c:	f7ff fc24 	bl	80060d8 <TraceSend>
}
 8006890:	bd10      	pop	{r4, pc}
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	08007d60 	.word	0x08007d60
 8006898:	200003ec 	.word	0x200003ec
 800689c:	08007ed2 	.word	0x08007ed2

080068a0 <OnRxError>:
  Radio.Sleep();
 80068a0:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <OnRxError+0x18>)
{
 80068a2:	b510      	push	{r4, lr}
  Radio.Sleep();
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	4798      	blx	r3
  State = RX_ERROR;
 80068a8:	2203      	movs	r2, #3
 80068aa:	4b04      	ldr	r3, [pc, #16]	; (80068bc <OnRxError+0x1c>)
  PRINTF("OnRxError\n\r");
 80068ac:	4804      	ldr	r0, [pc, #16]	; (80068c0 <OnRxError+0x20>)
  State = RX_ERROR;
 80068ae:	761a      	strb	r2, [r3, #24]
  PRINTF("OnRxError\n\r");
 80068b0:	f7ff fc12 	bl	80060d8 <TraceSend>
}
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	08007d60 	.word	0x08007d60
 80068bc:	200003ec 	.word	0x200003ec
 80068c0:	08007ee0 	.word	0x08007ee0

080068c4 <OnRxDone>:
{
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	000e      	movs	r6, r1
 80068c8:	0007      	movs	r7, r0
 80068ca:	001d      	movs	r5, r3
  Radio.Sleep();
 80068cc:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <OnRxDone+0x3c>)
{
 80068ce:	0014      	movs	r4, r2
  Radio.Sleep();
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	4798      	blx	r3
  BufferSize = size;
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <OnRxDone+0x40>)
  memcpy(Buffer, payload, BufferSize);
 80068d6:	0039      	movs	r1, r7
 80068d8:	0032      	movs	r2, r6
 80068da:	480b      	ldr	r0, [pc, #44]	; (8006908 <OnRxDone+0x44>)
  BufferSize = size;
 80068dc:	801e      	strh	r6, [r3, #0]
  memcpy(Buffer, payload, BufferSize);
 80068de:	f000 fc21 	bl	8007124 <memcpy>
  State = RX;
 80068e2:	2201      	movs	r2, #1
  RssiValue = rssi;
 80068e4:	4b09      	ldr	r3, [pc, #36]	; (800690c <OnRxDone+0x48>)
  PRINTF("OnRxDone\n\r");
 80068e6:	480a      	ldr	r0, [pc, #40]	; (8006910 <OnRxDone+0x4c>)
  SnrValue = snr;
 80068e8:	769d      	strb	r5, [r3, #26]
  State = RX;
 80068ea:	761a      	strb	r2, [r3, #24]
  RssiValue = rssi;
 80068ec:	765c      	strb	r4, [r3, #25]
  PRINTF("OnRxDone\n\r");
 80068ee:	f7ff fbf3 	bl	80060d8 <TraceSend>
  PRINTF("RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);
 80068f2:	002a      	movs	r2, r5
 80068f4:	0021      	movs	r1, r4
 80068f6:	4807      	ldr	r0, [pc, #28]	; (8006914 <OnRxDone+0x50>)
 80068f8:	f7ff fbee 	bl	80060d8 <TraceSend>
}
 80068fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	08007d60 	.word	0x08007d60
 8006904:	20000036 	.word	0x20000036
 8006908:	20000610 	.word	0x20000610
 800690c:	200003ec 	.word	0x200003ec
 8006910:	08007eec 	.word	0x08007eec
 8006914:	08007ef7 	.word	0x08007ef7

08006918 <main>:
{
 8006918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 800691c:	f7fd f896 	bl	8003a4c <HAL_Init>
  SystemClock_Config();
 8006920:	f000 f988 	bl	8006c34 <SystemClock_Config>
  DBG_Init();
 8006924:	f7ff fc1e 	bl	8006164 <DBG_Init>
  HW_Init();
 8006928:	f000 f9fe 	bl	8006d28 <HW_Init>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 800692c:	2101      	movs	r1, #1
 800692e:	0008      	movs	r0, r1
 8006930:	f7ff f95c 	bl	8005bec <LPM_SetOffMode>
  TimerInit(&timerLed, OnledEvent);
 8006934:	4c79      	ldr	r4, [pc, #484]	; (8006b1c <main+0x204>)
 8006936:	497a      	ldr	r1, [pc, #488]	; (8006b20 <main+0x208>)
 8006938:	0020      	movs	r0, r4
 800693a:	f7ff fab9 	bl	8005eb0 <TimerInit>
  TimerSetValue(&timerLed, LED_PERIOD_MS);
 800693e:	21c8      	movs	r1, #200	; 0xc8
 8006940:	0020      	movs	r0, r4
 8006942:	f7ff fb67 	bl	8006014 <TimerSetValue>
  TimerStart(&timerLed);
 8006946:	0020      	movs	r0, r4
 8006948:	f7ff fabc 	bl	8005ec4 <TimerStart>
  Radio.Init(&RadioEvents);
 800694c:	0020      	movs	r0, r4
  RadioEvents.TxDone = OnTxDone;
 800694e:	4b75      	ldr	r3, [pc, #468]	; (8006b24 <main+0x20c>)
  Radio.Init(&RadioEvents);
 8006950:	4d75      	ldr	r5, [pc, #468]	; (8006b28 <main+0x210>)
  RadioEvents.TxDone = OnTxDone;
 8006952:	61e3      	str	r3, [r4, #28]
  RadioEvents.RxDone = OnRxDone;
 8006954:	4b75      	ldr	r3, [pc, #468]	; (8006b2c <main+0x214>)
  Radio.Init(&RadioEvents);
 8006956:	301c      	adds	r0, #28
  RadioEvents.RxDone = OnRxDone;
 8006958:	6263      	str	r3, [r4, #36]	; 0x24
  RadioEvents.TxTimeout = OnTxTimeout;
 800695a:	4b75      	ldr	r3, [pc, #468]	; (8006b30 <main+0x218>)
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800695c:	2600      	movs	r6, #0
  RadioEvents.TxTimeout = OnTxTimeout;
 800695e:	6223      	str	r3, [r4, #32]
  RadioEvents.RxTimeout = OnRxTimeout;
 8006960:	4b74      	ldr	r3, [pc, #464]	; (8006b34 <main+0x21c>)
 8006962:	62a3      	str	r3, [r4, #40]	; 0x28
  RadioEvents.RxError = OnRxError;
 8006964:	4b74      	ldr	r3, [pc, #464]	; (8006b38 <main+0x220>)
 8006966:	62e3      	str	r3, [r4, #44]	; 0x2c
  Radio.Init(&RadioEvents);
 8006968:	68ab      	ldr	r3, [r5, #8]
 800696a:	930a      	str	r3, [sp, #40]	; 0x28
 800696c:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 800696e:	696b      	ldr	r3, [r5, #20]
 8006970:	4872      	ldr	r0, [pc, #456]	; (8006b3c <main+0x224>)
 8006972:	930a      	str	r3, [sp, #40]	; 0x28
 8006974:	4798      	blx	r3
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8006976:	2201      	movs	r2, #1
 8006978:	4b71      	ldr	r3, [pc, #452]	; (8006b40 <main+0x228>)
 800697a:	9204      	str	r2, [sp, #16]
 800697c:	9308      	str	r3, [sp, #32]
 800697e:	2308      	movs	r3, #8
 8006980:	9201      	str	r2, [sp, #4]
 8006982:	3206      	adds	r2, #6
 8006984:	9200      	str	r2, [sp, #0]
 8006986:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006988:	9607      	str	r6, [sp, #28]
 800698a:	920a      	str	r2, [sp, #40]	; 0x28
 800698c:	9606      	str	r6, [sp, #24]
 800698e:	0032      	movs	r2, r6
 8006990:	9605      	str	r6, [sp, #20]
 8006992:	9603      	str	r6, [sp, #12]
 8006994:	9302      	str	r3, [sp, #8]
 8006996:	210e      	movs	r1, #14
 8006998:	0033      	movs	r3, r6
 800699a:	2001      	movs	r0, #1
 800699c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800699e:	47b8      	blx	r7
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80069a0:	2305      	movs	r3, #5
 80069a2:	2201      	movs	r2, #1
 80069a4:	9302      	str	r3, [sp, #8]
 80069a6:	3303      	adds	r3, #3
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	6a2b      	ldr	r3, [r5, #32]
 80069ac:	0031      	movs	r1, r6
 80069ae:	930a      	str	r3, [sp, #40]	; 0x28
 80069b0:	0013      	movs	r3, r2
 80069b2:	9209      	str	r2, [sp, #36]	; 0x24
 80069b4:	0018      	movs	r0, r3
 80069b6:	9608      	str	r6, [sp, #32]
 80069b8:	9607      	str	r6, [sp, #28]
 80069ba:	9606      	str	r6, [sp, #24]
 80069bc:	9205      	str	r2, [sp, #20]
 80069be:	9604      	str	r6, [sp, #16]
 80069c0:	9603      	str	r6, [sp, #12]
 80069c2:	9600      	str	r6, [sp, #0]
 80069c4:	3206      	adds	r2, #6
 80069c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80069c8:	47b0      	blx	r6
  Radio.Rx(RX_TIMEOUT_VALUE);
 80069ca:	20fa      	movs	r0, #250	; 0xfa
 80069cc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80069ce:	0080      	lsls	r0, r0, #2
 80069d0:	930a      	str	r3, [sp, #40]	; 0x28
        Radio.Rx(RX_TIMEOUT_VALUE);
 80069d2:	27fa      	movs	r7, #250	; 0xfa
  Radio.Rx(RX_TIMEOUT_VALUE);
 80069d4:	4798      	blx	r3
  bool isMaster = true;
 80069d6:	2301      	movs	r3, #1
        Radio.Rx(RX_TIMEOUT_VALUE);
 80069d8:	00bf      	lsls	r7, r7, #2
  bool isMaster = true;
 80069da:	930a      	str	r3, [sp, #40]	; 0x28
    switch (State)
 80069dc:	7e20      	ldrb	r0, [r4, #24]
 80069de:	3801      	subs	r0, #1
 80069e0:	2804      	cmp	r0, #4
 80069e2:	d844      	bhi.n	8006a6e <main+0x156>
 80069e4:	f7f9 fb90 	bl	8000108 <__gnu_thumb1_case_uqi>
 80069e8:	957f7f03 	.word	0x957f7f03
 80069ec:	95          	.byte	0x95
 80069ed:	00          	.byte	0x00
 80069ee:	4b55      	ldr	r3, [pc, #340]	; (8006b44 <main+0x22c>)
        if (isMaster == true)
 80069f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	2a00      	cmp	r2, #0
 80069f6:	d042      	beq.n	8006a7e <main+0x166>
          if (BufferSize > 0)
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d036      	beq.n	8006a6a <main+0x152>
            if (strncmp((const char *)Buffer, (const char *)PongMsg, 4) == 0)
 80069fc:	4e52      	ldr	r6, [pc, #328]	; (8006b48 <main+0x230>)
 80069fe:	2204      	movs	r2, #4
 8006a00:	4952      	ldr	r1, [pc, #328]	; (8006b4c <main+0x234>)
 8006a02:	0030      	movs	r0, r6
 8006a04:	f000 fb9f 	bl	8007146 <strncmp>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d121      	bne.n	8006a50 <main+0x138>
              TimerStop(&timerLed);
 8006a0c:	0020      	movs	r0, r4
 8006a0e:	f7ff fad5 	bl	8005fbc <TimerStop>
              Buffer[0] = 'P';
 8006a12:	2350      	movs	r3, #80	; 0x50
 8006a14:	7033      	strb	r3, [r6, #0]
              Buffer[1] = 'I';
 8006a16:	2349      	movs	r3, #73	; 0x49
 8006a18:	7073      	strb	r3, [r6, #1]
              Buffer[2] = 'N';
 8006a1a:	3305      	adds	r3, #5
 8006a1c:	70b3      	strb	r3, [r6, #2]
              Buffer[3] = 'G';
 8006a1e:	3b07      	subs	r3, #7
 8006a20:	70f3      	strb	r3, [r6, #3]
              for (i = 4; i < BufferSize; i++)
 8006a22:	4b48      	ldr	r3, [pc, #288]	; (8006b44 <main+0x22c>)
 8006a24:	881a      	ldrh	r2, [r3, #0]
 8006a26:	2304      	movs	r3, #4
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d30c      	bcc.n	8006a46 <main+0x12e>
              PRINTF("...PING\n\r");
 8006a2c:	4848      	ldr	r0, [pc, #288]	; (8006b50 <main+0x238>)
 8006a2e:	f7ff fb53 	bl	80060d8 <TraceSend>
          DelayMs(1);
 8006a32:	2001      	movs	r0, #1
 8006a34:	f000 f892 	bl	8006b5c <HAL_Delay>
          Radio.Send(Buffer, BufferSize);
 8006a38:	4b42      	ldr	r3, [pc, #264]	; (8006b44 <main+0x22c>)
 8006a3a:	0030      	movs	r0, r6
 8006a3c:	7819      	ldrb	r1, [r3, #0]
 8006a3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a42:	4798      	blx	r3
 8006a44:	e011      	b.n	8006a6a <main+0x152>
                Buffer[i] = i - 4;
 8006a46:	1f19      	subs	r1, r3, #4
 8006a48:	54f1      	strb	r1, [r6, r3]
              for (i = 4; i < BufferSize; i++)
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	e7eb      	b.n	8006a28 <main+0x110>
            else if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8006a50:	4b3e      	ldr	r3, [pc, #248]	; (8006b4c <main+0x234>)
 8006a52:	0030      	movs	r0, r6
 8006a54:	1d59      	adds	r1, r3, #5
 8006a56:	2204      	movs	r2, #4
 8006a58:	f000 fb75 	bl	8007146 <strncmp>
 8006a5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006a5e:	0006      	movs	r6, r0
              Radio.Rx(RX_TIMEOUT_VALUE);
 8006a60:	0038      	movs	r0, r7
            else if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	d158      	bne.n	8006b18 <main+0x200>
              Radio.Rx(RX_TIMEOUT_VALUE);
 8006a66:	4798      	blx	r3
              isMaster = false;
 8006a68:	960a      	str	r6, [sp, #40]	; 0x28
        State = LOWPOWER;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	7623      	strb	r3, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a6e:	b672      	cpsid	i
    if (State == LOWPOWER)
 8006a70:	7e23      	ldrb	r3, [r4, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <main+0x162>
      LPM_EnterLowPower();
 8006a76:	f7ff f8fb 	bl	8005c70 <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 8006a7a:	b662      	cpsie	i
 8006a7c:	e7ae      	b.n	80069dc <main+0xc4>
          if (BufferSize > 0)
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f3      	beq.n	8006a6a <main+0x152>
            if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8006a82:	4932      	ldr	r1, [pc, #200]	; (8006b4c <main+0x234>)
 8006a84:	4e30      	ldr	r6, [pc, #192]	; (8006b48 <main+0x230>)
 8006a86:	2204      	movs	r2, #4
 8006a88:	3105      	adds	r1, #5
 8006a8a:	0030      	movs	r0, r6
 8006a8c:	f000 fb5b 	bl	8007146 <strncmp>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d121      	bne.n	8006ad8 <main+0x1c0>
              TimerStop(&timerLed);
 8006a94:	0020      	movs	r0, r4
 8006a96:	f7ff fa91 	bl	8005fbc <TimerStop>
              Buffer[0] = 'P';
 8006a9a:	2350      	movs	r3, #80	; 0x50
 8006a9c:	7033      	strb	r3, [r6, #0]
              Buffer[1] = 'O';
 8006a9e:	234f      	movs	r3, #79	; 0x4f
 8006aa0:	7073      	strb	r3, [r6, #1]
              Buffer[2] = 'N';
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	70b3      	strb	r3, [r6, #2]
              Buffer[3] = 'G';
 8006aa6:	3b07      	subs	r3, #7
 8006aa8:	70f3      	strb	r3, [r6, #3]
              for (i = 4; i < BufferSize; i++)
 8006aaa:	4b26      	ldr	r3, [pc, #152]	; (8006b44 <main+0x22c>)
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	2304      	movs	r3, #4
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d30c      	bcc.n	8006ace <main+0x1b6>
              DelayMs(1);
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	f000 f851 	bl	8006b5c <HAL_Delay>
              Radio.Send(Buffer, BufferSize);
 8006aba:	4b22      	ldr	r3, [pc, #136]	; (8006b44 <main+0x22c>)
 8006abc:	0030      	movs	r0, r6
 8006abe:	7819      	ldrb	r1, [r3, #0]
 8006ac0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ac4:	4798      	blx	r3
              PRINTF("...PONG\n\r");
 8006ac6:	4823      	ldr	r0, [pc, #140]	; (8006b54 <main+0x23c>)
 8006ac8:	f7ff fb06 	bl	80060d8 <TraceSend>
 8006acc:	e7cd      	b.n	8006a6a <main+0x152>
                Buffer[i] = i - 4;
 8006ace:	1f19      	subs	r1, r3, #4
 8006ad0:	54f1      	strb	r1, [r6, r3]
              for (i = 4; i < BufferSize; i++)
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	e7eb      	b.n	8006ab0 <main+0x198>
              Radio.Rx(RX_TIMEOUT_VALUE);
 8006ad8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006ada:	0038      	movs	r0, r7
 8006adc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ade:	4798      	blx	r3
              isMaster = true;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ae4:	e7c1      	b.n	8006a6a <main+0x152>
        if (isMaster == true)
 8006ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d012      	beq.n	8006b12 <main+0x1fa>
          Buffer[0] = 'P';
 8006aec:	2350      	movs	r3, #80	; 0x50
 8006aee:	4e16      	ldr	r6, [pc, #88]	; (8006b48 <main+0x230>)
 8006af0:	7033      	strb	r3, [r6, #0]
          Buffer[1] = 'I';
 8006af2:	2349      	movs	r3, #73	; 0x49
 8006af4:	7073      	strb	r3, [r6, #1]
          Buffer[2] = 'N';
 8006af6:	3305      	adds	r3, #5
 8006af8:	70b3      	strb	r3, [r6, #2]
          Buffer[3] = 'G';
 8006afa:	3b07      	subs	r3, #7
 8006afc:	70f3      	strb	r3, [r6, #3]
          for (i = 4; i < BufferSize; i++)
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <main+0x22c>)
 8006b00:	881a      	ldrh	r2, [r3, #0]
 8006b02:	2304      	movs	r3, #4
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d294      	bcs.n	8006a32 <main+0x11a>
            Buffer[i] = i - 4;
 8006b08:	1f19      	subs	r1, r3, #4
 8006b0a:	54f1      	strb	r1, [r6, r3]
          for (i = 4; i < BufferSize; i++)
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	e7f8      	b.n	8006b04 <main+0x1ec>
        Radio.Rx(RX_TIMEOUT_VALUE);
 8006b12:	0038      	movs	r0, r7
 8006b14:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b18:	4798      	blx	r3
 8006b1a:	e7a6      	b.n	8006a6a <main+0x152>
 8006b1c:	200003ec 	.word	0x200003ec
 8006b20:	08006825 	.word	0x08006825
 8006b24:	08006835 	.word	0x08006835
 8006b28:	08007d60 	.word	0x08007d60
 8006b2c:	080068c5 	.word	0x080068c5
 8006b30:	08006859 	.word	0x08006859
 8006b34:	0800687d 	.word	0x0800687d
 8006b38:	080068a1 	.word	0x080068a1
 8006b3c:	337f9800 	.word	0x337f9800
 8006b40:	00000bb8 	.word	0x00000bb8
 8006b44:	20000036 	.word	0x20000036
 8006b48:	20000610 	.word	0x20000610
 8006b4c:	08007e1e 	.word	0x08007e1e
 8006b50:	08007f17 	.word	0x08007f17
 8006b54:	08007f21 	.word	0x08007f21

08006b58 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 8006b58:	2000      	movs	r0, #0
 8006b5a:	4770      	bx	lr

08006b5c <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8006b5c:	b507      	push	{r0, r1, r2, lr}
 8006b5e:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 8006b60:	9801      	ldr	r0, [sp, #4]
 8006b62:	f7ff fd37 	bl	80065d4 <HW_RTC_DelayMs>
}
 8006b66:	bd07      	pop	{r0, r1, r2, pc}

08006b68 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b68:	2380      	movs	r3, #128	; 0x80
 8006b6a:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <HAL_MspInit+0x28>)
 8006b6c:	055b      	lsls	r3, r3, #21
 8006b6e:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8006b70:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8006b76:	f7fd fb25 	bl	80041c4 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8006b7a:	f7fd fb6b 	bl	8004254 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8006b7e:	2308      	movs	r3, #8
 8006b80:	4a04      	ldr	r2, [pc, #16]	; (8006b94 <HAL_MspInit+0x2c>)
 8006b82:	6811      	ldr	r1, [r2, #0]
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8006b88:	f7fd fb5a 	bl	8004240 <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif
}
 8006b8c:	bd10      	pop	{r4, pc}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	40021000 	.word	0x40021000
 8006b94:	40022000 	.word	0x40022000

08006b98 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8006b98:	b500      	push	{lr}
 8006b9a:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b9c:	2234      	movs	r2, #52	; 0x34
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	a80b      	add	r0, sp, #44	; 0x2c
 8006ba2:	f000 fac8 	bl	8007136 <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 8006ba6:	2228      	movs	r2, #40	; 0x28
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4668      	mov	r0, sp
 8006bac:	f000 fac3 	bl	8007136 <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8006bb0:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bb2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8006bb4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006bb6:	33fc      	adds	r3, #252	; 0xfc
 8006bb8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bba:	f7fd fb95 	bl	80042e8 <HAL_RCC_OscConfig>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d001      	beq.n	8006bc6 <HAL_RTC_MspInit+0x2e>
  {
    Error_Handler();
 8006bc2:	f7ff fb01 	bl	80061c8 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006bc6:	2320      	movs	r3, #32
 8006bc8:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006bca:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bcc:	4668      	mov	r0, sp
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006bce:	025b      	lsls	r3, r3, #9
 8006bd0:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bd2:	f7fd feed 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_RTC_MspInit+0x46>
  {
    Error_Handler();
 8006bda:	f7ff faf5 	bl	80061c8 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8006bde:	2380      	movs	r3, #128	; 0x80
 8006be0:	4a07      	ldr	r2, [pc, #28]	; (8006c00 <HAL_RTC_MspInit+0x68>)
 8006be2:	02db      	lsls	r3, r3, #11
 8006be4:	6d11      	ldr	r1, [r2, #80]	; 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8006be6:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8006bec:	2200      	movs	r2, #0
 8006bee:	0011      	movs	r1, r2
 8006bf0:	f7fd f8f2 	bl	8003dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8006bf4:	2002      	movs	r0, #2
 8006bf6:	f7fd f919 	bl	8003e2c <HAL_NVIC_EnableIRQ>
}
 8006bfa:	b019      	add	sp, #100	; 0x64
 8006bfc:	bd00      	pop	{pc}
 8006bfe:	46c0      	nop			; (mov r8, r8)
 8006c00:	40021000 	.word	0x40021000

08006c04 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c04:	b510      	push	{r4, lr}
  TimerIrqHandler();
 8006c06:	f7ff f997 	bl	8005f38 <TimerIrqHandler>
}
 8006c0a:	bd10      	pop	{r4, pc}

08006c0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c0c:	b510      	push	{r4, lr}
  HW_GPIO_IrqHandler(GPIO_Pin);
 8006c0e:	f7ff fb67 	bl	80062e0 <HW_GPIO_IrqHandler>
}
 8006c12:	bd10      	pop	{r4, pc}

08006c14 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8006c14:	3801      	subs	r0, #1
{
 8006c16:	b500      	push	{lr}
  switch (GPIO_Pin)
 8006c18:	2807      	cmp	r0, #7
 8006c1a:	d807      	bhi.n	8006c2c <MSP_GetIRQn+0x18>
 8006c1c:	f7f9 fa74 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006c20:	04060808 	.word	0x04060808
 8006c24:	04060606 	.word	0x04060606
    case GPIO_PIN_0:
    case GPIO_PIN_1:
      return EXTI0_1_IRQn;
    case GPIO_PIN_2:
    case GPIO_PIN_3:
      return EXTI2_3_IRQn;
 8006c28:	2006      	movs	r0, #6
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
  }
}
 8006c2a:	bd00      	pop	{pc}
      return EXTI4_15_IRQn;
 8006c2c:	2007      	movs	r0, #7
 8006c2e:	e7fc      	b.n	8006c2a <MSP_GetIRQn+0x16>
      return EXTI0_1_IRQn;
 8006c30:	2005      	movs	r0, #5
 8006c32:	e7fa      	b.n	8006c2a <MSP_GetIRQn+0x16>

08006c34 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 8006c34:	b500      	push	{lr}
 8006c36:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c38:	2214      	movs	r2, #20
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	a801      	add	r0, sp, #4
 8006c3e:	f000 fa7a 	bl	8007136 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c42:	222c      	movs	r2, #44	; 0x2c
 8006c44:	2100      	movs	r1, #0
 8006c46:	a807      	add	r0, sp, #28
 8006c48:	f000 fa75 	bl	8007136 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8006c50:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8006c52:	2380      	movs	r3, #128	; 0x80
 8006c54:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8006c56:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8006c58:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8006c5a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8006c5c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8006c5e:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c60:	320f      	adds	r2, #15

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c62:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c64:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8006c66:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c68:	f7fd fb3e 	bl	80042e8 <HAL_RCC_OscConfig>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d001      	beq.n	8006c74 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8006c70:	f7ff faaa 	bl	80061c8 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	4a11      	ldr	r2, [pc, #68]	; (8006cbc <SystemClock_Config+0x88>)
 8006c78:	055b      	lsls	r3, r3, #21
 8006c7a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c80:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <SystemClock_Config+0x8c>)
 8006c82:	4910      	ldr	r1, [pc, #64]	; (8006cc4 <SystemClock_Config+0x90>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4011      	ands	r1, r2
 8006c88:	2280      	movs	r2, #128	; 0x80
 8006c8a:	0112      	lsls	r2, r2, #4
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8006c90:	2110      	movs	r1, #16
 8006c92:	001a      	movs	r2, r3
 8006c94:	6853      	ldr	r3, [r2, #4]
 8006c96:	400b      	ands	r3, r1
 8006c98:	d1fc      	bne.n	8006c94 <SystemClock_Config+0x60>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006c9a:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006c9c:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006c9e:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006ca0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ca2:	3a0c      	subs	r2, #12
 8006ca4:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ca6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006ca8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006caa:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006cac:	f7fd fda8 	bl	8004800 <HAL_RCC_ClockConfig>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d001      	beq.n	8006cb8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8006cb4:	f7ff fa88 	bl	80061c8 <Error_Handler>
  }
}
 8006cb8:	b015      	add	sp, #84	; 0x54
 8006cba:	bd00      	pop	{pc}
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40007000 	.word	0x40007000
 8006cc4:	ffffe7ff 	.word	0xffffe7ff

08006cc8 <HW_AdcInit>:
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
  if (AdcInitialized == false)
 8006cc8:	4814      	ldr	r0, [pc, #80]	; (8006d1c <HW_AdcInit+0x54>)
{
 8006cca:	b510      	push	{r4, lr}
  if (AdcInitialized == false)
 8006ccc:	7843      	ldrb	r3, [r0, #1]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d122      	bne.n	8006d18 <HW_AdcInit+0x50>
  {
    AdcInitialized = true;
 8006cd2:	2201      	movs	r2, #1

    hadc.Init.OversamplingMode      = DISABLE;

    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 8006cd4:	6382      	str	r2, [r0, #56]	; 0x38
    hadc.Init.LowPowerAutoWait      = DISABLE;

    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8006cd6:	6142      	str	r2, [r0, #20]
    AdcInitialized = true;
 8006cd8:	7042      	strb	r2, [r0, #1]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
    hadc.Init.ContinuousConvMode    = DISABLE;
 8006cda:	1d42      	adds	r2, r0, #5
 8006cdc:	77d3      	strb	r3, [r2, #31]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8006cde:	1d82      	adds	r2, r0, #6
 8006ce0:	77d3      	strb	r3, [r2, #31]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8006ce2:	2204      	movs	r2, #4
    hadc.Instance  = ADC1;
 8006ce4:	490e      	ldr	r1, [pc, #56]	; (8006d20 <HW_AdcInit+0x58>)
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8006ce6:	6182      	str	r2, [r0, #24]
    hadc.Instance  = ADC1;
 8006ce8:	6041      	str	r1, [r0, #4]
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006cea:	2180      	movs	r1, #128	; 0x80
    hadc.Init.DMAContinuousRequests = DISABLE;
 8006cec:	0002      	movs	r2, r0
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006cee:	0609      	lsls	r1, r1, #24
 8006cf0:	6081      	str	r1, [r0, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8006cf2:	2107      	movs	r1, #7
    hadc.Init.DMAContinuousRequests = DISABLE;
 8006cf4:	3230      	adds	r2, #48	; 0x30
    hadc.Init.OversamplingMode      = DISABLE;
 8006cf6:	6403      	str	r3, [r0, #64]	; 0x40
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8006cf8:	6203      	str	r3, [r0, #32]
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8006cfa:	61c3      	str	r3, [r0, #28]
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8006cfc:	60c3      	str	r3, [r0, #12]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8006cfe:	6103      	str	r3, [r0, #16]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006d00:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc.Init.DMAContinuousRequests = DISABLE;
 8006d02:	7013      	strb	r3, [r2, #0]

    ADCCLK_ENABLE();
 8006d04:	2380      	movs	r3, #128	; 0x80
 8006d06:	4a07      	ldr	r2, [pc, #28]	; (8006d24 <HW_AdcInit+0x5c>)
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8006d08:	63c1      	str	r1, [r0, #60]	; 0x3c
    ADCCLK_ENABLE();
 8006d0a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	6353      	str	r3, [r2, #52]	; 0x34


    HAL_ADC_Init(&hadc);
 8006d12:	3004      	adds	r0, #4
 8006d14:	f7fc ff32 	bl	8003b7c <HAL_ADC_Init>

  }
}
 8006d18:	bd10      	pop	{r4, pc}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	20000424 	.word	0x20000424
 8006d20:	40012400 	.word	0x40012400
 8006d24:	40021000 	.word	0x40021000

08006d28 <HW_Init>:
{
 8006d28:	b513      	push	{r0, r1, r4, lr}
  if (McuInitialized == false)
 8006d2a:	4c09      	ldr	r4, [pc, #36]	; (8006d50 <HW_Init+0x28>)
 8006d2c:	7823      	ldrb	r3, [r4, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10d      	bne.n	8006d4e <HW_Init+0x26>
    HW_AdcInit();
 8006d32:	f7ff ffc9 	bl	8006cc8 <HW_AdcInit>
    Radio.IoInit();
 8006d36:	4b07      	ldr	r3, [pc, #28]	; (8006d54 <HW_Init+0x2c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	4798      	blx	r3
    HW_SPI_Init();
 8006d3e:	f7ff fcdb 	bl	80066f8 <HW_SPI_Init>
    HW_RTC_Init();
 8006d42:	f7ff fc67 	bl	8006614 <HW_RTC_Init>
    TraceInit();
 8006d46:	f7ff f9b5 	bl	80060b4 <TraceInit>
    McuInitialized = true;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	7023      	strb	r3, [r4, #0]
}
 8006d4e:	bd13      	pop	{r0, r1, r4, pc}
 8006d50:	20000424 	.word	0x20000424
 8006d54:	08007d60 	.word	0x08007d60

08006d58 <HW_AdcDeInit>:
  * @param none
  * @retval none
  */
void HW_AdcDeInit(void)
{
  AdcInitialized = false;
 8006d58:	2300      	movs	r3, #0
{
 8006d5a:	b510      	push	{r4, lr}
  AdcInitialized = false;
 8006d5c:	4802      	ldr	r0, [pc, #8]	; (8006d68 <HW_AdcDeInit+0x10>)
 8006d5e:	7043      	strb	r3, [r0, #1]
  HAL_ADC_DeInit(&hadc);
 8006d60:	3004      	adds	r0, #4
 8006d62:	f7fc ffe5 	bl	8003d30 <HAL_ADC_DeInit>
}
 8006d66:	bd10      	pop	{r4, pc}
 8006d68:	20000424 	.word	0x20000424

08006d6c <LPM_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterStopMode(void)
{
 8006d6c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d6e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006d72:	b672      	cpsid	i
  HW_SPI_IoDeInit();
 8006d74:	f7ff fd04 	bl	8006780 <HW_SPI_IoDeInit>
  Radio.IoDeInit();
 8006d78:	4b09      	ldr	r3, [pc, #36]	; (8006da0 <LPM_EnterStopMode+0x34>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4798      	blx	r3
  vcom_IoDeInit();
 8006d7e:	f000 f95f 	bl	8007040 <vcom_IoDeInit>

  DISABLE_IRQ();

  HW_IoDeInit();

  HW_AdcDeInit();
 8006d82:	f7ff ffe9 	bl	8006d58 <HW_AdcDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8006d86:	2304      	movs	r3, #4
 8006d88:	4a06      	ldr	r2, [pc, #24]	; (8006da4 <LPM_EnterStopMode+0x38>)
 8006d8a:	6811      	ldr	r1, [r2, #0]
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d90:	f384 8810 	msr	PRIMASK, r4

  RESTORE_PRIMASK();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006d94:	2101      	movs	r1, #1
 8006d96:	0008      	movs	r0, r1
 8006d98:	f7fd fa36 	bl	8004208 <HAL_PWR_EnterSTOPMode>
}
 8006d9c:	bd10      	pop	{r4, pc}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	08007d60 	.word	0x08007d60
 8006da4:	40007000 	.word	0x40007000

08006da8 <LPM_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void LPM_ExitStopMode(void)
{
 8006da8:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006daa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006dae:	b672      	cpsid	i

  DISABLE_IRQ();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8006db0:	2201      	movs	r2, #1
 8006db2:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <LPM_ExitStopMode+0x58>)
 8006db4:	6819      	ldr	r1, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8006dba:	2204      	movs	r2, #4
 8006dbc:	6819      	ldr	r1, [r3, #0]
 8006dbe:	4211      	tst	r1, r2
 8006dc0:	d0fc      	beq.n	8006dbc <LPM_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8006dc2:	2280      	movs	r2, #128	; 0x80
 8006dc4:	6819      	ldr	r1, [r3, #0]
 8006dc6:	0452      	lsls	r2, r2, #17
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8006dcc:	2280      	movs	r2, #128	; 0x80
 8006dce:	0492      	lsls	r2, r2, #18
 8006dd0:	6819      	ldr	r1, [r3, #0]
 8006dd2:	4211      	tst	r1, r2
 8006dd4:	d0fc      	beq.n	8006dd0 <LPM_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8006dd6:	2203      	movs	r2, #3
 8006dd8:	68d9      	ldr	r1, [r3, #12]
 8006dda:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8006ddc:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8006dde:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	400a      	ands	r2, r1
 8006de4:	2a0c      	cmp	r2, #12
 8006de6:	d1fb      	bne.n	8006de0 <LPM_ExitStopMode+0x38>
  HW_SPI_IoInit();
 8006de8:	f7ff fc56 	bl	8006698 <HW_SPI_IoInit>
  Radio.IoInit();
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <LPM_ExitStopMode+0x5c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	4798      	blx	r3
  vcom_IoInit();
 8006df4:	f000 f8a2 	bl	8006f3c <vcom_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df8:	f384 8810 	msr	PRIMASK, r4

  /*initilizes the peripherals*/
  HW_IoInit();

  RESTORE_PRIMASK();
}
 8006dfc:	bd13      	pop	{r0, r1, r4, pc}
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	40021000 	.word	0x40021000
 8006e04:	08007d60 	.word	0x08007d60

08006e08 <LPM_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterSleepMode(void)
{
 8006e08:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f7fd f9e1 	bl	80041d4 <HAL_PWR_EnterSLEEPMode>
}
 8006e12:	bd10      	pop	{r4, pc}

08006e14 <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 8006e14:	4770      	bx	lr

08006e16 <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	e7fd      	b.n	8006e16 <HardFault_Handler>

08006e1a <SVC_Handler>:
 8006e1a:	4770      	bx	lr

08006e1c <PendSV_Handler>:
 8006e1c:	4770      	bx	lr

08006e1e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006e1e:	b510      	push	{r4, lr}
  HAL_IncTick();
 8006e20:	f7fc fe28 	bl	8003a74 <HAL_IncTick>
}
 8006e24:	bd10      	pop	{r4, pc}

08006e26 <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 8006e26:	b510      	push	{r4, lr}
  vcom_IRQHandler();
 8006e28:	f000 f880 	bl	8006f2c <vcom_IRQHandler>
}
 8006e2c:	bd10      	pop	{r4, pc}

08006e2e <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 8006e2e:	b510      	push	{r4, lr}
  vcom_DMA_TX_IRQHandler();
 8006e30:	f000 f874 	bl	8006f1c <vcom_DMA_TX_IRQHandler>
}
 8006e34:	bd10      	pop	{r4, pc}

08006e36 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8006e36:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler();
 8006e38:	f7ff fbac 	bl	8006594 <HW_RTC_IrqHandler>
}
 8006e3c:	bd10      	pop	{r4, pc}

08006e3e <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8006e3e:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006e40:	2001      	movs	r0, #1
 8006e42:	f7fd f9b3 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006e46:	2002      	movs	r0, #2
 8006e48:	f7fd f9b0 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
}
 8006e4c:	bd10      	pop	{r4, pc}

08006e4e <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8006e4e:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006e50:	2004      	movs	r0, #4
 8006e52:	f7fd f9ab 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006e56:	2008      	movs	r0, #8
 8006e58:	f7fd f9a8 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
}
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 8006e5e:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006e60:	2010      	movs	r0, #16
 8006e62:	f7fd f9a3 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006e66:	2020      	movs	r0, #32
 8006e68:	f7fd f9a0 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8006e6c:	2040      	movs	r0, #64	; 0x40
 8006e6e:	f7fd f99d 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8006e72:	2080      	movs	r0, #128	; 0x80
 8006e74:	f7fd f99a 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006e78:	2080      	movs	r0, #128	; 0x80
 8006e7a:	0040      	lsls	r0, r0, #1
 8006e7c:	f7fd f996 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006e80:	2080      	movs	r0, #128	; 0x80
 8006e82:	0080      	lsls	r0, r0, #2
 8006e84:	f7fd f992 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006e88:	2080      	movs	r0, #128	; 0x80
 8006e8a:	00c0      	lsls	r0, r0, #3
 8006e8c:	f7fd f98e 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006e90:	2080      	movs	r0, #128	; 0x80
 8006e92:	0100      	lsls	r0, r0, #4
 8006e94:	f7fd f98a 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8006e98:	2080      	movs	r0, #128	; 0x80
 8006e9a:	0140      	lsls	r0, r0, #5
 8006e9c:	f7fd f986 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006ea0:	2080      	movs	r0, #128	; 0x80
 8006ea2:	0180      	lsls	r0, r0, #6
 8006ea4:	f7fd f982 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006ea8:	2080      	movs	r0, #128	; 0x80
 8006eaa:	01c0      	lsls	r0, r0, #7
 8006eac:	f7fd f97e 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006eb0:	2080      	movs	r0, #128	; 0x80
 8006eb2:	0200      	lsls	r0, r0, #8
 8006eb4:	f7fd f97a 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
}
 8006eb8:	bd10      	pop	{r4, pc}
	...

08006ebc <vcom_Init>:
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <vcom_Init+0x30>)
{
 8006ebe:	b510      	push	{r4, lr}
  TxCpltCallback = TxCb;
 8006ec0:	6018      	str	r0, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USART2;
 8006ec2:	480b      	ldr	r0, [pc, #44]	; (8006ef0 <vcom_Init+0x34>)
 8006ec4:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <vcom_Init+0x38>)
 8006ec6:	6003      	str	r3, [r0, #0]

  UartHandle.Init.BaudRate   = 115200;
 8006ec8:	23e1      	movs	r3, #225	; 0xe1
 8006eca:	025b      	lsls	r3, r3, #9
 8006ecc:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8006ed2:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8006ed4:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8006ed6:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 8006ed8:	3308      	adds	r3, #8
 8006eda:	6143      	str	r3, [r0, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8006edc:	f7fe fe52 	bl	8005b84 <HAL_UART_Init>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d001      	beq.n	8006ee8 <vcom_Init+0x2c>
  {
    /* Initialization Error */
    Error_Handler();
 8006ee4:	f7ff f970 	bl	80061c8 <Error_Handler>
  }
}
 8006ee8:	bd10      	pop	{r4, pc}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	20000484 	.word	0x20000484
 8006ef0:	200004d0 	.word	0x200004d0
 8006ef4:	40004400 	.word	0x40004400

08006ef8 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8006efc:	0001      	movs	r1, r0
 8006efe:	4802      	ldr	r0, [pc, #8]	; (8006f08 <vcom_Trace+0x10>)
 8006f00:	f7fe fb08 	bl	8005514 <HAL_UART_Transmit_DMA>
}
 8006f04:	bd10      	pop	{r4, pc}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	200004d0 	.word	0x200004d0

08006f0c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8006f0c:	b510      	push	{r4, lr}
  /* buffer transmission complete*/
  TxCpltCallback();
 8006f0e:	4b02      	ldr	r3, [pc, #8]	; (8006f18 <HAL_UART_TxCpltCallback+0xc>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4798      	blx	r3
}
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	20000484 	.word	0x20000484

08006f1c <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 8006f1c:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8006f1e:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <vcom_DMA_TX_IRQHandler+0xc>)
 8006f20:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006f22:	f7fd f838 	bl	8003f96 <HAL_DMA_IRQHandler>
}
 8006f26:	bd10      	pop	{r4, pc}
 8006f28:	200004d0 	.word	0x200004d0

08006f2c <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 8006f2c:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&UartHandle);
 8006f2e:	4802      	ldr	r0, [pc, #8]	; (8006f38 <vcom_IRQHandler+0xc>)
 8006f30:	f7fe fb88 	bl	8005644 <HAL_UART_IRQHandler>
}
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	200004d0 	.word	0x200004d0

08006f3c <vcom_IoInit>:
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8006f3c:	2300      	movs	r3, #0
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8006f3e:	2201      	movs	r2, #1
{
 8006f40:	b530      	push	{r4, r5, lr}
 8006f42:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8006f44:	9305      	str	r3, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <vcom_IoInit+0x54>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f48:	25a0      	movs	r5, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 8006f4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006f4c:	2404      	movs	r4, #4
  USARTx_TX_GPIO_CLK_ENABLE();
 8006f4e:	4311      	orrs	r1, r2
 8006f50:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006f52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f54:	05ed      	lsls	r5, r5, #23
  USARTx_TX_GPIO_CLK_ENABLE();
 8006f56:	4011      	ands	r1, r2
 8006f58:	9101      	str	r1, [sp, #4]
 8006f5a:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 8006f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f5e:	0028      	movs	r0, r5
  USARTx_RX_GPIO_CLK_ENABLE();
 8006f60:	4311      	orrs	r1, r2
 8006f62:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f66:	a903      	add	r1, sp, #12
  USARTx_RX_GPIO_CLK_ENABLE();
 8006f68:	401a      	ands	r2, r3
 8006f6a:	9202      	str	r2, [sp, #8]
 8006f6c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8006f72:	3301      	adds	r3, #1
 8006f74:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006f76:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006f78:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f7a:	f7fd f857 	bl	800402c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006f7e:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006f80:	a903      	add	r1, sp, #12
 8006f82:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006f84:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8006f86:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006f88:	f7fd f850 	bl	800402c <HAL_GPIO_Init>
}
 8006f8c:	b009      	add	sp, #36	; 0x24
 8006f8e:	bd30      	pop	{r4, r5, pc}
 8006f90:	40021000 	.word	0x40021000

08006f94 <HAL_UART_MspInit>:
{
 8006f94:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->Instance == USARTx)
 8006f96:	4b25      	ldr	r3, [pc, #148]	; (800702c <HAL_UART_MspInit+0x98>)
 8006f98:	6802      	ldr	r2, [r0, #0]
{
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	0007      	movs	r7, r0
  if (huart->Instance == USARTx)
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d142      	bne.n	8007028 <HAL_UART_MspInit+0x94>
    USARTx_TX_GPIO_CLK_ENABLE();
 8006fa2:	2501      	movs	r5, #1
 8006fa4:	4b22      	ldr	r3, [pc, #136]	; (8007030 <HAL_UART_MspInit+0x9c>)
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006fa6:	2600      	movs	r6, #0
    USARTx_TX_GPIO_CLK_ENABLE();
 8006fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006faa:	432a      	orrs	r2, r5
 8006fac:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb0:	402a      	ands	r2, r5
 8006fb2:	9201      	str	r2, [sp, #4]
 8006fb4:	9a01      	ldr	r2, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	432a      	orrs	r2, r5
 8006fba:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbe:	402a      	ands	r2, r5
 8006fc0:	9202      	str	r2, [sp, #8]
 8006fc2:	9a02      	ldr	r2, [sp, #8]
    USARTx_CLK_ENABLE();
 8006fc4:	2280      	movs	r2, #128	; 0x80
 8006fc6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006fc8:	0292      	lsls	r2, r2, #10
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 8006fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd0:	432a      	orrs	r2, r5
 8006fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	402b      	ands	r3, r5
 8006fd8:	9303      	str	r3, [sp, #12]
 8006fda:	9b03      	ldr	r3, [sp, #12]
    vcom_IoInit();
 8006fdc:	f7ff ffae 	bl	8006f3c <vcom_IoInit>
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8006fe0:	4c14      	ldr	r4, [pc, #80]	; (8007034 <HAL_UART_MspInit+0xa0>)
 8006fe2:	4b15      	ldr	r3, [pc, #84]	; (8007038 <HAL_UART_MspInit+0xa4>)
    HAL_DMA_Init(&hdma_tx);
 8006fe4:	4815      	ldr	r0, [pc, #84]	; (800703c <HAL_UART_MspInit+0xa8>)
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8006fe6:	6063      	str	r3, [r4, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006fe8:	2310      	movs	r3, #16
 8006fea:	60e3      	str	r3, [r4, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8006fec:	3370      	adds	r3, #112	; 0x70
 8006fee:	6163      	str	r3, [r4, #20]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8006ff0:	3b7c      	subs	r3, #124	; 0x7c
 8006ff2:	60a3      	str	r3, [r4, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006ff4:	6126      	str	r6, [r4, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ff6:	61a6      	str	r6, [r4, #24]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006ff8:	61e6      	str	r6, [r4, #28]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8006ffa:	6226      	str	r6, [r4, #32]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8006ffc:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_DMA_Init(&hdma_tx);
 8006ffe:	f7fc ff21 	bl	8003e44 <HAL_DMA_Init>
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8007002:	4b0e      	ldr	r3, [pc, #56]	; (800703c <HAL_UART_MspInit+0xa8>)
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8007004:	002a      	movs	r2, r5
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8007006:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8007008:	0031      	movs	r1, r6
 800700a:	200b      	movs	r0, #11
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800700c:	62e7      	str	r7, [r4, #44]	; 0x2c
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800700e:	f7fc fee3 	bl	8003dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8007012:	200b      	movs	r0, #11
 8007014:	f7fc ff0a 	bl	8003e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8007018:	201c      	movs	r0, #28
 800701a:	002a      	movs	r2, r5
 800701c:	0031      	movs	r1, r6
 800701e:	f7fc fedb 	bl	8003dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8007022:	201c      	movs	r0, #28
 8007024:	f7fc ff02 	bl	8003e2c <HAL_NVIC_EnableIRQ>
}
 8007028:	b005      	add	sp, #20
 800702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702c:	40004400 	.word	0x40004400
 8007030:	40021000 	.word	0x40021000
 8007034:	20000484 	.word	0x20000484
 8007038:	40020080 	.word	0x40020080
 800703c:	20000488 	.word	0x20000488

08007040 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 8007040:	b510      	push	{r4, lr}
 8007042:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8007044:	220c      	movs	r2, #12
 8007046:	2100      	movs	r1, #0
 8007048:	a803      	add	r0, sp, #12
 800704a:	f000 f874 	bl	8007136 <memset>

  USARTx_TX_GPIO_CLK_ENABLE();
 800704e:	2001      	movs	r0, #1
 8007050:	4a0c      	ldr	r2, [pc, #48]	; (8007084 <vcom_IoDeInit+0x44>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8007052:	24a0      	movs	r4, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 8007054:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8007056:	05e4      	lsls	r4, r4, #23
  USARTx_TX_GPIO_CLK_ENABLE();
 8007058:	4301      	orrs	r1, r0
 800705a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800705c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 800705e:	a901      	add	r1, sp, #4
  USARTx_TX_GPIO_CLK_ENABLE();
 8007060:	4003      	ands	r3, r0
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8007066:	2303      	movs	r3, #3
 8007068:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 800706a:	181b      	adds	r3, r3, r0
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 800706c:	0020      	movs	r0, r4
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 800706e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8007070:	f7fc ffdc 	bl	800402c <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 8007074:	2308      	movs	r3, #8
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 8007076:	a901      	add	r1, sp, #4
 8007078:	0020      	movs	r0, r4
  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 800707a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 800707c:	f7fc ffd6 	bl	800402c <HAL_GPIO_Init>
}
 8007080:	b006      	add	sp, #24
 8007082:	bd10      	pop	{r4, pc}
 8007084:	40021000 	.word	0x40021000

08007088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007088:	480d      	ldr	r0, [pc, #52]	; (80070c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800708a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800708c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800708e:	e003      	b.n	8007098 <LoopCopyDataInit>

08007090 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007090:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8007092:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007094:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007096:	3104      	adds	r1, #4

08007098 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007098:	480b      	ldr	r0, [pc, #44]	; (80070c8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800709a:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <LoopForever+0xe>)
  adds  r2, r0, r1
 800709c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800709e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80070a0:	d3f6      	bcc.n	8007090 <CopyDataInit>
  ldr  r2, =_sbss
 80070a2:	4a0b      	ldr	r2, [pc, #44]	; (80070d0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80070a4:	e002      	b.n	80070ac <LoopFillZerobss>

080070a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80070a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80070a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070aa:	3204      	adds	r2, #4

080070ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80070ac:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <LoopForever+0x16>)
  cmp  r2, r3
 80070ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80070b0:	d3f9      	bcc.n	80070a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80070b2:	f7fc fc9d 	bl	80039f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070b6:	f000 f811 	bl	80070dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070ba:	f7ff fc2d 	bl	8006918 <main>

080070be <LoopForever>:

LoopForever:
    b LoopForever
 80070be:	e7fe      	b.n	80070be <LoopForever>
   ldr   r0, =_estack
 80070c0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80070c4:	08007f70 	.word	0x08007f70
  ldr  r0, =_sdata
 80070c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80070cc:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 80070d0:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 80070d4:	20000654 	.word	0x20000654

080070d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070d8:	e7fe      	b.n	80070d8 <ADC1_COMP_IRQHandler>
	...

080070dc <__libc_init_array>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	2600      	movs	r6, #0
 80070e0:	4d0c      	ldr	r5, [pc, #48]	; (8007114 <__libc_init_array+0x38>)
 80070e2:	4c0d      	ldr	r4, [pc, #52]	; (8007118 <__libc_init_array+0x3c>)
 80070e4:	1b64      	subs	r4, r4, r5
 80070e6:	10a4      	asrs	r4, r4, #2
 80070e8:	42a6      	cmp	r6, r4
 80070ea:	d109      	bne.n	8007100 <__libc_init_array+0x24>
 80070ec:	2600      	movs	r6, #0
 80070ee:	f000 fdaf 	bl	8007c50 <_init>
 80070f2:	4d0a      	ldr	r5, [pc, #40]	; (800711c <__libc_init_array+0x40>)
 80070f4:	4c0a      	ldr	r4, [pc, #40]	; (8007120 <__libc_init_array+0x44>)
 80070f6:	1b64      	subs	r4, r4, r5
 80070f8:	10a4      	asrs	r4, r4, #2
 80070fa:	42a6      	cmp	r6, r4
 80070fc:	d105      	bne.n	800710a <__libc_init_array+0x2e>
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	00b3      	lsls	r3, r6, #2
 8007102:	58eb      	ldr	r3, [r5, r3]
 8007104:	4798      	blx	r3
 8007106:	3601      	adds	r6, #1
 8007108:	e7ee      	b.n	80070e8 <__libc_init_array+0xc>
 800710a:	00b3      	lsls	r3, r6, #2
 800710c:	58eb      	ldr	r3, [r5, r3]
 800710e:	4798      	blx	r3
 8007110:	3601      	adds	r6, #1
 8007112:	e7f2      	b.n	80070fa <__libc_init_array+0x1e>
 8007114:	08007f68 	.word	0x08007f68
 8007118:	08007f68 	.word	0x08007f68
 800711c:	08007f68 	.word	0x08007f68
 8007120:	08007f6c 	.word	0x08007f6c

08007124 <memcpy>:
 8007124:	2300      	movs	r3, #0
 8007126:	b510      	push	{r4, lr}
 8007128:	429a      	cmp	r2, r3
 800712a:	d100      	bne.n	800712e <memcpy+0xa>
 800712c:	bd10      	pop	{r4, pc}
 800712e:	5ccc      	ldrb	r4, [r1, r3]
 8007130:	54c4      	strb	r4, [r0, r3]
 8007132:	3301      	adds	r3, #1
 8007134:	e7f8      	b.n	8007128 <memcpy+0x4>

08007136 <memset>:
 8007136:	0003      	movs	r3, r0
 8007138:	1812      	adds	r2, r2, r0
 800713a:	4293      	cmp	r3, r2
 800713c:	d100      	bne.n	8007140 <memset+0xa>
 800713e:	4770      	bx	lr
 8007140:	7019      	strb	r1, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	e7f9      	b.n	800713a <memset+0x4>

08007146 <strncmp>:
 8007146:	2300      	movs	r3, #0
 8007148:	b530      	push	{r4, r5, lr}
 800714a:	429a      	cmp	r2, r3
 800714c:	d00a      	beq.n	8007164 <strncmp+0x1e>
 800714e:	3a01      	subs	r2, #1
 8007150:	5cc4      	ldrb	r4, [r0, r3]
 8007152:	5ccd      	ldrb	r5, [r1, r3]
 8007154:	42ac      	cmp	r4, r5
 8007156:	d104      	bne.n	8007162 <strncmp+0x1c>
 8007158:	4293      	cmp	r3, r2
 800715a:	d002      	beq.n	8007162 <strncmp+0x1c>
 800715c:	3301      	adds	r3, #1
 800715e:	2c00      	cmp	r4, #0
 8007160:	d1f6      	bne.n	8007150 <strncmp+0xa>
 8007162:	1b63      	subs	r3, r4, r5
 8007164:	0018      	movs	r0, r3
 8007166:	bd30      	pop	{r4, r5, pc}

08007168 <_vsniprintf_r>:
 8007168:	b530      	push	{r4, r5, lr}
 800716a:	0014      	movs	r4, r2
 800716c:	b09b      	sub	sp, #108	; 0x6c
 800716e:	0005      	movs	r5, r0
 8007170:	001a      	movs	r2, r3
 8007172:	2c00      	cmp	r4, #0
 8007174:	da05      	bge.n	8007182 <_vsniprintf_r+0x1a>
 8007176:	238b      	movs	r3, #139	; 0x8b
 8007178:	6003      	str	r3, [r0, #0]
 800717a:	2001      	movs	r0, #1
 800717c:	4240      	negs	r0, r0
 800717e:	b01b      	add	sp, #108	; 0x6c
 8007180:	bd30      	pop	{r4, r5, pc}
 8007182:	2382      	movs	r3, #130	; 0x82
 8007184:	4668      	mov	r0, sp
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	8183      	strh	r3, [r0, #12]
 800718a:	2300      	movs	r3, #0
 800718c:	9100      	str	r1, [sp, #0]
 800718e:	9104      	str	r1, [sp, #16]
 8007190:	429c      	cmp	r4, r3
 8007192:	d000      	beq.n	8007196 <_vsniprintf_r+0x2e>
 8007194:	1e63      	subs	r3, r4, #1
 8007196:	9302      	str	r3, [sp, #8]
 8007198:	9305      	str	r3, [sp, #20]
 800719a:	2301      	movs	r3, #1
 800719c:	4669      	mov	r1, sp
 800719e:	425b      	negs	r3, r3
 80071a0:	81cb      	strh	r3, [r1, #14]
 80071a2:	0028      	movs	r0, r5
 80071a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071a6:	f000 f879 	bl	800729c <_svfiprintf_r>
 80071aa:	1c43      	adds	r3, r0, #1
 80071ac:	da01      	bge.n	80071b2 <_vsniprintf_r+0x4a>
 80071ae:	238b      	movs	r3, #139	; 0x8b
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	2c00      	cmp	r4, #0
 80071b4:	d0e3      	beq.n	800717e <_vsniprintf_r+0x16>
 80071b6:	2300      	movs	r3, #0
 80071b8:	9a00      	ldr	r2, [sp, #0]
 80071ba:	7013      	strb	r3, [r2, #0]
 80071bc:	e7df      	b.n	800717e <_vsniprintf_r+0x16>
	...

080071c0 <vsniprintf>:
 80071c0:	b507      	push	{r0, r1, r2, lr}
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	0013      	movs	r3, r2
 80071c6:	000a      	movs	r2, r1
 80071c8:	0001      	movs	r1, r0
 80071ca:	4802      	ldr	r0, [pc, #8]	; (80071d4 <vsniprintf+0x14>)
 80071cc:	6800      	ldr	r0, [r0, #0]
 80071ce:	f7ff ffcb 	bl	8007168 <_vsniprintf_r>
 80071d2:	bd0e      	pop	{r1, r2, r3, pc}
 80071d4:	20000038 	.word	0x20000038

080071d8 <__ssputs_r>:
 80071d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071da:	688e      	ldr	r6, [r1, #8]
 80071dc:	b085      	sub	sp, #20
 80071de:	0007      	movs	r7, r0
 80071e0:	000c      	movs	r4, r1
 80071e2:	9203      	str	r2, [sp, #12]
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	429e      	cmp	r6, r3
 80071e8:	d83c      	bhi.n	8007264 <__ssputs_r+0x8c>
 80071ea:	2390      	movs	r3, #144	; 0x90
 80071ec:	898a      	ldrh	r2, [r1, #12]
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	421a      	tst	r2, r3
 80071f2:	d034      	beq.n	800725e <__ssputs_r+0x86>
 80071f4:	2503      	movs	r5, #3
 80071f6:	6909      	ldr	r1, [r1, #16]
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	1a5b      	subs	r3, r3, r1
 80071fc:	9302      	str	r3, [sp, #8]
 80071fe:	6963      	ldr	r3, [r4, #20]
 8007200:	9802      	ldr	r0, [sp, #8]
 8007202:	435d      	muls	r5, r3
 8007204:	0feb      	lsrs	r3, r5, #31
 8007206:	195d      	adds	r5, r3, r5
 8007208:	9b01      	ldr	r3, [sp, #4]
 800720a:	106d      	asrs	r5, r5, #1
 800720c:	3301      	adds	r3, #1
 800720e:	181b      	adds	r3, r3, r0
 8007210:	42ab      	cmp	r3, r5
 8007212:	d900      	bls.n	8007216 <__ssputs_r+0x3e>
 8007214:	001d      	movs	r5, r3
 8007216:	0553      	lsls	r3, r2, #21
 8007218:	d532      	bpl.n	8007280 <__ssputs_r+0xa8>
 800721a:	0029      	movs	r1, r5
 800721c:	0038      	movs	r0, r7
 800721e:	f000 fb19 	bl	8007854 <_malloc_r>
 8007222:	1e06      	subs	r6, r0, #0
 8007224:	d109      	bne.n	800723a <__ssputs_r+0x62>
 8007226:	230c      	movs	r3, #12
 8007228:	603b      	str	r3, [r7, #0]
 800722a:	2340      	movs	r3, #64	; 0x40
 800722c:	2001      	movs	r0, #1
 800722e:	89a2      	ldrh	r2, [r4, #12]
 8007230:	4240      	negs	r0, r0
 8007232:	4313      	orrs	r3, r2
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	b005      	add	sp, #20
 8007238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800723a:	9a02      	ldr	r2, [sp, #8]
 800723c:	6921      	ldr	r1, [r4, #16]
 800723e:	f7ff ff71 	bl	8007124 <memcpy>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	4a14      	ldr	r2, [pc, #80]	; (8007298 <__ssputs_r+0xc0>)
 8007246:	401a      	ands	r2, r3
 8007248:	2380      	movs	r3, #128	; 0x80
 800724a:	4313      	orrs	r3, r2
 800724c:	81a3      	strh	r3, [r4, #12]
 800724e:	9b02      	ldr	r3, [sp, #8]
 8007250:	6126      	str	r6, [r4, #16]
 8007252:	18f6      	adds	r6, r6, r3
 8007254:	6026      	str	r6, [r4, #0]
 8007256:	6165      	str	r5, [r4, #20]
 8007258:	9e01      	ldr	r6, [sp, #4]
 800725a:	1aed      	subs	r5, r5, r3
 800725c:	60a5      	str	r5, [r4, #8]
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	429e      	cmp	r6, r3
 8007262:	d900      	bls.n	8007266 <__ssputs_r+0x8e>
 8007264:	9e01      	ldr	r6, [sp, #4]
 8007266:	0032      	movs	r2, r6
 8007268:	9903      	ldr	r1, [sp, #12]
 800726a:	6820      	ldr	r0, [r4, #0]
 800726c:	f000 fa95 	bl	800779a <memmove>
 8007270:	68a3      	ldr	r3, [r4, #8]
 8007272:	2000      	movs	r0, #0
 8007274:	1b9b      	subs	r3, r3, r6
 8007276:	60a3      	str	r3, [r4, #8]
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	199e      	adds	r6, r3, r6
 800727c:	6026      	str	r6, [r4, #0]
 800727e:	e7da      	b.n	8007236 <__ssputs_r+0x5e>
 8007280:	002a      	movs	r2, r5
 8007282:	0038      	movs	r0, r7
 8007284:	f000 fb44 	bl	8007910 <_realloc_r>
 8007288:	1e06      	subs	r6, r0, #0
 800728a:	d1e0      	bne.n	800724e <__ssputs_r+0x76>
 800728c:	6921      	ldr	r1, [r4, #16]
 800728e:	0038      	movs	r0, r7
 8007290:	f000 fa96 	bl	80077c0 <_free_r>
 8007294:	e7c7      	b.n	8007226 <__ssputs_r+0x4e>
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	fffffb7f 	.word	0xfffffb7f

0800729c <_svfiprintf_r>:
 800729c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729e:	b0a1      	sub	sp, #132	; 0x84
 80072a0:	9003      	str	r0, [sp, #12]
 80072a2:	001d      	movs	r5, r3
 80072a4:	898b      	ldrh	r3, [r1, #12]
 80072a6:	000f      	movs	r7, r1
 80072a8:	0016      	movs	r6, r2
 80072aa:	061b      	lsls	r3, r3, #24
 80072ac:	d511      	bpl.n	80072d2 <_svfiprintf_r+0x36>
 80072ae:	690b      	ldr	r3, [r1, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10e      	bne.n	80072d2 <_svfiprintf_r+0x36>
 80072b4:	2140      	movs	r1, #64	; 0x40
 80072b6:	f000 facd 	bl	8007854 <_malloc_r>
 80072ba:	6038      	str	r0, [r7, #0]
 80072bc:	6138      	str	r0, [r7, #16]
 80072be:	2800      	cmp	r0, #0
 80072c0:	d105      	bne.n	80072ce <_svfiprintf_r+0x32>
 80072c2:	230c      	movs	r3, #12
 80072c4:	9a03      	ldr	r2, [sp, #12]
 80072c6:	3801      	subs	r0, #1
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	b021      	add	sp, #132	; 0x84
 80072cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ce:	2340      	movs	r3, #64	; 0x40
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	2300      	movs	r3, #0
 80072d4:	ac08      	add	r4, sp, #32
 80072d6:	6163      	str	r3, [r4, #20]
 80072d8:	3320      	adds	r3, #32
 80072da:	7663      	strb	r3, [r4, #25]
 80072dc:	3310      	adds	r3, #16
 80072de:	76a3      	strb	r3, [r4, #26]
 80072e0:	9507      	str	r5, [sp, #28]
 80072e2:	0035      	movs	r5, r6
 80072e4:	782b      	ldrb	r3, [r5, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <_svfiprintf_r+0x52>
 80072ea:	2b25      	cmp	r3, #37	; 0x25
 80072ec:	d146      	bne.n	800737c <_svfiprintf_r+0xe0>
 80072ee:	1bab      	subs	r3, r5, r6
 80072f0:	9305      	str	r3, [sp, #20]
 80072f2:	d00c      	beq.n	800730e <_svfiprintf_r+0x72>
 80072f4:	0032      	movs	r2, r6
 80072f6:	0039      	movs	r1, r7
 80072f8:	9803      	ldr	r0, [sp, #12]
 80072fa:	f7ff ff6d 	bl	80071d8 <__ssputs_r>
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	d100      	bne.n	8007304 <_svfiprintf_r+0x68>
 8007302:	e0ae      	b.n	8007462 <_svfiprintf_r+0x1c6>
 8007304:	6962      	ldr	r2, [r4, #20]
 8007306:	9b05      	ldr	r3, [sp, #20]
 8007308:	4694      	mov	ip, r2
 800730a:	4463      	add	r3, ip
 800730c:	6163      	str	r3, [r4, #20]
 800730e:	782b      	ldrb	r3, [r5, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d100      	bne.n	8007316 <_svfiprintf_r+0x7a>
 8007314:	e0a5      	b.n	8007462 <_svfiprintf_r+0x1c6>
 8007316:	2201      	movs	r2, #1
 8007318:	2300      	movs	r3, #0
 800731a:	4252      	negs	r2, r2
 800731c:	6062      	str	r2, [r4, #4]
 800731e:	a904      	add	r1, sp, #16
 8007320:	3254      	adds	r2, #84	; 0x54
 8007322:	1852      	adds	r2, r2, r1
 8007324:	1c6e      	adds	r6, r5, #1
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	60e3      	str	r3, [r4, #12]
 800732a:	60a3      	str	r3, [r4, #8]
 800732c:	7013      	strb	r3, [r2, #0]
 800732e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007330:	7831      	ldrb	r1, [r6, #0]
 8007332:	2205      	movs	r2, #5
 8007334:	4853      	ldr	r0, [pc, #332]	; (8007484 <_svfiprintf_r+0x1e8>)
 8007336:	f000 fa25 	bl	8007784 <memchr>
 800733a:	1c75      	adds	r5, r6, #1
 800733c:	2800      	cmp	r0, #0
 800733e:	d11f      	bne.n	8007380 <_svfiprintf_r+0xe4>
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	06d3      	lsls	r3, r2, #27
 8007344:	d504      	bpl.n	8007350 <_svfiprintf_r+0xb4>
 8007346:	2353      	movs	r3, #83	; 0x53
 8007348:	a904      	add	r1, sp, #16
 800734a:	185b      	adds	r3, r3, r1
 800734c:	2120      	movs	r1, #32
 800734e:	7019      	strb	r1, [r3, #0]
 8007350:	0713      	lsls	r3, r2, #28
 8007352:	d504      	bpl.n	800735e <_svfiprintf_r+0xc2>
 8007354:	2353      	movs	r3, #83	; 0x53
 8007356:	a904      	add	r1, sp, #16
 8007358:	185b      	adds	r3, r3, r1
 800735a:	212b      	movs	r1, #43	; 0x2b
 800735c:	7019      	strb	r1, [r3, #0]
 800735e:	7833      	ldrb	r3, [r6, #0]
 8007360:	2b2a      	cmp	r3, #42	; 0x2a
 8007362:	d016      	beq.n	8007392 <_svfiprintf_r+0xf6>
 8007364:	0035      	movs	r5, r6
 8007366:	2100      	movs	r1, #0
 8007368:	200a      	movs	r0, #10
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	782a      	ldrb	r2, [r5, #0]
 800736e:	1c6e      	adds	r6, r5, #1
 8007370:	3a30      	subs	r2, #48	; 0x30
 8007372:	2a09      	cmp	r2, #9
 8007374:	d94e      	bls.n	8007414 <_svfiprintf_r+0x178>
 8007376:	2900      	cmp	r1, #0
 8007378:	d018      	beq.n	80073ac <_svfiprintf_r+0x110>
 800737a:	e010      	b.n	800739e <_svfiprintf_r+0x102>
 800737c:	3501      	adds	r5, #1
 800737e:	e7b1      	b.n	80072e4 <_svfiprintf_r+0x48>
 8007380:	4b40      	ldr	r3, [pc, #256]	; (8007484 <_svfiprintf_r+0x1e8>)
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	1ac0      	subs	r0, r0, r3
 8007386:	2301      	movs	r3, #1
 8007388:	4083      	lsls	r3, r0
 800738a:	4313      	orrs	r3, r2
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	002e      	movs	r6, r5
 8007390:	e7ce      	b.n	8007330 <_svfiprintf_r+0x94>
 8007392:	9b07      	ldr	r3, [sp, #28]
 8007394:	1d19      	adds	r1, r3, #4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	9107      	str	r1, [sp, #28]
 800739a:	2b00      	cmp	r3, #0
 800739c:	db01      	blt.n	80073a2 <_svfiprintf_r+0x106>
 800739e:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a0:	e004      	b.n	80073ac <_svfiprintf_r+0x110>
 80073a2:	425b      	negs	r3, r3
 80073a4:	60e3      	str	r3, [r4, #12]
 80073a6:	2302      	movs	r3, #2
 80073a8:	4313      	orrs	r3, r2
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	782b      	ldrb	r3, [r5, #0]
 80073ae:	2b2e      	cmp	r3, #46	; 0x2e
 80073b0:	d10a      	bne.n	80073c8 <_svfiprintf_r+0x12c>
 80073b2:	786b      	ldrb	r3, [r5, #1]
 80073b4:	2b2a      	cmp	r3, #42	; 0x2a
 80073b6:	d135      	bne.n	8007424 <_svfiprintf_r+0x188>
 80073b8:	9b07      	ldr	r3, [sp, #28]
 80073ba:	3502      	adds	r5, #2
 80073bc:	1d1a      	adds	r2, r3, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	9207      	str	r2, [sp, #28]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	db2b      	blt.n	800741e <_svfiprintf_r+0x182>
 80073c6:	9309      	str	r3, [sp, #36]	; 0x24
 80073c8:	4e2f      	ldr	r6, [pc, #188]	; (8007488 <_svfiprintf_r+0x1ec>)
 80073ca:	7829      	ldrb	r1, [r5, #0]
 80073cc:	2203      	movs	r2, #3
 80073ce:	0030      	movs	r0, r6
 80073d0:	f000 f9d8 	bl	8007784 <memchr>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d006      	beq.n	80073e6 <_svfiprintf_r+0x14a>
 80073d8:	2340      	movs	r3, #64	; 0x40
 80073da:	1b80      	subs	r0, r0, r6
 80073dc:	4083      	lsls	r3, r0
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	3501      	adds	r5, #1
 80073e2:	4313      	orrs	r3, r2
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	7829      	ldrb	r1, [r5, #0]
 80073e8:	2206      	movs	r2, #6
 80073ea:	4828      	ldr	r0, [pc, #160]	; (800748c <_svfiprintf_r+0x1f0>)
 80073ec:	1c6e      	adds	r6, r5, #1
 80073ee:	7621      	strb	r1, [r4, #24]
 80073f0:	f000 f9c8 	bl	8007784 <memchr>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d03c      	beq.n	8007472 <_svfiprintf_r+0x1d6>
 80073f8:	4b25      	ldr	r3, [pc, #148]	; (8007490 <_svfiprintf_r+0x1f4>)
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d125      	bne.n	800744a <_svfiprintf_r+0x1ae>
 80073fe:	2207      	movs	r2, #7
 8007400:	9b07      	ldr	r3, [sp, #28]
 8007402:	3307      	adds	r3, #7
 8007404:	4393      	bics	r3, r2
 8007406:	3308      	adds	r3, #8
 8007408:	9307      	str	r3, [sp, #28]
 800740a:	6963      	ldr	r3, [r4, #20]
 800740c:	9a04      	ldr	r2, [sp, #16]
 800740e:	189b      	adds	r3, r3, r2
 8007410:	6163      	str	r3, [r4, #20]
 8007412:	e766      	b.n	80072e2 <_svfiprintf_r+0x46>
 8007414:	4343      	muls	r3, r0
 8007416:	2101      	movs	r1, #1
 8007418:	189b      	adds	r3, r3, r2
 800741a:	0035      	movs	r5, r6
 800741c:	e7a6      	b.n	800736c <_svfiprintf_r+0xd0>
 800741e:	2301      	movs	r3, #1
 8007420:	425b      	negs	r3, r3
 8007422:	e7d0      	b.n	80073c6 <_svfiprintf_r+0x12a>
 8007424:	2300      	movs	r3, #0
 8007426:	200a      	movs	r0, #10
 8007428:	001a      	movs	r2, r3
 800742a:	3501      	adds	r5, #1
 800742c:	6063      	str	r3, [r4, #4]
 800742e:	7829      	ldrb	r1, [r5, #0]
 8007430:	1c6e      	adds	r6, r5, #1
 8007432:	3930      	subs	r1, #48	; 0x30
 8007434:	2909      	cmp	r1, #9
 8007436:	d903      	bls.n	8007440 <_svfiprintf_r+0x1a4>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0c5      	beq.n	80073c8 <_svfiprintf_r+0x12c>
 800743c:	9209      	str	r2, [sp, #36]	; 0x24
 800743e:	e7c3      	b.n	80073c8 <_svfiprintf_r+0x12c>
 8007440:	4342      	muls	r2, r0
 8007442:	2301      	movs	r3, #1
 8007444:	1852      	adds	r2, r2, r1
 8007446:	0035      	movs	r5, r6
 8007448:	e7f1      	b.n	800742e <_svfiprintf_r+0x192>
 800744a:	ab07      	add	r3, sp, #28
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	003a      	movs	r2, r7
 8007450:	4b10      	ldr	r3, [pc, #64]	; (8007494 <_svfiprintf_r+0x1f8>)
 8007452:	0021      	movs	r1, r4
 8007454:	9803      	ldr	r0, [sp, #12]
 8007456:	e000      	b.n	800745a <_svfiprintf_r+0x1be>
 8007458:	bf00      	nop
 800745a:	9004      	str	r0, [sp, #16]
 800745c:	9b04      	ldr	r3, [sp, #16]
 800745e:	3301      	adds	r3, #1
 8007460:	d1d3      	bne.n	800740a <_svfiprintf_r+0x16e>
 8007462:	89bb      	ldrh	r3, [r7, #12]
 8007464:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007466:	065b      	lsls	r3, r3, #25
 8007468:	d400      	bmi.n	800746c <_svfiprintf_r+0x1d0>
 800746a:	e72e      	b.n	80072ca <_svfiprintf_r+0x2e>
 800746c:	2001      	movs	r0, #1
 800746e:	4240      	negs	r0, r0
 8007470:	e72b      	b.n	80072ca <_svfiprintf_r+0x2e>
 8007472:	ab07      	add	r3, sp, #28
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	003a      	movs	r2, r7
 8007478:	4b06      	ldr	r3, [pc, #24]	; (8007494 <_svfiprintf_r+0x1f8>)
 800747a:	0021      	movs	r1, r4
 800747c:	9803      	ldr	r0, [sp, #12]
 800747e:	f000 f879 	bl	8007574 <_printf_i>
 8007482:	e7ea      	b.n	800745a <_svfiprintf_r+0x1be>
 8007484:	08007f2b 	.word	0x08007f2b
 8007488:	08007f31 	.word	0x08007f31
 800748c:	08007f35 	.word	0x08007f35
 8007490:	00000000 	.word	0x00000000
 8007494:	080071d9 	.word	0x080071d9

08007498 <_printf_common>:
 8007498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800749a:	0015      	movs	r5, r2
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	688a      	ldr	r2, [r1, #8]
 80074a0:	690b      	ldr	r3, [r1, #16]
 80074a2:	9000      	str	r0, [sp, #0]
 80074a4:	000c      	movs	r4, r1
 80074a6:	4293      	cmp	r3, r2
 80074a8:	da00      	bge.n	80074ac <_printf_common+0x14>
 80074aa:	0013      	movs	r3, r2
 80074ac:	0022      	movs	r2, r4
 80074ae:	602b      	str	r3, [r5, #0]
 80074b0:	3243      	adds	r2, #67	; 0x43
 80074b2:	7812      	ldrb	r2, [r2, #0]
 80074b4:	2a00      	cmp	r2, #0
 80074b6:	d001      	beq.n	80074bc <_printf_common+0x24>
 80074b8:	3301      	adds	r3, #1
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	069b      	lsls	r3, r3, #26
 80074c0:	d502      	bpl.n	80074c8 <_printf_common+0x30>
 80074c2:	682b      	ldr	r3, [r5, #0]
 80074c4:	3302      	adds	r3, #2
 80074c6:	602b      	str	r3, [r5, #0]
 80074c8:	2706      	movs	r7, #6
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	401f      	ands	r7, r3
 80074ce:	d027      	beq.n	8007520 <_printf_common+0x88>
 80074d0:	0023      	movs	r3, r4
 80074d2:	3343      	adds	r3, #67	; 0x43
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	1e5a      	subs	r2, r3, #1
 80074d8:	4193      	sbcs	r3, r2
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	0692      	lsls	r2, r2, #26
 80074de:	d430      	bmi.n	8007542 <_printf_common+0xaa>
 80074e0:	0022      	movs	r2, r4
 80074e2:	9901      	ldr	r1, [sp, #4]
 80074e4:	3243      	adds	r2, #67	; 0x43
 80074e6:	9800      	ldr	r0, [sp, #0]
 80074e8:	9e08      	ldr	r6, [sp, #32]
 80074ea:	47b0      	blx	r6
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d025      	beq.n	800753c <_printf_common+0xa4>
 80074f0:	2306      	movs	r3, #6
 80074f2:	6820      	ldr	r0, [r4, #0]
 80074f4:	682a      	ldr	r2, [r5, #0]
 80074f6:	68e1      	ldr	r1, [r4, #12]
 80074f8:	4003      	ands	r3, r0
 80074fa:	2500      	movs	r5, #0
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d103      	bne.n	8007508 <_printf_common+0x70>
 8007500:	1a8d      	subs	r5, r1, r2
 8007502:	43eb      	mvns	r3, r5
 8007504:	17db      	asrs	r3, r3, #31
 8007506:	401d      	ands	r5, r3
 8007508:	68a3      	ldr	r3, [r4, #8]
 800750a:	6922      	ldr	r2, [r4, #16]
 800750c:	4293      	cmp	r3, r2
 800750e:	dd01      	ble.n	8007514 <_printf_common+0x7c>
 8007510:	1a9b      	subs	r3, r3, r2
 8007512:	18ed      	adds	r5, r5, r3
 8007514:	2700      	movs	r7, #0
 8007516:	42bd      	cmp	r5, r7
 8007518:	d120      	bne.n	800755c <_printf_common+0xc4>
 800751a:	2000      	movs	r0, #0
 800751c:	e010      	b.n	8007540 <_printf_common+0xa8>
 800751e:	3701      	adds	r7, #1
 8007520:	68e3      	ldr	r3, [r4, #12]
 8007522:	682a      	ldr	r2, [r5, #0]
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	42bb      	cmp	r3, r7
 8007528:	ddd2      	ble.n	80074d0 <_printf_common+0x38>
 800752a:	0022      	movs	r2, r4
 800752c:	2301      	movs	r3, #1
 800752e:	3219      	adds	r2, #25
 8007530:	9901      	ldr	r1, [sp, #4]
 8007532:	9800      	ldr	r0, [sp, #0]
 8007534:	9e08      	ldr	r6, [sp, #32]
 8007536:	47b0      	blx	r6
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d1f0      	bne.n	800751e <_printf_common+0x86>
 800753c:	2001      	movs	r0, #1
 800753e:	4240      	negs	r0, r0
 8007540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007542:	2030      	movs	r0, #48	; 0x30
 8007544:	18e1      	adds	r1, r4, r3
 8007546:	3143      	adds	r1, #67	; 0x43
 8007548:	7008      	strb	r0, [r1, #0]
 800754a:	0021      	movs	r1, r4
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	3145      	adds	r1, #69	; 0x45
 8007550:	7809      	ldrb	r1, [r1, #0]
 8007552:	18a2      	adds	r2, r4, r2
 8007554:	3243      	adds	r2, #67	; 0x43
 8007556:	3302      	adds	r3, #2
 8007558:	7011      	strb	r1, [r2, #0]
 800755a:	e7c1      	b.n	80074e0 <_printf_common+0x48>
 800755c:	0022      	movs	r2, r4
 800755e:	2301      	movs	r3, #1
 8007560:	321a      	adds	r2, #26
 8007562:	9901      	ldr	r1, [sp, #4]
 8007564:	9800      	ldr	r0, [sp, #0]
 8007566:	9e08      	ldr	r6, [sp, #32]
 8007568:	47b0      	blx	r6
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	d0e6      	beq.n	800753c <_printf_common+0xa4>
 800756e:	3701      	adds	r7, #1
 8007570:	e7d1      	b.n	8007516 <_printf_common+0x7e>
	...

08007574 <_printf_i>:
 8007574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007576:	b089      	sub	sp, #36	; 0x24
 8007578:	9204      	str	r2, [sp, #16]
 800757a:	000a      	movs	r2, r1
 800757c:	3243      	adds	r2, #67	; 0x43
 800757e:	9305      	str	r3, [sp, #20]
 8007580:	9003      	str	r0, [sp, #12]
 8007582:	9202      	str	r2, [sp, #8]
 8007584:	7e0a      	ldrb	r2, [r1, #24]
 8007586:	000c      	movs	r4, r1
 8007588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800758a:	2a6e      	cmp	r2, #110	; 0x6e
 800758c:	d100      	bne.n	8007590 <_printf_i+0x1c>
 800758e:	e086      	b.n	800769e <_printf_i+0x12a>
 8007590:	d81f      	bhi.n	80075d2 <_printf_i+0x5e>
 8007592:	2a63      	cmp	r2, #99	; 0x63
 8007594:	d033      	beq.n	80075fe <_printf_i+0x8a>
 8007596:	d808      	bhi.n	80075aa <_printf_i+0x36>
 8007598:	2a00      	cmp	r2, #0
 800759a:	d100      	bne.n	800759e <_printf_i+0x2a>
 800759c:	e08c      	b.n	80076b8 <_printf_i+0x144>
 800759e:	2a58      	cmp	r2, #88	; 0x58
 80075a0:	d04d      	beq.n	800763e <_printf_i+0xca>
 80075a2:	0025      	movs	r5, r4
 80075a4:	3542      	adds	r5, #66	; 0x42
 80075a6:	702a      	strb	r2, [r5, #0]
 80075a8:	e030      	b.n	800760c <_printf_i+0x98>
 80075aa:	2a64      	cmp	r2, #100	; 0x64
 80075ac:	d001      	beq.n	80075b2 <_printf_i+0x3e>
 80075ae:	2a69      	cmp	r2, #105	; 0x69
 80075b0:	d1f7      	bne.n	80075a2 <_printf_i+0x2e>
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	6825      	ldr	r5, [r4, #0]
 80075b6:	1d0a      	adds	r2, r1, #4
 80075b8:	0628      	lsls	r0, r5, #24
 80075ba:	d529      	bpl.n	8007610 <_printf_i+0x9c>
 80075bc:	6808      	ldr	r0, [r1, #0]
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	2800      	cmp	r0, #0
 80075c2:	da03      	bge.n	80075cc <_printf_i+0x58>
 80075c4:	232d      	movs	r3, #45	; 0x2d
 80075c6:	9a02      	ldr	r2, [sp, #8]
 80075c8:	4240      	negs	r0, r0
 80075ca:	7013      	strb	r3, [r2, #0]
 80075cc:	4e6b      	ldr	r6, [pc, #428]	; (800777c <_printf_i+0x208>)
 80075ce:	270a      	movs	r7, #10
 80075d0:	e04f      	b.n	8007672 <_printf_i+0xfe>
 80075d2:	2a73      	cmp	r2, #115	; 0x73
 80075d4:	d074      	beq.n	80076c0 <_printf_i+0x14c>
 80075d6:	d808      	bhi.n	80075ea <_printf_i+0x76>
 80075d8:	2a6f      	cmp	r2, #111	; 0x6f
 80075da:	d01f      	beq.n	800761c <_printf_i+0xa8>
 80075dc:	2a70      	cmp	r2, #112	; 0x70
 80075de:	d1e0      	bne.n	80075a2 <_printf_i+0x2e>
 80075e0:	2220      	movs	r2, #32
 80075e2:	6809      	ldr	r1, [r1, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	6022      	str	r2, [r4, #0]
 80075e8:	e003      	b.n	80075f2 <_printf_i+0x7e>
 80075ea:	2a75      	cmp	r2, #117	; 0x75
 80075ec:	d016      	beq.n	800761c <_printf_i+0xa8>
 80075ee:	2a78      	cmp	r2, #120	; 0x78
 80075f0:	d1d7      	bne.n	80075a2 <_printf_i+0x2e>
 80075f2:	0022      	movs	r2, r4
 80075f4:	2178      	movs	r1, #120	; 0x78
 80075f6:	3245      	adds	r2, #69	; 0x45
 80075f8:	7011      	strb	r1, [r2, #0]
 80075fa:	4e61      	ldr	r6, [pc, #388]	; (8007780 <_printf_i+0x20c>)
 80075fc:	e022      	b.n	8007644 <_printf_i+0xd0>
 80075fe:	0025      	movs	r5, r4
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	3542      	adds	r5, #66	; 0x42
 8007604:	1d11      	adds	r1, r2, #4
 8007606:	6019      	str	r1, [r3, #0]
 8007608:	6813      	ldr	r3, [r2, #0]
 800760a:	702b      	strb	r3, [r5, #0]
 800760c:	2301      	movs	r3, #1
 800760e:	e065      	b.n	80076dc <_printf_i+0x168>
 8007610:	6808      	ldr	r0, [r1, #0]
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	0669      	lsls	r1, r5, #25
 8007616:	d5d3      	bpl.n	80075c0 <_printf_i+0x4c>
 8007618:	b200      	sxth	r0, r0
 800761a:	e7d1      	b.n	80075c0 <_printf_i+0x4c>
 800761c:	6819      	ldr	r1, [r3, #0]
 800761e:	6825      	ldr	r5, [r4, #0]
 8007620:	1d08      	adds	r0, r1, #4
 8007622:	6018      	str	r0, [r3, #0]
 8007624:	6808      	ldr	r0, [r1, #0]
 8007626:	062e      	lsls	r6, r5, #24
 8007628:	d505      	bpl.n	8007636 <_printf_i+0xc2>
 800762a:	4e54      	ldr	r6, [pc, #336]	; (800777c <_printf_i+0x208>)
 800762c:	2708      	movs	r7, #8
 800762e:	2a6f      	cmp	r2, #111	; 0x6f
 8007630:	d01b      	beq.n	800766a <_printf_i+0xf6>
 8007632:	270a      	movs	r7, #10
 8007634:	e019      	b.n	800766a <_printf_i+0xf6>
 8007636:	066d      	lsls	r5, r5, #25
 8007638:	d5f7      	bpl.n	800762a <_printf_i+0xb6>
 800763a:	b280      	uxth	r0, r0
 800763c:	e7f5      	b.n	800762a <_printf_i+0xb6>
 800763e:	3145      	adds	r1, #69	; 0x45
 8007640:	4e4e      	ldr	r6, [pc, #312]	; (800777c <_printf_i+0x208>)
 8007642:	700a      	strb	r2, [r1, #0]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	6822      	ldr	r2, [r4, #0]
 8007648:	1d01      	adds	r1, r0, #4
 800764a:	6800      	ldr	r0, [r0, #0]
 800764c:	6019      	str	r1, [r3, #0]
 800764e:	0615      	lsls	r5, r2, #24
 8007650:	d521      	bpl.n	8007696 <_printf_i+0x122>
 8007652:	07d3      	lsls	r3, r2, #31
 8007654:	d502      	bpl.n	800765c <_printf_i+0xe8>
 8007656:	2320      	movs	r3, #32
 8007658:	431a      	orrs	r2, r3
 800765a:	6022      	str	r2, [r4, #0]
 800765c:	2710      	movs	r7, #16
 800765e:	2800      	cmp	r0, #0
 8007660:	d103      	bne.n	800766a <_printf_i+0xf6>
 8007662:	2320      	movs	r3, #32
 8007664:	6822      	ldr	r2, [r4, #0]
 8007666:	439a      	bics	r2, r3
 8007668:	6022      	str	r2, [r4, #0]
 800766a:	0023      	movs	r3, r4
 800766c:	2200      	movs	r2, #0
 800766e:	3343      	adds	r3, #67	; 0x43
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	6863      	ldr	r3, [r4, #4]
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	db58      	blt.n	800772c <_printf_i+0x1b8>
 800767a:	2204      	movs	r2, #4
 800767c:	6821      	ldr	r1, [r4, #0]
 800767e:	4391      	bics	r1, r2
 8007680:	6021      	str	r1, [r4, #0]
 8007682:	2800      	cmp	r0, #0
 8007684:	d154      	bne.n	8007730 <_printf_i+0x1bc>
 8007686:	9d02      	ldr	r5, [sp, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05a      	beq.n	8007742 <_printf_i+0x1ce>
 800768c:	0025      	movs	r5, r4
 800768e:	7833      	ldrb	r3, [r6, #0]
 8007690:	3542      	adds	r5, #66	; 0x42
 8007692:	702b      	strb	r3, [r5, #0]
 8007694:	e055      	b.n	8007742 <_printf_i+0x1ce>
 8007696:	0655      	lsls	r5, r2, #25
 8007698:	d5db      	bpl.n	8007652 <_printf_i+0xde>
 800769a:	b280      	uxth	r0, r0
 800769c:	e7d9      	b.n	8007652 <_printf_i+0xde>
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	680d      	ldr	r5, [r1, #0]
 80076a2:	1d10      	adds	r0, r2, #4
 80076a4:	6949      	ldr	r1, [r1, #20]
 80076a6:	6018      	str	r0, [r3, #0]
 80076a8:	6813      	ldr	r3, [r2, #0]
 80076aa:	062e      	lsls	r6, r5, #24
 80076ac:	d501      	bpl.n	80076b2 <_printf_i+0x13e>
 80076ae:	6019      	str	r1, [r3, #0]
 80076b0:	e002      	b.n	80076b8 <_printf_i+0x144>
 80076b2:	066d      	lsls	r5, r5, #25
 80076b4:	d5fb      	bpl.n	80076ae <_printf_i+0x13a>
 80076b6:	8019      	strh	r1, [r3, #0]
 80076b8:	2300      	movs	r3, #0
 80076ba:	9d02      	ldr	r5, [sp, #8]
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	e04f      	b.n	8007760 <_printf_i+0x1ec>
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	1d11      	adds	r1, r2, #4
 80076c4:	6019      	str	r1, [r3, #0]
 80076c6:	6815      	ldr	r5, [r2, #0]
 80076c8:	2100      	movs	r1, #0
 80076ca:	6862      	ldr	r2, [r4, #4]
 80076cc:	0028      	movs	r0, r5
 80076ce:	f000 f859 	bl	8007784 <memchr>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d001      	beq.n	80076da <_printf_i+0x166>
 80076d6:	1b40      	subs	r0, r0, r5
 80076d8:	6060      	str	r0, [r4, #4]
 80076da:	6863      	ldr	r3, [r4, #4]
 80076dc:	6123      	str	r3, [r4, #16]
 80076de:	2300      	movs	r3, #0
 80076e0:	9a02      	ldr	r2, [sp, #8]
 80076e2:	7013      	strb	r3, [r2, #0]
 80076e4:	e03c      	b.n	8007760 <_printf_i+0x1ec>
 80076e6:	6923      	ldr	r3, [r4, #16]
 80076e8:	002a      	movs	r2, r5
 80076ea:	9904      	ldr	r1, [sp, #16]
 80076ec:	9803      	ldr	r0, [sp, #12]
 80076ee:	9d05      	ldr	r5, [sp, #20]
 80076f0:	47a8      	blx	r5
 80076f2:	1c43      	adds	r3, r0, #1
 80076f4:	d03e      	beq.n	8007774 <_printf_i+0x200>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	079b      	lsls	r3, r3, #30
 80076fa:	d415      	bmi.n	8007728 <_printf_i+0x1b4>
 80076fc:	9b07      	ldr	r3, [sp, #28]
 80076fe:	68e0      	ldr	r0, [r4, #12]
 8007700:	4298      	cmp	r0, r3
 8007702:	da39      	bge.n	8007778 <_printf_i+0x204>
 8007704:	0018      	movs	r0, r3
 8007706:	e037      	b.n	8007778 <_printf_i+0x204>
 8007708:	0022      	movs	r2, r4
 800770a:	2301      	movs	r3, #1
 800770c:	3219      	adds	r2, #25
 800770e:	9904      	ldr	r1, [sp, #16]
 8007710:	9803      	ldr	r0, [sp, #12]
 8007712:	9e05      	ldr	r6, [sp, #20]
 8007714:	47b0      	blx	r6
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	d02c      	beq.n	8007774 <_printf_i+0x200>
 800771a:	3501      	adds	r5, #1
 800771c:	68e3      	ldr	r3, [r4, #12]
 800771e:	9a07      	ldr	r2, [sp, #28]
 8007720:	1a9b      	subs	r3, r3, r2
 8007722:	42ab      	cmp	r3, r5
 8007724:	dcf0      	bgt.n	8007708 <_printf_i+0x194>
 8007726:	e7e9      	b.n	80076fc <_printf_i+0x188>
 8007728:	2500      	movs	r5, #0
 800772a:	e7f7      	b.n	800771c <_printf_i+0x1a8>
 800772c:	2800      	cmp	r0, #0
 800772e:	d0ad      	beq.n	800768c <_printf_i+0x118>
 8007730:	9d02      	ldr	r5, [sp, #8]
 8007732:	0039      	movs	r1, r7
 8007734:	f7f8 fd78 	bl	8000228 <__aeabi_uidivmod>
 8007738:	5c73      	ldrb	r3, [r6, r1]
 800773a:	3d01      	subs	r5, #1
 800773c:	702b      	strb	r3, [r5, #0]
 800773e:	2800      	cmp	r0, #0
 8007740:	d1f7      	bne.n	8007732 <_printf_i+0x1be>
 8007742:	2f08      	cmp	r7, #8
 8007744:	d109      	bne.n	800775a <_printf_i+0x1e6>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	07db      	lsls	r3, r3, #31
 800774a:	d506      	bpl.n	800775a <_printf_i+0x1e6>
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	6922      	ldr	r2, [r4, #16]
 8007750:	4293      	cmp	r3, r2
 8007752:	dc02      	bgt.n	800775a <_printf_i+0x1e6>
 8007754:	2330      	movs	r3, #48	; 0x30
 8007756:	3d01      	subs	r5, #1
 8007758:	702b      	strb	r3, [r5, #0]
 800775a:	9b02      	ldr	r3, [sp, #8]
 800775c:	1b5b      	subs	r3, r3, r5
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	9b05      	ldr	r3, [sp, #20]
 8007762:	aa07      	add	r2, sp, #28
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	0021      	movs	r1, r4
 8007768:	9b04      	ldr	r3, [sp, #16]
 800776a:	9803      	ldr	r0, [sp, #12]
 800776c:	f7ff fe94 	bl	8007498 <_printf_common>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d1b8      	bne.n	80076e6 <_printf_i+0x172>
 8007774:	2001      	movs	r0, #1
 8007776:	4240      	negs	r0, r0
 8007778:	b009      	add	sp, #36	; 0x24
 800777a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800777c:	08007f3c 	.word	0x08007f3c
 8007780:	08007f4d 	.word	0x08007f4d

08007784 <memchr>:
 8007784:	b2c9      	uxtb	r1, r1
 8007786:	1882      	adds	r2, r0, r2
 8007788:	4290      	cmp	r0, r2
 800778a:	d101      	bne.n	8007790 <memchr+0xc>
 800778c:	2000      	movs	r0, #0
 800778e:	4770      	bx	lr
 8007790:	7803      	ldrb	r3, [r0, #0]
 8007792:	428b      	cmp	r3, r1
 8007794:	d0fb      	beq.n	800778e <memchr+0xa>
 8007796:	3001      	adds	r0, #1
 8007798:	e7f6      	b.n	8007788 <memchr+0x4>

0800779a <memmove>:
 800779a:	b510      	push	{r4, lr}
 800779c:	4288      	cmp	r0, r1
 800779e:	d902      	bls.n	80077a6 <memmove+0xc>
 80077a0:	188b      	adds	r3, r1, r2
 80077a2:	4298      	cmp	r0, r3
 80077a4:	d303      	bcc.n	80077ae <memmove+0x14>
 80077a6:	2300      	movs	r3, #0
 80077a8:	e007      	b.n	80077ba <memmove+0x20>
 80077aa:	5c8b      	ldrb	r3, [r1, r2]
 80077ac:	5483      	strb	r3, [r0, r2]
 80077ae:	3a01      	subs	r2, #1
 80077b0:	d2fb      	bcs.n	80077aa <memmove+0x10>
 80077b2:	bd10      	pop	{r4, pc}
 80077b4:	5ccc      	ldrb	r4, [r1, r3]
 80077b6:	54c4      	strb	r4, [r0, r3]
 80077b8:	3301      	adds	r3, #1
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d1fa      	bne.n	80077b4 <memmove+0x1a>
 80077be:	e7f8      	b.n	80077b2 <memmove+0x18>

080077c0 <_free_r>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	0005      	movs	r5, r0
 80077c4:	2900      	cmp	r1, #0
 80077c6:	d010      	beq.n	80077ea <_free_r+0x2a>
 80077c8:	1f0c      	subs	r4, r1, #4
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da00      	bge.n	80077d2 <_free_r+0x12>
 80077d0:	18e4      	adds	r4, r4, r3
 80077d2:	0028      	movs	r0, r5
 80077d4:	f000 f8d4 	bl	8007980 <__malloc_lock>
 80077d8:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <_free_r+0x90>)
 80077da:	6813      	ldr	r3, [r2, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d105      	bne.n	80077ec <_free_r+0x2c>
 80077e0:	6063      	str	r3, [r4, #4]
 80077e2:	6014      	str	r4, [r2, #0]
 80077e4:	0028      	movs	r0, r5
 80077e6:	f000 f8cc 	bl	8007982 <__malloc_unlock>
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	d909      	bls.n	8007804 <_free_r+0x44>
 80077f0:	6821      	ldr	r1, [r4, #0]
 80077f2:	1860      	adds	r0, r4, r1
 80077f4:	4283      	cmp	r3, r0
 80077f6:	d1f3      	bne.n	80077e0 <_free_r+0x20>
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	1841      	adds	r1, r0, r1
 80077fe:	6021      	str	r1, [r4, #0]
 8007800:	e7ee      	b.n	80077e0 <_free_r+0x20>
 8007802:	0013      	movs	r3, r2
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	2a00      	cmp	r2, #0
 8007808:	d001      	beq.n	800780e <_free_r+0x4e>
 800780a:	42a2      	cmp	r2, r4
 800780c:	d9f9      	bls.n	8007802 <_free_r+0x42>
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	1858      	adds	r0, r3, r1
 8007812:	42a0      	cmp	r0, r4
 8007814:	d10b      	bne.n	800782e <_free_r+0x6e>
 8007816:	6820      	ldr	r0, [r4, #0]
 8007818:	1809      	adds	r1, r1, r0
 800781a:	1858      	adds	r0, r3, r1
 800781c:	6019      	str	r1, [r3, #0]
 800781e:	4282      	cmp	r2, r0
 8007820:	d1e0      	bne.n	80077e4 <_free_r+0x24>
 8007822:	6810      	ldr	r0, [r2, #0]
 8007824:	6852      	ldr	r2, [r2, #4]
 8007826:	1841      	adds	r1, r0, r1
 8007828:	6019      	str	r1, [r3, #0]
 800782a:	605a      	str	r2, [r3, #4]
 800782c:	e7da      	b.n	80077e4 <_free_r+0x24>
 800782e:	42a0      	cmp	r0, r4
 8007830:	d902      	bls.n	8007838 <_free_r+0x78>
 8007832:	230c      	movs	r3, #12
 8007834:	602b      	str	r3, [r5, #0]
 8007836:	e7d5      	b.n	80077e4 <_free_r+0x24>
 8007838:	6821      	ldr	r1, [r4, #0]
 800783a:	1860      	adds	r0, r4, r1
 800783c:	4282      	cmp	r2, r0
 800783e:	d103      	bne.n	8007848 <_free_r+0x88>
 8007840:	6810      	ldr	r0, [r2, #0]
 8007842:	6852      	ldr	r2, [r2, #4]
 8007844:	1841      	adds	r1, r0, r1
 8007846:	6021      	str	r1, [r4, #0]
 8007848:	6062      	str	r2, [r4, #4]
 800784a:	605c      	str	r4, [r3, #4]
 800784c:	e7ca      	b.n	80077e4 <_free_r+0x24>
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	20000550 	.word	0x20000550

08007854 <_malloc_r>:
 8007854:	2303      	movs	r3, #3
 8007856:	b570      	push	{r4, r5, r6, lr}
 8007858:	1ccd      	adds	r5, r1, #3
 800785a:	439d      	bics	r5, r3
 800785c:	3508      	adds	r5, #8
 800785e:	0006      	movs	r6, r0
 8007860:	2d0c      	cmp	r5, #12
 8007862:	d21e      	bcs.n	80078a2 <_malloc_r+0x4e>
 8007864:	250c      	movs	r5, #12
 8007866:	42a9      	cmp	r1, r5
 8007868:	d81d      	bhi.n	80078a6 <_malloc_r+0x52>
 800786a:	0030      	movs	r0, r6
 800786c:	f000 f888 	bl	8007980 <__malloc_lock>
 8007870:	4a25      	ldr	r2, [pc, #148]	; (8007908 <_malloc_r+0xb4>)
 8007872:	6814      	ldr	r4, [r2, #0]
 8007874:	0021      	movs	r1, r4
 8007876:	2900      	cmp	r1, #0
 8007878:	d119      	bne.n	80078ae <_malloc_r+0x5a>
 800787a:	4c24      	ldr	r4, [pc, #144]	; (800790c <_malloc_r+0xb8>)
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d103      	bne.n	800788a <_malloc_r+0x36>
 8007882:	0030      	movs	r0, r6
 8007884:	f000 f86a 	bl	800795c <_sbrk_r>
 8007888:	6020      	str	r0, [r4, #0]
 800788a:	0029      	movs	r1, r5
 800788c:	0030      	movs	r0, r6
 800788e:	f000 f865 	bl	800795c <_sbrk_r>
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	d12b      	bne.n	80078ee <_malloc_r+0x9a>
 8007896:	230c      	movs	r3, #12
 8007898:	0030      	movs	r0, r6
 800789a:	6033      	str	r3, [r6, #0]
 800789c:	f000 f871 	bl	8007982 <__malloc_unlock>
 80078a0:	e003      	b.n	80078aa <_malloc_r+0x56>
 80078a2:	2d00      	cmp	r5, #0
 80078a4:	dadf      	bge.n	8007866 <_malloc_r+0x12>
 80078a6:	230c      	movs	r3, #12
 80078a8:	6033      	str	r3, [r6, #0]
 80078aa:	2000      	movs	r0, #0
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
 80078ae:	680b      	ldr	r3, [r1, #0]
 80078b0:	1b5b      	subs	r3, r3, r5
 80078b2:	d419      	bmi.n	80078e8 <_malloc_r+0x94>
 80078b4:	2b0b      	cmp	r3, #11
 80078b6:	d903      	bls.n	80078c0 <_malloc_r+0x6c>
 80078b8:	600b      	str	r3, [r1, #0]
 80078ba:	18cc      	adds	r4, r1, r3
 80078bc:	6025      	str	r5, [r4, #0]
 80078be:	e003      	b.n	80078c8 <_malloc_r+0x74>
 80078c0:	684b      	ldr	r3, [r1, #4]
 80078c2:	428c      	cmp	r4, r1
 80078c4:	d10d      	bne.n	80078e2 <_malloc_r+0x8e>
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	0030      	movs	r0, r6
 80078ca:	f000 f85a 	bl	8007982 <__malloc_unlock>
 80078ce:	0020      	movs	r0, r4
 80078d0:	2207      	movs	r2, #7
 80078d2:	300b      	adds	r0, #11
 80078d4:	1d23      	adds	r3, r4, #4
 80078d6:	4390      	bics	r0, r2
 80078d8:	1ac3      	subs	r3, r0, r3
 80078da:	d0e7      	beq.n	80078ac <_malloc_r+0x58>
 80078dc:	425a      	negs	r2, r3
 80078de:	50e2      	str	r2, [r4, r3]
 80078e0:	e7e4      	b.n	80078ac <_malloc_r+0x58>
 80078e2:	6063      	str	r3, [r4, #4]
 80078e4:	000c      	movs	r4, r1
 80078e6:	e7ef      	b.n	80078c8 <_malloc_r+0x74>
 80078e8:	000c      	movs	r4, r1
 80078ea:	6849      	ldr	r1, [r1, #4]
 80078ec:	e7c3      	b.n	8007876 <_malloc_r+0x22>
 80078ee:	2303      	movs	r3, #3
 80078f0:	1cc4      	adds	r4, r0, #3
 80078f2:	439c      	bics	r4, r3
 80078f4:	42a0      	cmp	r0, r4
 80078f6:	d0e1      	beq.n	80078bc <_malloc_r+0x68>
 80078f8:	1a21      	subs	r1, r4, r0
 80078fa:	0030      	movs	r0, r6
 80078fc:	f000 f82e 	bl	800795c <_sbrk_r>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d1db      	bne.n	80078bc <_malloc_r+0x68>
 8007904:	e7c7      	b.n	8007896 <_malloc_r+0x42>
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	20000550 	.word	0x20000550
 800790c:	20000554 	.word	0x20000554

08007910 <_realloc_r>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	0007      	movs	r7, r0
 8007914:	000d      	movs	r5, r1
 8007916:	0016      	movs	r6, r2
 8007918:	2900      	cmp	r1, #0
 800791a:	d105      	bne.n	8007928 <_realloc_r+0x18>
 800791c:	0011      	movs	r1, r2
 800791e:	f7ff ff99 	bl	8007854 <_malloc_r>
 8007922:	0004      	movs	r4, r0
 8007924:	0020      	movs	r0, r4
 8007926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007928:	2a00      	cmp	r2, #0
 800792a:	d103      	bne.n	8007934 <_realloc_r+0x24>
 800792c:	f7ff ff48 	bl	80077c0 <_free_r>
 8007930:	0034      	movs	r4, r6
 8007932:	e7f7      	b.n	8007924 <_realloc_r+0x14>
 8007934:	f000 f826 	bl	8007984 <_malloc_usable_size_r>
 8007938:	002c      	movs	r4, r5
 800793a:	42b0      	cmp	r0, r6
 800793c:	d2f2      	bcs.n	8007924 <_realloc_r+0x14>
 800793e:	0031      	movs	r1, r6
 8007940:	0038      	movs	r0, r7
 8007942:	f7ff ff87 	bl	8007854 <_malloc_r>
 8007946:	1e04      	subs	r4, r0, #0
 8007948:	d0ec      	beq.n	8007924 <_realloc_r+0x14>
 800794a:	0029      	movs	r1, r5
 800794c:	0032      	movs	r2, r6
 800794e:	f7ff fbe9 	bl	8007124 <memcpy>
 8007952:	0029      	movs	r1, r5
 8007954:	0038      	movs	r0, r7
 8007956:	f7ff ff33 	bl	80077c0 <_free_r>
 800795a:	e7e3      	b.n	8007924 <_realloc_r+0x14>

0800795c <_sbrk_r>:
 800795c:	2300      	movs	r3, #0
 800795e:	b570      	push	{r4, r5, r6, lr}
 8007960:	4c06      	ldr	r4, [pc, #24]	; (800797c <_sbrk_r+0x20>)
 8007962:	0005      	movs	r5, r0
 8007964:	0008      	movs	r0, r1
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	f000 f962 	bl	8007c30 <_sbrk>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d103      	bne.n	8007978 <_sbrk_r+0x1c>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d000      	beq.n	8007978 <_sbrk_r+0x1c>
 8007976:	602b      	str	r3, [r5, #0]
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	20000650 	.word	0x20000650

08007980 <__malloc_lock>:
 8007980:	4770      	bx	lr

08007982 <__malloc_unlock>:
 8007982:	4770      	bx	lr

08007984 <_malloc_usable_size_r>:
 8007984:	1f0b      	subs	r3, r1, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	1f18      	subs	r0, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	da01      	bge.n	8007992 <_malloc_usable_size_r+0xe>
 800798e:	580b      	ldr	r3, [r1, r0]
 8007990:	18c0      	adds	r0, r0, r3
 8007992:	4770      	bx	lr

08007994 <ceil>:
 8007994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007996:	004b      	lsls	r3, r1, #1
 8007998:	4a39      	ldr	r2, [pc, #228]	; (8007a80 <ceil+0xec>)
 800799a:	0d5b      	lsrs	r3, r3, #21
 800799c:	b085      	sub	sp, #20
 800799e:	189e      	adds	r6, r3, r2
 80079a0:	000c      	movs	r4, r1
 80079a2:	0005      	movs	r5, r0
 80079a4:	9003      	str	r0, [sp, #12]
 80079a6:	2e13      	cmp	r6, #19
 80079a8:	dc32      	bgt.n	8007a10 <ceil+0x7c>
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	da13      	bge.n	80079d6 <ceil+0x42>
 80079ae:	4a35      	ldr	r2, [pc, #212]	; (8007a84 <ceil+0xf0>)
 80079b0:	4b35      	ldr	r3, [pc, #212]	; (8007a88 <ceil+0xf4>)
 80079b2:	f7f8 fe67 	bl	8000684 <__aeabi_dadd>
 80079b6:	2200      	movs	r2, #0
 80079b8:	2300      	movs	r3, #0
 80079ba:	f7f8 fd4f 	bl	800045c <__aeabi_dcmpgt>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d006      	beq.n	80079d0 <ceil+0x3c>
 80079c2:	2c00      	cmp	r4, #0
 80079c4:	db57      	blt.n	8007a76 <ceil+0xe2>
 80079c6:	432c      	orrs	r4, r5
 80079c8:	2500      	movs	r5, #0
 80079ca:	42ac      	cmp	r4, r5
 80079cc:	d000      	beq.n	80079d0 <ceil+0x3c>
 80079ce:	4c2f      	ldr	r4, [pc, #188]	; (8007a8c <ceil+0xf8>)
 80079d0:	0028      	movs	r0, r5
 80079d2:	0021      	movs	r1, r4
 80079d4:	e026      	b.n	8007a24 <ceil+0x90>
 80079d6:	4f2e      	ldr	r7, [pc, #184]	; (8007a90 <ceil+0xfc>)
 80079d8:	4137      	asrs	r7, r6
 80079da:	003b      	movs	r3, r7
 80079dc:	400b      	ands	r3, r1
 80079de:	4303      	orrs	r3, r0
 80079e0:	d020      	beq.n	8007a24 <ceil+0x90>
 80079e2:	9000      	str	r0, [sp, #0]
 80079e4:	9101      	str	r1, [sp, #4]
 80079e6:	4a27      	ldr	r2, [pc, #156]	; (8007a84 <ceil+0xf0>)
 80079e8:	4b27      	ldr	r3, [pc, #156]	; (8007a88 <ceil+0xf4>)
 80079ea:	9800      	ldr	r0, [sp, #0]
 80079ec:	9901      	ldr	r1, [sp, #4]
 80079ee:	f7f8 fe49 	bl	8000684 <__aeabi_dadd>
 80079f2:	2200      	movs	r2, #0
 80079f4:	2300      	movs	r3, #0
 80079f6:	f7f8 fd31 	bl	800045c <__aeabi_dcmpgt>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0e8      	beq.n	80079d0 <ceil+0x3c>
 80079fe:	2c00      	cmp	r4, #0
 8007a00:	dd03      	ble.n	8007a0a <ceil+0x76>
 8007a02:	2380      	movs	r3, #128	; 0x80
 8007a04:	035b      	lsls	r3, r3, #13
 8007a06:	4133      	asrs	r3, r6
 8007a08:	18e4      	adds	r4, r4, r3
 8007a0a:	43bc      	bics	r4, r7
 8007a0c:	2500      	movs	r5, #0
 8007a0e:	e7df      	b.n	80079d0 <ceil+0x3c>
 8007a10:	2e33      	cmp	r6, #51	; 0x33
 8007a12:	dd09      	ble.n	8007a28 <ceil+0x94>
 8007a14:	2380      	movs	r3, #128	; 0x80
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	429e      	cmp	r6, r3
 8007a1a:	d103      	bne.n	8007a24 <ceil+0x90>
 8007a1c:	0002      	movs	r2, r0
 8007a1e:	000b      	movs	r3, r1
 8007a20:	f7f8 fe30 	bl	8000684 <__aeabi_dadd>
 8007a24:	b005      	add	sp, #20
 8007a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a28:	2701      	movs	r7, #1
 8007a2a:	4a1a      	ldr	r2, [pc, #104]	; (8007a94 <ceil+0x100>)
 8007a2c:	427f      	negs	r7, r7
 8007a2e:	189b      	adds	r3, r3, r2
 8007a30:	40df      	lsrs	r7, r3
 8007a32:	4238      	tst	r0, r7
 8007a34:	d0f6      	beq.n	8007a24 <ceil+0x90>
 8007a36:	9000      	str	r0, [sp, #0]
 8007a38:	9101      	str	r1, [sp, #4]
 8007a3a:	4a12      	ldr	r2, [pc, #72]	; (8007a84 <ceil+0xf0>)
 8007a3c:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <ceil+0xf4>)
 8007a3e:	9800      	ldr	r0, [sp, #0]
 8007a40:	9901      	ldr	r1, [sp, #4]
 8007a42:	f7f8 fe1f 	bl	8000684 <__aeabi_dadd>
 8007a46:	2200      	movs	r2, #0
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f7f8 fd07 	bl	800045c <__aeabi_dcmpgt>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d0be      	beq.n	80079d0 <ceil+0x3c>
 8007a52:	2c00      	cmp	r4, #0
 8007a54:	dd02      	ble.n	8007a5c <ceil+0xc8>
 8007a56:	2e14      	cmp	r6, #20
 8007a58:	d102      	bne.n	8007a60 <ceil+0xcc>
 8007a5a:	3401      	adds	r4, #1
 8007a5c:	43bd      	bics	r5, r7
 8007a5e:	e7b7      	b.n	80079d0 <ceil+0x3c>
 8007a60:	2334      	movs	r3, #52	; 0x34
 8007a62:	1b9e      	subs	r6, r3, r6
 8007a64:	3b33      	subs	r3, #51	; 0x33
 8007a66:	40b3      	lsls	r3, r6
 8007a68:	18ed      	adds	r5, r5, r3
 8007a6a:	9b03      	ldr	r3, [sp, #12]
 8007a6c:	429d      	cmp	r5, r3
 8007a6e:	419b      	sbcs	r3, r3
 8007a70:	425b      	negs	r3, r3
 8007a72:	18e4      	adds	r4, r4, r3
 8007a74:	e7f2      	b.n	8007a5c <ceil+0xc8>
 8007a76:	2480      	movs	r4, #128	; 0x80
 8007a78:	2500      	movs	r5, #0
 8007a7a:	0624      	lsls	r4, r4, #24
 8007a7c:	e7a8      	b.n	80079d0 <ceil+0x3c>
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	fffffc01 	.word	0xfffffc01
 8007a84:	8800759c 	.word	0x8800759c
 8007a88:	7e37e43c 	.word	0x7e37e43c
 8007a8c:	3ff00000 	.word	0x3ff00000
 8007a90:	000fffff 	.word	0x000fffff
 8007a94:	fffffbed 	.word	0xfffffbed

08007a98 <floor>:
 8007a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a9a:	004b      	lsls	r3, r1, #1
 8007a9c:	4a39      	ldr	r2, [pc, #228]	; (8007b84 <floor+0xec>)
 8007a9e:	0d5b      	lsrs	r3, r3, #21
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	189e      	adds	r6, r3, r2
 8007aa4:	000c      	movs	r4, r1
 8007aa6:	0005      	movs	r5, r0
 8007aa8:	9003      	str	r0, [sp, #12]
 8007aaa:	2e13      	cmp	r6, #19
 8007aac:	dc34      	bgt.n	8007b18 <floor+0x80>
 8007aae:	2e00      	cmp	r6, #0
 8007ab0:	da15      	bge.n	8007ade <floor+0x46>
 8007ab2:	4a35      	ldr	r2, [pc, #212]	; (8007b88 <floor+0xf0>)
 8007ab4:	4b35      	ldr	r3, [pc, #212]	; (8007b8c <floor+0xf4>)
 8007ab6:	f7f8 fde5 	bl	8000684 <__aeabi_dadd>
 8007aba:	2200      	movs	r2, #0
 8007abc:	2300      	movs	r3, #0
 8007abe:	f7f8 fccd 	bl	800045c <__aeabi_dcmpgt>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d008      	beq.n	8007ad8 <floor+0x40>
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	da59      	bge.n	8007b7e <floor+0xe6>
 8007aca:	0063      	lsls	r3, r4, #1
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	432b      	orrs	r3, r5
 8007ad0:	2500      	movs	r5, #0
 8007ad2:	42ab      	cmp	r3, r5
 8007ad4:	d000      	beq.n	8007ad8 <floor+0x40>
 8007ad6:	4c2e      	ldr	r4, [pc, #184]	; (8007b90 <floor+0xf8>)
 8007ad8:	0028      	movs	r0, r5
 8007ada:	0021      	movs	r1, r4
 8007adc:	e026      	b.n	8007b2c <floor+0x94>
 8007ade:	4f2d      	ldr	r7, [pc, #180]	; (8007b94 <floor+0xfc>)
 8007ae0:	4137      	asrs	r7, r6
 8007ae2:	003b      	movs	r3, r7
 8007ae4:	400b      	ands	r3, r1
 8007ae6:	4303      	orrs	r3, r0
 8007ae8:	d020      	beq.n	8007b2c <floor+0x94>
 8007aea:	9000      	str	r0, [sp, #0]
 8007aec:	9101      	str	r1, [sp, #4]
 8007aee:	4a26      	ldr	r2, [pc, #152]	; (8007b88 <floor+0xf0>)
 8007af0:	4b26      	ldr	r3, [pc, #152]	; (8007b8c <floor+0xf4>)
 8007af2:	9800      	ldr	r0, [sp, #0]
 8007af4:	9901      	ldr	r1, [sp, #4]
 8007af6:	f7f8 fdc5 	bl	8000684 <__aeabi_dadd>
 8007afa:	2200      	movs	r2, #0
 8007afc:	2300      	movs	r3, #0
 8007afe:	f7f8 fcad 	bl	800045c <__aeabi_dcmpgt>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d0e8      	beq.n	8007ad8 <floor+0x40>
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	da03      	bge.n	8007b12 <floor+0x7a>
 8007b0a:	2380      	movs	r3, #128	; 0x80
 8007b0c:	035b      	lsls	r3, r3, #13
 8007b0e:	4133      	asrs	r3, r6
 8007b10:	18e4      	adds	r4, r4, r3
 8007b12:	43bc      	bics	r4, r7
 8007b14:	2500      	movs	r5, #0
 8007b16:	e7df      	b.n	8007ad8 <floor+0x40>
 8007b18:	2e33      	cmp	r6, #51	; 0x33
 8007b1a:	dd09      	ble.n	8007b30 <floor+0x98>
 8007b1c:	2380      	movs	r3, #128	; 0x80
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	429e      	cmp	r6, r3
 8007b22:	d103      	bne.n	8007b2c <floor+0x94>
 8007b24:	0002      	movs	r2, r0
 8007b26:	000b      	movs	r3, r1
 8007b28:	f7f8 fdac 	bl	8000684 <__aeabi_dadd>
 8007b2c:	b005      	add	sp, #20
 8007b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b30:	2701      	movs	r7, #1
 8007b32:	4a19      	ldr	r2, [pc, #100]	; (8007b98 <floor+0x100>)
 8007b34:	427f      	negs	r7, r7
 8007b36:	189b      	adds	r3, r3, r2
 8007b38:	40df      	lsrs	r7, r3
 8007b3a:	4238      	tst	r0, r7
 8007b3c:	d0f6      	beq.n	8007b2c <floor+0x94>
 8007b3e:	9000      	str	r0, [sp, #0]
 8007b40:	9101      	str	r1, [sp, #4]
 8007b42:	4a11      	ldr	r2, [pc, #68]	; (8007b88 <floor+0xf0>)
 8007b44:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <floor+0xf4>)
 8007b46:	9800      	ldr	r0, [sp, #0]
 8007b48:	9901      	ldr	r1, [sp, #4]
 8007b4a:	f7f8 fd9b 	bl	8000684 <__aeabi_dadd>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2300      	movs	r3, #0
 8007b52:	f7f8 fc83 	bl	800045c <__aeabi_dcmpgt>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d0be      	beq.n	8007ad8 <floor+0x40>
 8007b5a:	2c00      	cmp	r4, #0
 8007b5c:	da02      	bge.n	8007b64 <floor+0xcc>
 8007b5e:	2e14      	cmp	r6, #20
 8007b60:	d102      	bne.n	8007b68 <floor+0xd0>
 8007b62:	3401      	adds	r4, #1
 8007b64:	43bd      	bics	r5, r7
 8007b66:	e7b7      	b.n	8007ad8 <floor+0x40>
 8007b68:	2334      	movs	r3, #52	; 0x34
 8007b6a:	1b9e      	subs	r6, r3, r6
 8007b6c:	3b33      	subs	r3, #51	; 0x33
 8007b6e:	40b3      	lsls	r3, r6
 8007b70:	18ed      	adds	r5, r5, r3
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	429d      	cmp	r5, r3
 8007b76:	419b      	sbcs	r3, r3
 8007b78:	425b      	negs	r3, r3
 8007b7a:	18e4      	adds	r4, r4, r3
 8007b7c:	e7f2      	b.n	8007b64 <floor+0xcc>
 8007b7e:	2500      	movs	r5, #0
 8007b80:	002c      	movs	r4, r5
 8007b82:	e7a9      	b.n	8007ad8 <floor+0x40>
 8007b84:	fffffc01 	.word	0xfffffc01
 8007b88:	8800759c 	.word	0x8800759c
 8007b8c:	7e37e43c 	.word	0x7e37e43c
 8007b90:	bff00000 	.word	0xbff00000
 8007b94:	000fffff 	.word	0x000fffff
 8007b98:	fffffbed 	.word	0xfffffbed

08007b9c <round>:
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	004a      	lsls	r2, r1, #1
 8007ba0:	0007      	movs	r7, r0
 8007ba2:	481f      	ldr	r0, [pc, #124]	; (8007c20 <round+0x84>)
 8007ba4:	0d52      	lsrs	r2, r2, #21
 8007ba6:	1815      	adds	r5, r2, r0
 8007ba8:	000e      	movs	r6, r1
 8007baa:	2d13      	cmp	r5, #19
 8007bac:	dc18      	bgt.n	8007be0 <round+0x44>
 8007bae:	2d00      	cmp	r5, #0
 8007bb0:	da09      	bge.n	8007bc6 <round+0x2a>
 8007bb2:	0fcb      	lsrs	r3, r1, #31
 8007bb4:	07db      	lsls	r3, r3, #31
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	1c69      	adds	r1, r5, #1
 8007bba:	d101      	bne.n	8007bc0 <round+0x24>
 8007bbc:	4919      	ldr	r1, [pc, #100]	; (8007c24 <round+0x88>)
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	0019      	movs	r1, r3
 8007bc2:	0010      	movs	r0, r2
 8007bc4:	e017      	b.n	8007bf6 <round+0x5a>
 8007bc6:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <round+0x8c>)
 8007bc8:	412a      	asrs	r2, r5
 8007bca:	420a      	tst	r2, r1
 8007bcc:	d101      	bne.n	8007bd2 <round+0x36>
 8007bce:	2f00      	cmp	r7, #0
 8007bd0:	d012      	beq.n	8007bf8 <round+0x5c>
 8007bd2:	2380      	movs	r3, #128	; 0x80
 8007bd4:	031b      	lsls	r3, r3, #12
 8007bd6:	412b      	asrs	r3, r5
 8007bd8:	199b      	adds	r3, r3, r6
 8007bda:	4393      	bics	r3, r2
 8007bdc:	2200      	movs	r2, #0
 8007bde:	e7ef      	b.n	8007bc0 <round+0x24>
 8007be0:	2d33      	cmp	r5, #51	; 0x33
 8007be2:	dd0b      	ble.n	8007bfc <round+0x60>
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	429d      	cmp	r5, r3
 8007bea:	d105      	bne.n	8007bf8 <round+0x5c>
 8007bec:	003a      	movs	r2, r7
 8007bee:	000b      	movs	r3, r1
 8007bf0:	0038      	movs	r0, r7
 8007bf2:	f7f8 fd47 	bl	8000684 <__aeabi_dadd>
 8007bf6:	0007      	movs	r7, r0
 8007bf8:	0038      	movs	r0, r7
 8007bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfc:	2601      	movs	r6, #1
 8007bfe:	480b      	ldr	r0, [pc, #44]	; (8007c2c <round+0x90>)
 8007c00:	4276      	negs	r6, r6
 8007c02:	1812      	adds	r2, r2, r0
 8007c04:	40d6      	lsrs	r6, r2
 8007c06:	423e      	tst	r6, r7
 8007c08:	d0f6      	beq.n	8007bf8 <round+0x5c>
 8007c0a:	2233      	movs	r2, #51	; 0x33
 8007c0c:	1b55      	subs	r5, r2, r5
 8007c0e:	3a32      	subs	r2, #50	; 0x32
 8007c10:	40aa      	lsls	r2, r5
 8007c12:	19d2      	adds	r2, r2, r7
 8007c14:	42ba      	cmp	r2, r7
 8007c16:	41a4      	sbcs	r4, r4
 8007c18:	4264      	negs	r4, r4
 8007c1a:	190b      	adds	r3, r1, r4
 8007c1c:	43b2      	bics	r2, r6
 8007c1e:	e7cf      	b.n	8007bc0 <round+0x24>
 8007c20:	fffffc01 	.word	0xfffffc01
 8007c24:	3ff00000 	.word	0x3ff00000
 8007c28:	000fffff 	.word	0x000fffff
 8007c2c:	fffffbed 	.word	0xfffffbed

08007c30 <_sbrk>:
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <_sbrk+0x18>)
 8007c32:	0002      	movs	r2, r0
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	2900      	cmp	r1, #0
 8007c38:	d101      	bne.n	8007c3e <_sbrk+0xe>
 8007c3a:	4904      	ldr	r1, [pc, #16]	; (8007c4c <_sbrk+0x1c>)
 8007c3c:	6019      	str	r1, [r3, #0]
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	1882      	adds	r2, r0, r2
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	4770      	bx	lr
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	20000558 	.word	0x20000558
 8007c4c:	20000658 	.word	0x20000658

08007c50 <_init>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr

08007c5c <_fini>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c62:	bc08      	pop	{r3}
 8007c64:	469e      	mov	lr, r3
 8007c66:	4770      	bx	lr
